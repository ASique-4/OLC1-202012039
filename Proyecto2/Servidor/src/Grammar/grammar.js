/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,33],$V2=[1,29],$V3=[1,31],$V4=[1,30],$V5=[1,46],$V6=[1,47],$V7=[1,48],$V8=[1,49],$V9=[1,50],$Va=[1,37],$Vb=[1,38],$Vc=[1,42],$Vd=[1,39],$Ve=[1,40],$Vf=[1,41],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[2,5,34,37,38,39,42,45,46,47,48,49,82,97,103,105,106,109,111,112,128],$Vk=[1,57],$Vl=[2,41],$Vm=[1,65],$Vn=[1,69],$Vo=[1,101],$Vp=[1,90],$Vq=[1,102],$Vr=[1,79],$Vs=[1,99],$Vt=[1,100],$Vu=[1,106],$Vv=[1,91],$Vw=[1,92],$Vx=[1,96],$Vy=[1,93],$Vz=[1,94],$VA=[1,97],$VB=[1,95],$VC=[33,37,41,77],$VD=[2,125],$VE=[27,34,41,51,78,89,90,91,92,93,94,95,96,102,130],$VF=[1,142],$VG=[2,5,27,34,37,38,39,41,42,44,45,46,47,48,49,51,64,65,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],$VH=[1,151],$VI=[1,152],$VJ=[1,153],$VK=[1,154],$VL=[1,155],$VM=[1,156],$VN=[1,157],$VO=[1,158],$VP=[2,5,27,34,37,38,39,41,42,44,45,46,47,48,49,51,64,65,68,69,70,71,72,73,74,75,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],$VQ=[2,5,34,37,38,39,42,44,45,46,47,48,49,52,64,65,69,82,97,103,105,106,109,111,112,119,120,121,122,123,124,128,129],$VR=[1,171],$VS=[1,173],$VT=[1,174],$VU=[1,175],$VV=[1,176],$VW=[1,177],$VX=[1,178],$VY=[1,181],$VZ=[1,182],$V_=[2,165],$V$=[1,188],$V01=[41,51],$V11=[2,5,27,34,37,38,39,41,42,44,45,46,47,48,49,51,64,65,68,69,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],$V21=[2,5,27,34,37,38,39,41,42,45,46,47,48,49,51,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],$V31=[37,39,44,52,64,65,69,119,120,121,122,123,124,129],$V41=[1,258],$V51=[2,5,27,34,37,38,39,41,42,44,45,46,47,48,49,51,64,65,68,69,70,71,72,73,74,75,76,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],$V61=[2,5,27,34,37,38,39,41,42,44,45,46,47,48,49,51,64,65,68,69,70,71,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],$V71=[2,5,27,34,37,38,39,41,42,44,45,46,47,48,49,51,64,65,68,69,70,71,72,73,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],$V81=[2,34,37,38,39,42,45,46,47,48,49,82,97,103,105,106,109,111,128],$V91=[1,297],$Va1=[101,104],$Vb1=[1,334],$Vc1=[34,51],$Vd1=[1,344],$Ve1=[2,37,38,39,42,45,46,47,48,49,82,97,103,105,106,109,111,112,128],$Vf1=[2,114],$Vg1=[2,5,34,37,38,39,42,45,46,47,48,49,82,84,97,103,105,106,109,111,112,128];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LISTAINSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRESION":7,"CASTEO":8,"ASIGNACION":9,"INCREMENTO":10,"VECTOR_1D_T1":11,"VECTOR_1D_T2":12,"VECTOR_2D_T1":13,"VECTOR_2D_T2":14,"IF":15,"SWITCH":16,"WHILE":17,"FOR":18,"DO_WHILE":19,"DO_UNTIL":20,"BREAK":21,"FUNCION":22,"CONTINUE":23,"RETURN":24,"METODO":25,"LLAMADA":26,";":27,"RUN":28,"PUSH":29,"POP":30,"TERNARIO":31,"BLOQUE":32,"{":33,"}":34,"DECLARACION":35,"TIPOS":36,"expreID":37,"pr_print":38,"(":39,"VALORES":40,")":41,"pr_println":42,"E":43,"expreCADENA":44,"pr_int":45,"pr_char":46,"pr_string":47,"pr_bool":48,"pr_double":49,"LISTA_EXPREID":50,",":51,"expreBOOL":52,"EXPRESION":53,"TO_LOWER":54,"TO_UPPER":55,"LENGTH":56,"TYPE_OF":57,"ROUND":58,"TO_STRING":59,"TO_CHAR_ARRAY":60,"VALORES2":61,"OPERACION":62,"OPERACIONES":63,"expreNUMBER":64,"expreDECIMAL":65,"ACCESO_VECTOR_1D":66,"ACCESO_VECTOR_2D":67,"+":68,"-":69,"*":70,"/":71,"%":72,"^":73,"++":74,"--":75,"=":76,"[":77,"]":78,"pr_new":79,"LISTA_VALORES_VECTORES":80,"LISTA_VALORES_VECTORES_2D":81,"pr_if":82,"CONDICION":83,"pr_else":84,"ELIF":85,"pr_elif":86,"CONDICIONAL":87,"CONDICIONAL2":88,"==":89,"!=":90,">":91,"<":92,">=":93,"<=":94,"&&":95,"||":96,"pr_switch":97,"LISTA_CASES":98,"DEFAULT":99,"CASE":100,"pr_case":101,":":102,"pr_break":103,"pr_default":104,"pr_while":105,"pr_for":106,"ASIGNACION_FOR":107,"INCREMENTO_FOR":108,"pr_do":109,"pr_until":110,"pr_continue":111,"pr_return":112,"LISTA_PARAMETROS":113,"PARAMETRO":114,"LISTA_INSTRUCCIONES_METODO":115,"INSTRUCCION_METODO":116,"pr_void":117,"LISTA_PARAMETROS_LLAMADA":118,"pr_tolower":119,"pr_toupper":120,"pr_tostring":121,"pr_length":122,"pr_typeof":123,"pr_tochararray":124,".":125,"pr_push":126,"pr_pop":127,"pr_run":128,"pr_round":129,"?":130,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",27:";",33:"{",34:"}",37:"expreID",38:"pr_print",39:"(",41:")",42:"pr_println",44:"expreCADENA",45:"pr_int",46:"pr_char",47:"pr_string",48:"pr_bool",49:"pr_double",51:",",52:"expreBOOL",64:"expreNUMBER",65:"expreDECIMAL",68:"+",69:"-",70:"*",71:"/",72:"%",73:"^",74:"++",75:"--",76:"=",77:"[",78:"]",79:"pr_new",82:"pr_if",84:"pr_else",86:"pr_elif",89:"==",90:"!=",91:">",92:"<",93:">=",94:"<=",95:"&&",96:"||",97:"pr_switch",101:"pr_case",102:":",103:"pr_break",104:"pr_default",105:"pr_while",106:"pr_for",109:"pr_do",110:"pr_until",111:"pr_continue",112:"pr_return",117:"pr_void",119:"pr_tolower",120:"pr_toupper",121:"pr_tostring",122:"pr_length",123:"pr_typeof",124:"pr_tochararray",125:".",126:"pr_push",127:"pr_pop",128:"pr_run",129:"pr_round",130:"?"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[32,3],[35,3],[7,5],[7,5],[43,1],[43,3],[36,1],[36,1],[36,1],[36,1],[36,1],[50,3],[50,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[61,1],[61,1],[53,2],[53,1],[63,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,2],[62,2],[62,2],[10,3],[10,3],[8,4],[9,5],[9,4],[9,4],[9,4],[9,3],[9,5],[9,4],[11,11],[11,7],[12,9],[80,3],[80,1],[13,16],[14,11],[81,5],[81,3],[66,4],[67,7],[15,7],[15,11],[15,8],[15,12],[85,7],[85,8],[83,3],[83,3],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[88,1],[88,1],[16,8],[98,2],[98,1],[100,6],[99,5],[17,7],[18,10],[107,3],[107,1],[107,3],[108,2],[108,2],[19,9],[20,9],[21,2],[23,2],[24,3],[24,2],[22,9],[22,8],[113,3],[113,1],[114,2],[115,2],[115,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,2],[116,1],[116,1],[116,1],[116,1],[116,1],[25,9],[25,8],[25,7],[25,6],[26,4],[26,3],[118,3],[118,1],[54,4],[55,4],[59,4],[56,4],[57,4],[60,4],[29,7],[30,5],[28,5],[28,6],[58,4],[31,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]);  this.$= $$[$0-1];  
break;
case 3:
this.$=[$$[$0]]
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 24: case 25: case 26: case 27: case 33: case 35: case 36: case 37: case 38: case 39: case 42: case 43: case 52: case 53: case 55: case 56: case 57: case 58: case 59: case 60: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 155: case 156: case 157: case 158:
this.$=$$[$0];
break;
case 23: case 70: case 154:
this.$=$$[$0-1];
break;
case 28: case 159:
console.log($$[$0]); console.log("error sintactico");
break;
case 29:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 30:

    
    this.$= new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);

break;
case 31:

    this.$= new Impresion("print",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);

break;
case 32:

    this.$= new Impresion("println",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);

break;
case 34:
this.$=$$[$0-2];
break;
case 40: case 87:
this.$=$$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 41: case 88:
this.$=[$$[$0]];
break;
case 44:
this.$='(' + $$[$0].casteo + ') ' + $$[$0].expresion;
break;
case 45: case 46: case 47: case 48: case 49: case 50: case 51:
this.$=$$[$0].ejecutar();
break;
case 54:
 this.$=$$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 61:
this.$=$$[$0].id + "(" + $$[$0].parametros + ")" ;
break;
case 62:
this.$=$$[$0].variable + "[" + $$[$0].expresion + "]";
break;
case 63:
this.$=$$[$0].variable + "[" + $$[$0].expresion + "]" + "[" + $$[$0].expresion2 + "]";
break;
case 64:
this.$=$$[$0-2] + '+' + $$[$0];
break;
case 65:
this.$=$$[$0-2] + '-' + $$[$0];
break;
case 66:
this.$=$$[$0-2] + '*' + $$[$0];
break;
case 67:
this.$=$$[$0-2] + '/' + $$[$0];
break;
case 68:
this.$=$$[$0-2] + '%' + $$[$0];
break;
case 69:
this.$=$$[$0-2] + '^' + $$[$0];
break;
case 71:
this.$=$$[$0-1] + '++';
break;
case 72:
this.$=$$[$0-1] + '--';
break;
case 73:
this.$='-' + $$[$0];
break;
case 74:
this.$= new Incremento($$[$0-2],'++',_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 75:
this.$= new Incremento($$[$0-2],'--',_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 76:

    this.$= new Casteo(null,null,$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 77:

    this.$= new Asignacion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 78: case 83:

        this.$= new Asignacion(null,$$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 79:

        this.$= new Asignacion(null,$$[$0-3].variable + "[" + $$[$0-3].expresion + "]",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 80:

        this.$= new Asignacion(null,$$[$0-3].variable + "[" + $$[$0-3].expresion + "]" + "[" + $$[$0-3].expresion2 + "]",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 81:

        
        this.$= new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 82:

        this.$= new Asignacion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 84:

    this.$= new Vector_1D_T1($$[$0-10],$$[$0-7],$$[$0-4],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);

break;
case 85:

    console.log($$[$0-1]);
    this.$= new Vector_1D_T1($$[$0-6],$$[$0-3],null,$$[$0-1].cadena,_$[$0-6].first_line,_$[$0-6].first_column);

break;
case 86:

    this.$= new Vector_1D_T2($$[$0-8],$$[$0-5],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);

break;
case 89:


    this.$= new Vector_2D_T1($$[$0-15],$$[$0-10],$$[$0-7],$$[$0-5],$$[$0-2],_$[$0-15].first_line,_$[$0-15].first_column);

break;
case 90:

    this.$= new Vector_2D_T2($$[$0-10],$$[$0-5],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);

break;
case 91:
this.$=$$[$0-4]; $$[$0-4].push('{'+$$[$0-1]+'}');
break;
case 92:
this.$=['{'+$$[$0-1]+'}'];
break;
case 93:
this.$= new Acceso_Vector_1D($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 94:
this.$= new Acceso_Vector_2D($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 95:

    console.log($$[$0-1] );
    this.$= new IF($$[$0-4].valor1 + $$[$0-4].condicion + $$[$0-4].valor2,$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
    
break;
case 96:

        this.$= new IF_ELSE($$[$0-8].valor1 + $$[$0-8].condicion + $$[$0-8].valor2,$$[$0-5],null,$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
    
break;
case 97:

        this.$= new IF($$[$0-5].valor1 + $$[$0-5].condicion + $$[$0-5].valor2,$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 98:

        this.$= new IF_ELSE($$[$0-9].valor1 + $$[$0-9].condicion + $$[$0-9].valor2,$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
    
break;
case 99:

    this.$= new IF_ELIF($$[$0-4].valor1 + $$[$0-4].condicion + $$[$0-4].valor2,$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
    
break;
case 100:

        this.$= new IF_ELIF($$[$0-5].valor1 + $$[$0-5].condicion + $$[$0-5].valor2,$$[$0-2],$$[$02],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 101:

    this.$= new CONDICION($$[$0-2] + " " ,$$[$0-1] + " ",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 102:

        this.$= new CONDICION($$[$0-2].valor1 + $$[$0-2].condicion + $$[$0-2].valor2 + " ",$$[$0-1]," " + $$[$0].valor1 + $$[$0].condicion + $$[$0].valor2,_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 111:

    this.$= new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 112: case 134:

    this.$=$$[$0-1];
    $$[$0-1].push($$[$0]);
    
break;
case 113: case 132: case 135: case 167:

        this.$=[$$[$0]];
    
break;
case 114:

    this.$= new Case($$[$0-4],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 115:

    this.$= new Default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 116:

    this.$= new While($$[$0-4].valor1 + $$[$0-4].condicion + $$[$0-4].valor2,$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
    
break;
case 117:

    this.$= new For($$[$0-7],$$[$0-6].valor1 + $$[$0-6].condicion + $$[$0-6].valor2,$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
    
break;
case 118:

    this.$= new Asignacion(null,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 119:

        this.$=$$[$0];
    
break;
case 120:

        this.$= new Asignacion(null,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
        console.log("------");
        console.log($$[$0]);
        console.log("------");
    
break;
case 121:

    this.$= new Incremento($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 122:

        this.$= new Incremento($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 123:

    this.$= new Do_While($$[$0-6],$$[$0-2].valor1 + $$[$0-2].condicion + $$[$0-2].valor2,_$[$0-8].first_line,_$[$0-8].first_column);
    
break;
case 124:

    this.$= new Do_Until($$[$0-6],$$[$0-2].valor1 + $$[$0-2].condicion + $$[$0-2].valor2,_$[$0-8].first_line,_$[$0-8].first_column);
    
break;
case 125:

    this.$= new Break(_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 126:

    this.$= new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 127:

    this.$= new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 128:

        this.$= new Return(null,_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 129:

    this.$= new Funcion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
    console.log("------");
    console.log(this.$);
    console.log("------");
    
break;
case 130:

        this.$= new Funcion($$[$0-7],null,$$[$0-3],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 131: case 166:

    this.$=$$[$0-2];
    $$[$0-2].push($$[$0]);
    
break;
case 133:

    this.$= new Parametro($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 160:

    this.$= new Metodo($$[$0-8],$$[$0-6],$$[$0-1],"void",_$[$0-8].first_line,_$[$0-8].first_column);
    
break;
case 161:

        this.$= new Metodo($$[$0-7],null,$$[$0-1],"void",_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 162:

        this.$= new Metodo($$[$0-6],$$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
    
break;
case 163:

        this.$= new Metodo($$[$0-5],null,$$[$0-1],null,_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 164:

    this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 165:

        this.$= new Llamada($$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 168:

    this.$= new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 169:

    this.$= new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 170:

    this.$= new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 171:

    this.$= new Length($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 172:

    this.$= new TypeOf($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 173:

    this.$= new ToCharArray($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
    
break;
case 174:

    this.$= new Push($$[$0-6],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);
    
break;
case 175:

    this.$= new Pop($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 176:

    this.$= new Run($$[$0-3],null,_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 177:

        this.$= new Run($$[$0-4],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column);
        
    
break;
case 178:

    this.$= new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 179:

    this.$= new Ternario($$[$0-7] + $$[$0-5].ejecutar(),$$[$0-3],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{1:[3]},{2:$V0,5:[1,51],6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),{27:[1,53]},o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),o($Vj,[2,27]),o($Vj,[2,28]),{39:[1,54]},{39:[1,55]},{36:56,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9},{37:$Vk,50:58,77:[1,59]},{39:[1,63],51:$Vl,74:[1,61],75:[1,62],76:[1,60],77:$Vm,125:[1,64]},{76:[1,66]},{76:[1,67]},{51:$Vn,76:[1,68]},{39:[1,70]},{39:[1,71]},{39:[1,72]},{39:[1,73]},{33:[1,74]},{27:[1,75]},{27:[1,76]},{8:81,26:103,27:[1,78],37:$Vo,39:$Vp,40:77,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{37:[1,107]},o($VC,[2,35]),o($VC,[2,36]),o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,23]),{8:81,26:103,37:$Vo,39:$Vp,40:108,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{8:81,26:103,37:$Vo,39:$Vp,40:109,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{41:[1,110]},o([27,51],$Vl,{76:[1,111]}),{27:[1,112],51:$Vn,76:[1,113]},{78:[1,114]},{8:81,26:103,37:$Vo,39:$Vp,40:115,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,83:116,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{27:[1,117]},{27:[1,118]},{8:81,26:103,36:124,37:$Vo,39:$Vp,40:123,41:[1,120],44:$Vq,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,113:119,114:122,118:121,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{126:[1,125],127:[1,126]},{64:[1,127]},{8:81,26:103,37:$Vo,39:$Vp,40:128,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{8:81,26:103,37:$Vo,39:$Vp,40:129,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{8:81,26:103,37:$Vo,39:$Vp,40:130,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{37:[1,131]},{8:81,26:103,37:$Vo,39:$Vp,40:133,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,83:132,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{37:[1,134]},{8:81,26:103,37:$Vo,39:$Vp,40:133,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,83:135,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{9:136,36:137,37:[1,138],45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35},{2:$V0,4:139,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},o($Vj,$VD),o($Vj,[2,126]),{27:[1,140]},o($Vj,[2,128]),o($VE,[2,42]),o($VE,[2,43],{26:103,66:104,67:105,62:141,37:$Vo,39:$VF,44:$Vq,64:$Vs,65:$Vt,69:$Vu}),o($VE,[2,44]),o($VE,[2,45]),o($VE,[2,46]),o($VE,[2,47]),o($VE,[2,48]),o($VE,[2,49]),o($VE,[2,50]),o($VE,[2,51]),o([2,5,27,34,37,38,39,41,42,44,45,46,47,48,49,51,64,65,69,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],[2,55]),{26:103,36:56,37:$Vo,39:$VF,44:$Vq,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,62:143,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{39:[1,144]},{39:[1,145]},{39:[1,146]},{39:[1,147]},{39:[1,148]},{39:[1,149]},{39:[1,150]},o($VG,[2,56],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($VP,[2,57]),o($VP,[2,58]),o([2,5,27,34,37,38,41,42,44,45,46,47,48,49,51,64,65,68,69,70,71,72,73,74,75,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],[2,59],{39:[1,159],77:$Vm}),o($VP,[2,60]),o($VP,[2,61]),o($VP,[2,62]),o($VP,[2,63]),{26:103,37:$Vo,39:$VF,44:$Vq,62:160,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{39:[1,161]},{41:[1,162]},{41:[1,163]},{26:103,37:$Vo,39:$VF,44:$Vq,52:[1,165],53:166,61:164,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{8:81,26:103,37:$Vo,39:$Vp,40:167,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},o($VQ,[2,81]),{8:81,26:103,37:$Vo,39:$Vp,40:168,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{37:[1,169],77:[1,170]},{27:$VR,87:172,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX},{88:180,95:$VY,96:$VZ,130:[1,179]},o($Vj,[2,74]),o($Vj,[2,75]),{41:[1,183],51:[1,184]},{27:$V_,33:[1,186],102:[1,185]},{41:[1,187],51:$V$},o($V01,[2,132]),o($V01,[2,167]),{37:[1,189]},{39:[1,190]},{39:[1,191]},{78:[1,192]},{27:[1,193]},{27:[1,194]},{27:[1,195]},o([27,51,76],[2,40]),{41:[1,196],88:180,95:$VY,96:$VZ},{87:172,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX},{41:[1,197]},{41:[1,198],88:180,95:$VY,96:$VZ},{8:81,26:103,37:$Vo,39:$Vp,40:133,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,83:199,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{37:$Vk,50:58},{51:$Vl,76:[1,200],77:$Vm},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,34:[1,201],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},o($Vj,[2,127]),o($VG,[2,54],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),{26:103,37:$Vo,39:$VF,44:$Vq,62:143,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{41:[1,202],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO},{8:81,26:103,37:$Vo,39:$Vp,40:203,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{8:81,26:103,37:$Vo,39:$Vp,40:204,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{26:103,37:$Vo,39:$VF,44:$Vq,53:205,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{8:81,26:103,37:$Vo,39:$Vp,40:206,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{8:81,26:103,37:$Vo,39:$Vp,40:207,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{8:81,26:103,37:$Vo,39:$Vp,40:208,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{44:[1,209]},{26:103,37:$Vo,39:$VF,44:$Vq,62:210,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{26:103,37:$Vo,39:$VF,44:$Vq,62:211,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{26:103,37:$Vo,39:$VF,44:$Vq,62:212,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{26:103,37:$Vo,39:$VF,44:$Vq,62:213,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{26:103,37:$Vo,39:$VF,44:$Vq,62:214,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{26:103,37:$Vo,39:$VF,44:$Vq,62:215,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},o($VP,[2,71]),o($VP,[2,72]),{8:81,26:103,37:$Vo,39:$Vp,40:123,41:[1,216],44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,118:121,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},o($V11,[2,73],{70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),{8:81,26:103,37:$Vo,39:$Vp,40:123,41:[1,217],44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,118:218,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{27:[1,219]},{27:[1,220]},o($V21,[2,76]),o($V21,[2,52]),o([2,5,27,34,38,41,42,45,46,47,48,49,51,78,82,89,90,91,92,93,94,95,96,97,102,103,105,106,109,111,112,128,130],[2,53],{26:103,66:104,67:105,62:141,37:$Vo,39:$VF,44:$Vq,64:$Vs,65:$Vt,69:$Vu}),{27:[1,221]},{27:[1,222]},{76:[1,223]},{78:[1,224]},o($VQ,[2,78]),{8:81,26:103,37:$Vo,39:$Vp,40:225,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},o($V31,[2,103]),o($V31,[2,104]),o($V31,[2,105]),o($V31,[2,106]),o($V31,[2,107]),o($V31,[2,108]),{8:81,26:103,37:$Vo,39:$Vp,40:226,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{8:81,26:103,37:$Vo,39:$Vp,40:133,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,83:227,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},o($V31,[2,109]),o($V31,[2,110]),{33:[1,229],102:[1,228]},{36:124,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,114:230},{36:231,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,117:[1,232]},{2:$V41,7:235,8:236,9:237,10:238,11:239,12:240,13:241,14:242,15:243,16:244,17:245,18:246,19:247,20:248,21:249,22:250,23:251,25:252,26:253,28:254,29:255,30:256,31:257,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,115:233,116:234,128:$Vi},o($VP,[2,164]),{8:81,26:103,37:$Vo,39:$Vp,40:259,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},o($V01,[2,133]),{8:81,26:103,37:$Vo,39:$Vp,40:260,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{41:[1,261]},o($V51,[2,93],{77:[1,262]}),o($VQ,[2,79]),o($VQ,[2,80]),o($VQ,[2,83]),{33:[1,263]},{33:[1,264]},{33:[1,265]},{27:[1,266],88:180,95:$VY,96:$VZ},{8:81,26:103,37:$Vo,39:$Vp,40:267,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{105:[1,268],110:[1,269]},o($VP,[2,70]),{41:[1,270]},{41:[1,271]},{26:103,37:$Vo,39:$VF,41:[1,272],44:$Vq,62:141,64:$Vs,65:$Vt,66:104,67:105,69:$Vu},{41:[1,273]},{41:[1,274]},{41:[1,275]},{41:[1,276]},o($V11,[2,64],{70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V11,[2,65],{70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V61,[2,66],{72:$VL,73:$VM,74:$VN,75:$VO}),o($V61,[2,67],{72:$VL,73:$VM,74:$VN,75:$VO}),o($V71,[2,68],{74:$VN,75:$VO}),o($V71,[2,69],{74:$VN,75:$VO}),o($VP,$V_),{27:[1,277]},{41:[1,278],51:$V$},o($Vj,[2,31]),o($Vj,[2,32]),o($VQ,[2,77]),o($VQ,[2,82]),{33:[1,281],60:280,79:[1,279],124:$VA},{37:[1,282]},o([27,41,95,96,130],[2,101]),{102:[1,283]},o([27,41,130],[2,102],{88:180,95:$VY,96:$VZ}),{36:284,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,117:[1,285]},{2:$V41,7:235,8:236,9:237,10:238,11:239,12:240,13:241,14:242,15:243,16:244,17:245,18:246,19:247,20:248,21:249,22:250,23:251,25:252,26:253,28:254,29:255,30:256,31:257,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,115:286,116:234,128:$Vi},o($V01,[2,131]),{33:[1,287]},{33:[1,288]},{2:$V41,7:235,8:236,9:237,10:238,11:239,12:240,13:241,14:242,15:243,16:244,17:245,18:246,19:247,20:248,21:249,22:250,23:251,25:252,26:253,28:254,29:255,30:256,31:257,34:[1,289],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,116:290,128:$Vi},o($V81,[2,135]),o($V81,[2,136]),o($V81,[2,137]),o($V81,[2,138]),o($V81,[2,139]),o($V81,[2,140]),o($V81,[2,141]),o($V81,[2,142]),o($V81,[2,143]),o($V81,[2,144]),o($V81,[2,145]),o($V81,[2,146]),o($V81,[2,147]),o($V81,[2,148]),o($V81,[2,149]),o($V81,[2,150]),o($V81,[2,151]),o($V81,[2,152]),o($V81,[2,153]),{27:[1,291]},o($V81,[2,155]),o($V81,[2,156]),o($V81,[2,157]),o($V81,[2,158]),o($V81,[2,159]),o($V01,[2,166]),{41:[1,292]},o($Vj,[2,175]),{64:[1,293]},{2:$V0,4:294,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{98:295,100:296,101:$V91},{2:$V0,4:298,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{37:[1,300],50:302,107:299,108:301},{27:$VR},{39:[1,303]},{39:[1,304]},o($VE,[2,168]),o($VE,[2,169]),o($VE,[2,171]),o($VE,[2,172]),o($VE,[2,178]),o($VE,[2,170]),o($VE,[2,173]),o($Vj,[2,176]),{27:[1,305]},{36:306,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9},{27:[1,307]},{8:81,26:103,37:$Vo,39:$Vp,40:309,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,80:308,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{76:[1,310]},{8:81,26:103,37:$Vo,39:$Vp,40:311,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{33:[1,312]},{33:[1,313]},{2:$V41,7:235,8:236,9:237,10:238,11:239,12:240,13:241,14:242,15:243,16:244,17:245,18:246,19:247,20:248,21:249,22:250,23:251,25:252,26:253,28:254,29:255,30:256,31:257,34:[1,314],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,116:290,128:$Vi},{2:$V0,4:315,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{2:$V41,7:235,8:236,9:237,10:238,11:239,12:240,13:241,14:242,15:243,16:244,17:245,18:246,19:247,20:248,21:249,22:250,23:251,25:252,26:253,28:254,29:255,30:256,31:257,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,115:316,116:234,128:$Vi},o($Vj,[2,163]),o($V81,[2,134]),o($V81,[2,154]),{27:[1,317]},{78:[1,318]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,34:[1,319],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{99:320,100:321,101:$V91,104:[1,322]},o($Va1,[2,113]),{8:81,26:103,37:$Vo,39:$Vp,40:323,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,34:[1,324],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{41:[1,325]},{51:$Vl,74:[1,327],75:[1,328],76:[1,326]},{41:[2,119]},{51:$Vn,76:[1,329]},{8:81,26:103,37:$Vo,39:$Vp,40:133,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,83:330,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{8:81,26:103,37:$Vo,39:$Vp,40:133,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,83:331,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},o($Vj,[2,177]),{77:[1,332]},o($Vj,[2,85]),{34:[1,333],51:$Vb1},o($Vc1,[2,88]),{33:[1,336],79:[1,335]},{27:[1,337]},{2:$V0,4:338,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{2:$V41,7:235,8:236,9:237,10:238,11:239,12:240,13:241,14:242,15:243,16:244,17:245,18:246,19:247,20:248,21:249,22:250,23:251,25:252,26:253,28:254,29:255,30:256,31:257,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,115:339,116:234,128:$Vi},o($Vj,[2,162]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,34:[1,340],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{2:$V41,7:235,8:236,9:237,10:238,11:239,12:240,13:241,14:242,15:243,16:244,17:245,18:246,19:247,20:248,21:249,22:250,23:251,25:252,26:253,28:254,29:255,30:256,31:257,34:[1,341],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,116:290,128:$Vi},o($Vj,[2,174]),o($V51,[2,94]),o($Vj,[2,95],{85:343,84:[1,342],86:$Vd1}),{34:[1,345]},o($Va1,[2,112]),{102:[1,346]},{102:[1,347]},o($Vj,[2,116]),{33:[1,348]},{8:81,26:103,37:$Vo,39:$Vp,40:349,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{41:[2,121]},{41:[2,122]},{8:81,26:103,37:$Vo,39:$Vp,40:350,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{41:[1,351],88:180,95:$VY,96:$VZ},{41:[1,352],88:180,95:$VY,96:$VZ},{8:81,26:103,37:$Vo,39:$Vp,40:353,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{27:[1,354]},{8:81,26:103,37:$Vo,39:$Vp,40:355,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{36:356,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9},{33:[1,358],81:357},o($Vj,[2,179]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,34:[1,359],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{2:$V41,7:235,8:236,9:237,10:238,11:239,12:240,13:241,14:242,15:243,16:244,17:245,18:246,19:247,20:248,21:249,22:250,23:251,25:252,26:253,28:254,29:255,30:256,31:257,34:[1,360],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,116:290,128:$Vi},o($Vj,[2,130]),o($Vj,[2,161]),{33:[1,361]},o($Vj,[2,97],{84:[1,362]}),{39:[1,363]},o($Vj,[2,111]),{2:$V0,4:364,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{2:$V0,4:365,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{2:$V0,4:366,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{41:[2,118]},{41:[2,120]},{27:[1,367]},{27:[1,368]},{78:[1,369]},o($Vj,[2,86]),o($Vc1,[2,87]),{77:[1,370]},{34:[1,371],51:[1,372]},{8:81,26:103,37:$Vo,39:$Vp,40:309,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,80:373,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},o($Vj,[2,129]),o($Vj,[2,160]),{2:$V0,4:374,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{33:[1,375]},{8:81,26:103,37:$Vo,39:$Vp,40:133,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,83:376,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:[1,377],105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:[1,378],105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,34:[1,379],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},o($Vj,[2,123]),o($Vj,[2,124]),{27:[1,380]},{8:81,26:103,37:$Vo,39:$Vp,40:381,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},{27:[1,382]},{33:[1,383]},{34:[1,384],51:$Vb1},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,34:[1,385],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{2:$V0,4:386,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{41:[1,387],88:180,95:$VY,96:$VZ},{27:[1,388]},{27:[1,389]},o($Vj,[2,117]),o($Vj,[2,84]),{78:[1,390]},o($Vj,[2,90]),{8:81,26:103,37:$Vo,39:$Vp,40:309,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,80:391,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},o($Vc1,[2,92]),o($Vj,[2,96]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,34:[1,392],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{33:[1,393]},o($Ve1,$VD,{34:[2,115]}),o($Ve1,$VD,{101:$Vf1,104:$Vf1}),{77:[1,394]},{34:[1,395],51:$Vb1},o($Vj,[2,98]),{2:$V0,4:396,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{8:81,26:103,37:$Vo,39:$Vp,40:397,44:$Vq,52:$Vr,53:80,54:82,55:83,56:84,57:85,58:86,59:87,60:88,62:98,63:89,64:$Vs,65:$Vt,66:104,67:105,69:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB},o($Vc1,[2,91]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,28:24,29:25,30:26,31:27,34:[1,398],36:32,37:$V1,38:$V2,39:$V3,42:$V4,45:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:36,66:34,67:35,82:$Va,97:$Vb,103:$Vc,105:$Vd,106:$Ve,109:$Vf,111:$Vg,112:$Vh,128:$Vi},{78:[1,399]},o($Vg1,[2,99],{85:400,86:$Vd1}),{27:[1,401]},o($Vg1,[2,100]),o($Vj,[2,89])],
defaultActions: {51:[2,1],301:[2,119],327:[2,121],328:[2,122],349:[2,118],350:[2,120]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
    const {Declaracion} = require('../Instrucciones/Declaracion.ts');
    const {Impresion} = require('../Instrucciones/Imprimir.ts');
    const {Bloque} = require('../Instrucciones/bloque.ts');
    const {Comentario} = require('../Instrucciones/Comentario.ts');
    const {Casteo} = require('../Instrucciones/Casteo.ts');
    const {Asignacion} = require('../Instrucciones/Asignacion.ts');
    const {Incremento} = require('../Instrucciones/Incremento.ts');
    const {Vector_1D_T1} = require('../Instrucciones/Vector_1D_T1.ts');
    const {Vector_1D_T2} = require('../Instrucciones/Vector_1D_T2.ts');
    const {Vector_2D_T1} = require('../Instrucciones/Vector_2D_T1.ts');
    const {Vector_2D_T2} = require('../Instrucciones/Vector_2D_T2.ts');
    const {Acceso_Vector_1D} = require('../Instrucciones/Acceso_Vector_1D.ts');
    const {Acceso_Vector_2D} = require('../Instrucciones/Acceso_Vector_2D.ts');
    const {IF} = require('../Instrucciones/IF.ts');
    const {IF_ELIF} = require('../Instrucciones/IF_ELIF.ts');
    const {IF_ELSE} = require('../Instrucciones/IF_ELSE.ts');
    const {CONDICION} = require('../Instrucciones/CONDICION.ts');
    const {Switch} = require('../Instrucciones/Switch.ts');
    const {Case} = require('../Instrucciones/Case.ts');
    const {Default} = require('../Instrucciones/Default.ts');
    const {While} = require('../Instrucciones/While.ts');
    const {For} = require('../Instrucciones/For.ts');
    const {Do_While} = require('../Instrucciones/Do_While.ts');
    const {Do_Until} = require('../Instrucciones/Do_Until.ts');
    const {Break} = require('../Instrucciones/Break.ts');
    const {Continue} = require('../Instrucciones/Continue.ts');
    const {Return} = require('../Instrucciones/Return.ts');
    const {Funcion} = require('../Instrucciones/Funcion.ts');
    const {Parametro} = require('../Instrucciones/Parametro.ts');
    const {Metodo} = require('../Instrucciones/Metodo.ts');
    const {Llamada} = require('../Instrucciones/Llamada.ts');
    const {ToLower} = require('../Instrucciones/ToLower.ts');
    const {ToUpper} = require('../Instrucciones/ToUpper.ts');
    const {Length} = require('../Instrucciones/Length.ts');
    const {TypeOf} = require('../Instrucciones/TypeOf.ts');
    const {ToString} = require('../Instrucciones/ToString.ts');
    const {ToCharArray} = require('../Instrucciones/ToCharArray.ts');
    const {Round} = require('../Instrucciones/Round.ts');
    const {Push} = require('../Instrucciones/Push.ts');
    const {Pop} = require('../Instrucciones/Pop.ts');
    const {Run} = require('../Instrucciones/Run.ts');
    const {Ternario} = require('../Instrucciones/Ternario.ts');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 65
break;
case 4:return 64 
break;
case 5:return 44 
break;
case 6:return 52
break;
case 7:return 47
break;
case 8:return 45
break;
case 9:return 46
break;
case 10:return 49
break;
case 11:return 48
break;
case 12:return 38
break;
case 13:return 42
break;
case 14:return 79
break;
case 15:return 82
break;
case 16:return 84
break;
case 17:return 86
break;
case 18:return 101
break;
case 19:return 103
break;
case 20:return 104
break;
case 21:return 97
break;
case 22:return 103
break;
case 23:return 105
break;
case 24:return 106
break;
case 25:return 109
break;
case 26:return 110
break;
case 27:return 111
break;
case 28:return 112
break;
case 29:return 117
break;
case 30:return 119
break;
case 31:return 120
break;
case 32:return 122
break;
case 33:return 123
break;
case 34:return 121
break;
case 35:return 124
break;
case 36:return 129
break;
case 37:return 126
break;
case 38:return 127
break;
case 39:return 128
break;
case 40:return 27
break;
case 41:return 102
break;
case 42:return 41
break;
case 43:return 39
break;
case 44:return 34
break;
case 45:return 33
break;
case 46:return 51
break;
case 47:return 74
break;
case 48:return 75
break;
case 49:return 68
break;
case 50:return 92
break;
case 51:return 91
break;
case 52:return 76
break;
case 53:return 69
break;
case 54:return 94
break;
case 55:return 93
break;
case 56:return 89
break;
case 57:return 90
break;
case 58:return 95
break;
case 59:return 96
break;
case 60:return '!'
break;
case 61:return 77
break;
case 62:return 78
break;
case 63:return 70
break;
case 64:return 71
break;
case 65:return 72
break;
case 66:return 73
break;
case 67:return 125
break;
case 68:return 130
break;
case 69:return 37;
break;
case 70:return 5
break;
case 71: 
        console.log("error lexico")
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+.[0-9]+))/i,/^(?:([0-9]+))/i,/^(?:([\"][^\"]*[\"]|[\'][^\']*[\']))/i,/^(?:(true|false\b))/i,/^(?:String\b)/i,/^(?:Int\b)/i,/^(?:Char\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:Case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:ToLower\b)/i,/^(?:ToUpper\b)/i,/^(?:Length\b)/i,/^(?:TypeOf\b)/i,/^(?:ToString\b)/i,/^(?:ToCharArray\b)/i,/^(?:Round\b)/i,/^(?:Push\b)/i,/^(?:Pop\b)/i,/^(?:Run\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\})/i,/^(?:\{)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:-)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}