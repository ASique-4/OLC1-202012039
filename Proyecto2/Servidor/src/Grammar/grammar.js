/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,27],$V2=[1,23],$V3=[1,25],$V4=[1,24],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,43],$Va=[1,31],$Vb=[1,32],$Vc=[1,36],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[1,37],$Vh=[1,38],$Vi=[2,5,27,30,32,33,36,39,40,41,42,43,69,84,90,92,93,96,98,99],$Vj=[1,49],$Vk=[2,35],$Vl=[1,52],$Vm=[1,56],$Vn=[1,60],$Vo=[1,78],$Vp=[1,74],$Vq=[1,79],$Vr=[1,70],$Vs=[1,76],$Vt=[1,77],$Vu=[1,82],$Vv=[26,30,35,64],$Vw=[2,110],$Vx=[27,31,35,45,65,76,77,78,79,80,81,82,83,89],$Vy=[1,112],$Vz=[2,5,27,30,31,32,33,35,36,38,39,40,41,42,43,45,51,52,65,69,76,77,78,79,80,81,82,83,84,89,90,92,93,96,98,99],$VA=[1,114],$VB=[1,115],$VC=[1,116],$VD=[1,117],$VE=[1,118],$VF=[1,119],$VG=[1,120],$VH=[1,121],$VI=[2,5,27,30,31,32,33,35,36,38,39,40,41,42,43,45,51,52,55,56,57,58,59,60,61,62,65,69,76,77,78,79,80,81,82,83,84,89,90,92,93,96,98,99],$VJ=[2,5,27,30,32,33,36,38,39,40,41,42,43,46,51,52,56,69,84,90,92,93,96,98,99],$VK=[35,45],$VL=[1,143],$VM=[1,144],$VN=[2,5,27,30,31,32,33,35,36,38,39,40,41,42,43,45,51,52,55,56,65,69,76,77,78,79,80,81,82,83,84,89,90,92,93,96,98,99],$VO=[2,5,27,30,31,32,33,35,36,39,40,41,42,43,45,65,69,76,77,78,79,80,81,82,83,84,89,90,92,93,96,98,99],$VP=[2,5,27,30,31,32,33,35,36,38,39,40,41,42,43,45,51,52,55,56,57,58,59,60,61,62,63,65,69,76,77,78,79,80,81,82,83,84,89,90,92,93,96,98,99],$VQ=[30,33,38,46,51,52,56],$VR=[2,5,27,30,31,32,33,35,36,38,39,40,41,42,43,45,51,52,55,56,57,58,65,69,76,77,78,79,80,81,82,83,84,89,90,92,93,96,98,99],$VS=[2,5,27,30,31,32,33,35,36,38,39,40,41,42,43,45,51,52,55,56,57,58,59,60,65,69,76,77,78,79,80,81,82,83,84,89,90,92,93,96,98,99],$VT=[1,190],$VU=[88,91],$VV=[1,220],$VW=[27,45],$VX=[1,227],$VY=[2,30,32,33,36,39,40,41,42,43,69,84,90,92,93,96,98,99],$VZ=[2,99],$V_=[2,5,27,30,32,33,36,39,40,41,42,43,69,71,84,90,92,93,96,98,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LISTAINSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRESION":7,"CASTEO":8,"ASIGNACION":9,"INCREMENTO":10,"VECTOR_1D_T1":11,"VECTOR_1D_T2":12,"VECTOR_2D_T1":13,"VECTOR_2D_T2":14,"IF":15,"SWITCH":16,"WHILE":17,"FOR":18,"DO_WHILE":19,"DO_UNTIL":20,"BREAK":21,"FUNCION":22,"CONTINUE":23,"RETURN":24,"BLOQUE":25,"{":26,"}":27,"DECLARACION":28,"TIPOS":29,"expreID":30,";":31,"pr_print":32,"(":33,"VALORES":34,")":35,"pr_println":36,"E":37,"expreCADENA":38,"pr_int":39,"pr_char":40,"pr_string":41,"pr_bool":42,"pr_double":43,"LISTA_EXPREID":44,",":45,"expreBOOL":46,"EXPRESION":47,"VALORES2":48,"OPERACION":49,"OPERACIONES":50,"expreNUMBER":51,"expreDECIMAL":52,"ACCESO_VECTOR_1D":53,"ACCESO_VECTOR_2D":54,"+":55,"-":56,"*":57,"/":58,"%":59,"^":60,"++":61,"--":62,"=":63,"[":64,"]":65,"pr_new":66,"LISTA_VALORES_VECTORES":67,"LISTA_VALORES_VECTORES_2D":68,"pr_if":69,"CONDICION":70,"pr_else":71,"ELIF":72,"pr_elif":73,"CONDICIONAL":74,"CONDICIONAL2":75,"==":76,"!=":77,">":78,"<":79,">=":80,"<=":81,"&&":82,"||":83,"pr_switch":84,"LISTA_CASES":85,"DEFAULT":86,"CASE":87,"pr_case":88,":":89,"pr_break":90,"pr_default":91,"pr_while":92,"pr_for":93,"ASIGNACION_FOR":94,"INCREMENTO_FOR":95,"pr_do":96,"pr_until":97,"pr_continue":98,"pr_return":99,"LISTA_PARAMETROS":100,"PARAMETRO":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",26:"{",27:"}",30:"expreID",31:";",32:"pr_print",33:"(",35:")",36:"pr_println",38:"expreCADENA",39:"pr_int",40:"pr_char",41:"pr_string",42:"pr_bool",43:"pr_double",45:",",46:"expreBOOL",51:"expreNUMBER",52:"expreDECIMAL",55:"+",56:"-",57:"*",58:"/",59:"%",60:"^",61:"++",62:"--",63:"=",64:"[",65:"]",66:"pr_new",69:"pr_if",71:"pr_else",73:"pr_elif",76:"==",77:"!=",78:">",79:"<",80:">=",81:"<=",82:"&&",83:"||",84:"pr_switch",88:"pr_case",89:":",90:"pr_break",91:"pr_default",92:"pr_while",93:"pr_for",96:"pr_do",97:"pr_until",98:"pr_continue",99:"pr_return"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[25,3],[28,3],[7,5],[7,5],[37,1],[37,3],[29,1],[29,1],[29,1],[29,1],[29,1],[44,3],[44,1],[34,1],[34,1],[34,1],[48,1],[48,1],[47,2],[47,1],[50,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,2],[49,2],[49,2],[10,3],[10,3],[8,4],[9,5],[9,4],[9,4],[9,4],[9,3],[9,5],[9,4],[11,11],[12,9],[67,3],[67,1],[13,16],[14,11],[68,5],[68,3],[53,4],[54,7],[15,7],[15,11],[15,8],[15,12],[72,7],[72,8],[70,3],[70,3],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[75,1],[75,1],[16,8],[85,2],[85,1],[87,6],[86,5],[17,7],[18,10],[94,3],[94,1],[94,3],[95,2],[95,2],[19,9],[20,9],[21,2],[23,2],[24,3],[24,2],[22,9],[22,8],[100,3],[100,1],[101,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]);  this.$= $$[$0-1];  
break;
case 3:
this.$=[$$[$0]]
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 27: case 29: case 30: case 31: case 32: case 33: case 36: case 37: case 39: case 40: case 42: case 43: case 44: case 45: case 46: case 47: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95:
this.$=$$[$0];
break;
case 22:
console.log($$[$0]); console.log("error sintactico");
break;
case 23:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 24:

    
    this.$= new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);

break;
case 25:

    this.$= new Impresion("print",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);

break;
case 26:

    this.$= new Impresion("println",$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);

break;
case 28:
this.$=$$[$0-2];
break;
case 34: case 72:
this.$=$$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 35: case 73:
this.$=[$$[$0]];
break;
case 38:
this.$='(' + $$[$0].casteo + ') ' + $$[$0].expresion;
break;
case 41:
 this.$=$$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 48:
this.$=$$[$0].variable + "[" + $$[$0].expresion + "]";
break;
case 49:
this.$=$$[$0].variable + "[" + $$[$0].expresion + "]" + "[" + $$[$0].expresion2 + "]";
break;
case 50:
this.$=$$[$0-2] + '+' + $$[$0];
break;
case 51:
this.$=$$[$0-2] + '-' + $$[$0];
break;
case 52:
this.$=$$[$0-2] + '*' + $$[$0];
break;
case 53:
this.$=$$[$0-2] + '/' + $$[$0];
break;
case 54:
this.$=$$[$0-2] + '%' + $$[$0];
break;
case 55:
this.$=$$[$0-2] + '^' + $$[$0];
break;
case 56:
this.$=$$[$0-1];
break;
case 57:
this.$=$$[$0-1] + '++';
break;
case 58:
this.$=$$[$0-1] + '--';
break;
case 59:
this.$='-' + $$[$0];
break;
case 60:
this.$= new Incremento($$[$0-2],'++',_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 61:
this.$= new Incremento($$[$0-2],'--',_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 62:

    this.$= new Casteo(null,null,$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 63:

    this.$= new Asignacion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 64: case 69:

        this.$= new Asignacion(null,$$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 65:

        this.$= new Asignacion(null,$$[$0-3].variable + "[" + $$[$0-3].expresion + "]",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 66:

        this.$= new Asignacion(null,$$[$0-3].variable + "[" + $$[$0-3].expresion + "]" + "[" + $$[$0-3].expresion2 + "]",$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 67:

        
        this.$= new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 68:

        this.$= new Asignacion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 70:

    this.$= new Vector_1D_T1($$[$0-10],$$[$0-7],$$[$0-4],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);

break;
case 71:

    this.$= new Vector_1D_T2($$[$0-8],$$[$0-5],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);

break;
case 74:


    this.$= new Vector_2D_T1($$[$0-15],$$[$0-10],$$[$0-7],$$[$0-5],$$[$0-2],_$[$0-15].first_line,_$[$0-15].first_column);

break;
case 75:

    this.$= new Vector_2D_T2($$[$0-10],$$[$0-5],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);

break;
case 76:
this.$=$$[$0-4]; $$[$0-4].push('{'+$$[$0-1]+'}');
break;
case 77:
this.$=['{'+$$[$0-1]+'}'];
break;
case 78:
this.$= new Acceso_Vector_1D($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 79:
this.$= new Acceso_Vector_2D($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 80:

    console.log($$[$0-1] );
    this.$= new IF($$[$0-4].valor1 + $$[$0-4].condicion + $$[$0-4].valor2,$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
    
break;
case 81:

        this.$= new IF_ELSE($$[$0-8].valor1 + $$[$0-8].condicion + $$[$0-8].valor2,$$[$0-5],null,$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
    
break;
case 82:

        this.$= new IF($$[$0-5].valor1 + $$[$0-5].condicion + $$[$0-5].valor2,$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 83:

        this.$= new IF_ELSE($$[$0-9].valor1 + $$[$0-9].condicion + $$[$0-9].valor2,$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
    
break;
case 84:

    this.$= new IF_ELIF($$[$0-4].valor1 + $$[$0-4].condicion + $$[$0-4].valor2,$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
    
break;
case 85:

        this.$= new IF_ELIF($$[$0-5].valor1 + $$[$0-5].condicion + $$[$0-5].valor2,$$[$0-2],$$[$02],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 86:

    this.$= new CONDICION($$[$0-2] + " " ,$$[$0-1] + " ",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 87:

        this.$= new CONDICION($$[$0-2].valor1 + $$[$0-2].condicion + $$[$0-2].valor2 + " ",$$[$0-1]," " + $$[$0].valor1 + $$[$0].condicion + $$[$0].valor2,_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 96:

    this.$= new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 97:

    this.$=$$[$0-1];
    $$[$0-1].push($$[$0]);
    
break;
case 98: case 117:

        this.$=[$$[$0]];
    
break;
case 99:

    this.$= new Case($$[$0-4],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 100:

    this.$= new Default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 101:

    this.$= new While($$[$0-4].valor1 + $$[$0-4].condicion + $$[$0-4].valor2,$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
    
break;
case 102:

    this.$= new For($$[$0-7],$$[$0-6].valor1 + $$[$0-6].condicion + $$[$0-6].valor2,$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
    
break;
case 103:

    this.$= new Asignacion(null,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 104:

        this.$=$$[$0];
    
break;
case 105:

        this.$= new Asignacion(null,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
        console.log("------");
        console.log($$[$0]);
        console.log("------");
    
break;
case 106:

    this.$= new Incremento($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 107:

        this.$= new Incremento($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 108:

    this.$= new Do_While($$[$0-6],$$[$0-2].valor1 + $$[$0-2].condicion + $$[$0-2].valor2,_$[$0-8].first_line,_$[$0-8].first_column);
    
break;
case 109:

    this.$= new Do_Until($$[$0-6],$$[$0-2].valor1 + $$[$0-2].condicion + $$[$0-2].valor2,_$[$0-8].first_line,_$[$0-8].first_column);
    
break;
case 110:

    this.$= new Break(_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 111:

    this.$= new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 112:

    this.$= new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 113:

        this.$= new Return(null,_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 114:

    this.$= new Funcion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
    console.log("------");
    console.log(this.$);
    console.log("------");
    
break;
case 115:

        this.$= new Funcion($$[$0-7],null,$$[$0-3],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 116:

    this.$=$$[$0-2];
    $$[$0-2].push($$[$0]);
    
break;
case 118:

    this.$= new Parametro($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{1:[3]},{2:$V0,5:[1,44],6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),{33:[1,46]},{33:[1,47]},{29:48,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9},{30:$Vj,44:50,64:[1,51]},{33:[1,55],45:$Vk,61:[1,53],62:[1,54],63:$Vl,64:$Vm},{63:[1,57]},{63:[1,58]},{45:$Vn,63:[1,59]},{33:[1,61]},{33:[1,62]},{33:[1,63]},{33:[1,64]},{26:[1,65]},{31:[1,66]},{31:[1,67]},{8:72,30:$Vo,31:[1,69],33:$Vp,34:68,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},o($Vv,[2,29]),o($Vv,[2,30]),o($Vv,[2,31]),o($Vv,[2,32]),o($Vv,[2,33]),{1:[2,1]},o($Vi,[2,2]),{8:72,30:$Vo,33:$Vp,34:83,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{8:72,30:$Vo,33:$Vp,34:84,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{35:[1,85]},o([31,45],$Vk,{63:[1,86]}),{31:[1,87],45:$Vn,63:[1,88]},{65:[1,89]},{8:72,30:$Vo,33:$Vp,34:90,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{31:[1,91]},{31:[1,92]},{29:96,35:[1,94],39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,100:93,101:95},{51:[1,97]},{8:72,30:$Vo,33:$Vp,34:98,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{8:72,30:$Vo,33:$Vp,34:99,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{8:72,30:$Vo,33:$Vp,34:100,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{30:[1,101]},{8:72,30:$Vo,33:$Vp,34:103,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,70:102},{30:[1,104]},{8:72,30:$Vo,33:$Vp,34:103,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,70:105},{9:106,29:107,30:[1,108],39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29},{2:$V0,4:109,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},o($Vi,$Vw),o($Vi,[2,111]),{31:[1,110]},o($Vi,[2,113]),o($Vx,[2,36]),o($Vx,[2,37],{53:80,54:81,49:111,30:$Vo,33:$Vy,38:$Vq,51:$Vs,52:$Vt,56:$Vu}),o($Vx,[2,38]),o([2,5,27,30,31,32,33,35,36,38,39,40,41,42,43,45,51,52,56,65,69,76,77,78,79,80,81,82,83,84,89,90,92,93,96,98,99],[2,42]),{29:48,30:$Vo,33:$Vy,38:$Vq,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,49:113,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},o($Vz,[2,43],{55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),o($VI,[2,44]),o($VI,[2,45]),o($VI,[2,46],{64:$Vm}),o($VI,[2,47]),o($VI,[2,48]),o($VI,[2,49]),{30:$Vo,33:$Vy,38:$Vq,49:122,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{35:[1,123]},{35:[1,124]},{30:$Vo,33:$Vy,38:$Vq,46:[1,126],47:127,48:125,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{8:72,30:$Vo,33:$Vp,34:128,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},o($VJ,[2,67]),{8:72,30:$Vo,33:$Vp,34:129,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{30:[1,130],64:[1,131]},{31:[1,132]},o($Vi,[2,60]),o($Vi,[2,61]),{35:[1,133],45:[1,134]},{89:[1,135]},o($VK,[2,117]),{30:[1,136]},{65:[1,137]},{31:[1,138]},{31:[1,139]},{31:[1,140]},o([31,45,63],[2,34]),{35:[1,141],75:142,82:$VL,83:$VM},{74:145,76:[1,146],77:[1,147],78:[1,148],79:[1,149],80:[1,150],81:[1,151]},{35:[1,152]},{35:[1,153],75:142,82:$VL,83:$VM},{8:72,30:$Vo,33:$Vp,34:103,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,70:154},{30:$Vj,44:50},{45:$Vk,63:$Vl,64:$Vm},{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,155],29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},o($Vi,[2,112]),o($Vz,[2,41],{55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),{30:$Vo,33:$Vy,38:$Vq,49:113,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{35:[1,156],55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH},{30:$Vo,33:$Vy,38:$Vq,49:157,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{30:$Vo,33:$Vy,38:$Vq,49:158,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{30:$Vo,33:$Vy,38:$Vq,49:159,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{30:$Vo,33:$Vy,38:$Vq,49:160,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{30:$Vo,33:$Vy,38:$Vq,49:161,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{30:$Vo,33:$Vy,38:$Vq,49:162,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},o($VI,[2,57]),o($VI,[2,58]),o($VN,[2,59],{57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),{31:[1,163]},{31:[1,164]},o($VO,[2,62]),o($VO,[2,39]),o([2,5,27,31,32,35,36,39,40,41,42,43,45,65,69,76,77,78,79,80,81,82,83,84,89,90,92,93,96,98,99],[2,40],{53:80,54:81,49:111,30:$Vo,33:$Vy,38:$Vq,51:$Vs,52:$Vt,56:$Vu}),{31:[1,165]},{31:[1,166]},{63:[1,167]},{65:[1,168]},o($VJ,[2,64]),{89:[1,169]},{29:96,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,101:170},{29:171,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9},o($VK,[2,118]),o($VP,[2,78],{64:[1,172]}),o($VJ,[2,65]),o($VJ,[2,66]),o($VJ,[2,69]),{26:[1,173]},{8:72,30:$Vo,33:$Vp,34:103,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,70:174},o($VQ,[2,94]),o($VQ,[2,95]),{8:72,30:$Vo,33:$Vp,34:175,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90]),o($VQ,[2,91]),o($VQ,[2,92]),o($VQ,[2,93]),{26:[1,176]},{26:[1,177]},{31:[1,178],75:142,82:$VL,83:$VM},{92:[1,179],97:[1,180]},o($VI,[2,56]),o($VN,[2,50],{57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),o($VN,[2,51],{57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),o($VR,[2,52],{59:$VE,60:$VF,61:$VG,62:$VH}),o($VR,[2,53],{59:$VE,60:$VF,61:$VG,62:$VH}),o($VS,[2,54],{61:$VG,62:$VH}),o($VS,[2,55],{61:$VG,62:$VH}),o($Vi,[2,25]),o($Vi,[2,26]),o($VJ,[2,63]),o($VJ,[2,68]),{26:[1,182],66:[1,181]},{30:[1,183]},{29:184,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9},o($VK,[2,116]),{26:[1,185]},{51:[1,186]},{2:$V0,4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},o([31,35],[2,87],{75:142,82:$VL,83:$VM}),o([31,35,82,83],[2,86]),{85:188,87:189,88:$VT},{2:$V0,4:191,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{30:[1,193],44:195,94:192,95:194},{33:[1,196]},{33:[1,197]},{29:198,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9},{8:72,30:$Vo,33:$Vp,34:200,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,67:199},{63:[1,201]},{26:[1,202]},{2:$V0,4:203,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{65:[1,204]},{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,205],29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{86:206,87:207,88:$VT,91:[1,208]},o($VU,[2,98]),{8:72,30:$Vo,33:$Vp,34:209,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,210],29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{35:[1,211]},{45:$Vk,61:[1,213],62:[1,214],63:[1,212]},{35:[2,104]},{45:$Vn,63:[1,215]},{8:72,30:$Vo,33:$Vp,34:103,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,70:216},{8:72,30:$Vo,33:$Vp,34:103,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,70:217},{64:[1,218]},{27:[1,219],45:$VV},o($VW,[2,73]),{26:[1,222],66:[1,221]},{2:$V0,4:223,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,224],29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},o($VP,[2,79]),o($Vi,[2,80],{72:226,71:[1,225],73:$VX}),{27:[1,228]},o($VU,[2,97]),{89:[1,229]},{89:[1,230]},o($Vi,[2,101]),{26:[1,231]},{8:72,30:$Vo,33:$Vp,34:232,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{35:[2,106]},{35:[2,107]},{8:72,30:$Vo,33:$Vp,34:233,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{35:[1,234],75:142,82:$VL,83:$VM},{35:[1,235],75:142,82:$VL,83:$VM},{8:72,30:$Vo,33:$Vp,34:236,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{31:[1,237]},{8:72,30:$Vo,33:$Vp,34:238,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{29:239,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9},{26:[1,241],68:240},{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,242],29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},o($Vi,[2,115]),{26:[1,243]},o($Vi,[2,82],{71:[1,244]}),{33:[1,245]},o($Vi,[2,96]),{2:$V0,4:246,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{2:$V0,4:247,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{2:$V0,4:248,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{35:[2,103]},{35:[2,105]},{31:[1,249]},{31:[1,250]},{65:[1,251]},o($Vi,[2,71]),o($VW,[2,72]),{64:[1,252]},{27:[1,253],45:[1,254]},{8:72,30:$Vo,33:$Vp,34:200,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,67:255},o($Vi,[2,114]),{2:$V0,4:256,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{26:[1,257]},{8:72,30:$Vo,33:$Vp,34:103,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,70:258},{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:[1,259],92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:[1,260],92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,261],29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},o($Vi,[2,108]),o($Vi,[2,109]),{31:[1,262]},{8:72,30:$Vo,33:$Vp,34:263,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},{31:[1,264]},{26:[1,265]},{27:[1,266],45:$VV},{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,267],29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{2:$V0,4:268,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{35:[1,269],75:142,82:$VL,83:$VM},{31:[1,270]},{31:[1,271]},o($Vi,[2,102]),o($Vi,[2,70]),{65:[1,272]},o($Vi,[2,75]),{8:72,30:$Vo,33:$Vp,34:200,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu,67:273},o($VW,[2,77]),o($Vi,[2,81]),{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,274],29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{26:[1,275]},o($VY,$Vw,{27:[2,100]}),o($VY,$Vw,{88:$VZ,91:$VZ}),{64:[1,276]},{27:[1,277],45:$VV},o($Vi,[2,83]),{2:$V0,4:278,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{8:72,30:$Vo,33:$Vp,34:279,38:$Vq,46:$Vr,47:71,49:75,50:73,51:$Vs,52:$Vt,53:80,54:81,56:$Vu},o($VW,[2,76]),{2:$V0,6:45,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,280],29:26,30:$V1,32:$V2,33:$V3,36:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:30,53:28,54:29,69:$Va,84:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,98:$Vg,99:$Vh},{65:[1,281]},o($V_,[2,84],{72:282,73:$VX}),{31:[1,283]},o($V_,[2,85]),o($Vi,[2,74])],
defaultActions: {44:[2,1],194:[2,104],213:[2,106],214:[2,107],232:[2,103],233:[2,105]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
    const {Declaracion} = require('../Instrucciones/Declaracion.ts');
    const {Impresion} = require('../Instrucciones/Imprimir.ts');
    const {Bloque} = require('../Instrucciones/bloque.ts');
    const {Comentario} = require('../Instrucciones/Comentario.ts');
    const {Casteo} = require('../Instrucciones/Casteo.ts');
    const {Asignacion} = require('../Instrucciones/Asignacion.ts');
    const {Incremento} = require('../Instrucciones/Incremento.ts');
    const {Vector_1D_T1} = require('../Instrucciones/Vector_1D_T1.ts');
    const {Vector_1D_T2} = require('../Instrucciones/Vector_1D_T2.ts');
    const {Vector_2D_T1} = require('../Instrucciones/Vector_2D_T1.ts');
    const {Vector_2D_T2} = require('../Instrucciones/Vector_2D_T2.ts');
    const {Acceso_Vector_1D} = require('../Instrucciones/Acceso_Vector_1D.ts');
    const {Acceso_Vector_2D} = require('../Instrucciones/Acceso_Vector_2D.ts');
    const {IF} = require('../Instrucciones/IF.ts');
    const {IF_ELIF} = require('../Instrucciones/IF_ELIF.ts');
    const {IF_ELSE} = require('../Instrucciones/IF_ELSE.ts');
    const {CONDICION} = require('../Instrucciones/CONDICION.ts');
    const {Switch} = require('../Instrucciones/Switch.ts');
    const {Case} = require('../Instrucciones/Case.ts');
    const {Default} = require('../Instrucciones/Default.ts');
    const {While} = require('../Instrucciones/While.ts');
    const {For} = require('../Instrucciones/For.ts');
    const {Do_While} = require('../Instrucciones/Do_While.ts');
    const {Do_Until} = require('../Instrucciones/Do_Until.ts');
    const {Break} = require('../Instrucciones/Break.ts');
    const {Continue} = require('../Instrucciones/Continue.ts');
    const {Return} = require('../Instrucciones/Return.ts');
    const {Funcion} = require('../Instrucciones/Funcion.ts');
    const {Parametro} = require('../Instrucciones/Parametro.ts');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 52
break;
case 4:return 51 
break;
case 5:return 38 
break;
case 6:return 46
break;
case 7:return 41
break;
case 8:return 39
break;
case 9:return 40
break;
case 10:return 43
break;
case 11:return 42
break;
case 12:return 32
break;
case 13:return 36
break;
case 14:return 66
break;
case 15:return 69
break;
case 16:return 71
break;
case 17:return 73
break;
case 18:return 88
break;
case 19:return 90
break;
case 20:return 91
break;
case 21:return 84
break;
case 22:return 90
break;
case 23:return 92
break;
case 24:return 93
break;
case 25:return 96
break;
case 26:return 97
break;
case 27:return 98
break;
case 28:return 99
break;
case 29:return 31
break;
case 30:return 89
break;
case 31:return 35
break;
case 32:return 33
break;
case 33:return 27
break;
case 34:return 26
break;
case 35:return 45
break;
case 36:return 61
break;
case 37:return 62
break;
case 38:return 55
break;
case 39:return 56
break;
case 40:return 81
break;
case 41:return 80
break;
case 42:return 79
break;
case 43:return 78
break;
case 44:return 76
break;
case 45:return 77
break;
case 46:return 82
break;
case 47:return 83
break;
case 48:return 63
break;
case 49:return '!'
break;
case 50:return 64
break;
case 51:return 65
break;
case 52:return 57
break;
case 53:return 58
break;
case 54:return 59
break;
case 55:return 60
break;
case 56:return 30;
break;
case 57:return 5
break;
case 58: 
        console.log("error lexico")
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+.[0-9]+))/i,/^(?:([0-9]+))/i,/^(?:([\"][^\"]*[\"]|[\'][^\']*[\']))/i,/^(?:(true|false\b))/i,/^(?:String\b)/i,/^(?:Int\b)/i,/^(?:Char\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:Case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\})/i,/^(?:\{)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}