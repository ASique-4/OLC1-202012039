/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,16],$V2=[1,13],$V3=[1,14],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[2,5,20,22,23,27,28,29,30,31],$Va=[20,25,53],$Vb=[1,53],$Vc=[1,49],$Vd=[1,42],$Ve=[1,43],$Vf=[1,46],$Vg=[1,47],$Vh=[1,51],$Vi=[1,52],$Vj=[1,62],$Vk=[17,21,33,54],$Vl=[2,5,17,20,21,22,23,27,28,29,30,31,33,42,43,54],$Vm=[1,71],$Vn=[1,72],$Vo=[1,73],$Vp=[1,74],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,78],$Vu=[2,5,17,20,21,22,23,25,27,28,29,30,31,33,42,43,44,45,46,47,48,49,50,51,54],$Vv=[2,5,17,20,21,22,23,27,28,29,30,31,33,54],$Vw=[2,5,17,20,21,22,23,25,27,28,29,30,31,33,42,43,44,45,54],$Vx=[2,5,17,20,21,22,23,25,27,28,29,30,31,33,42,43,44,45,46,47,54],$Vy=[2,5,17,20,21,22,23,25,27,28,29,30,31,33,42,43,44,45,46,47,48,49,54],$Vz=[1,101],$VA=[17,33];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LISTAINSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRESION":7,"CASTEO":8,"ASIGNACION":9,"INCREMENTO":10,"VECTOR_1D_T1":11,"VECTOR_1D_T2":12,"VECTOR_2D_T1":13,"VECTOR_2D_T2":14,"BLOQUE":15,"{":16,"}":17,"DECLARACION":18,"TIPOS":19,"expreID":20,";":21,"Systemoutprintln":22,"(":23,"E":24,")":25,"expreCADENA":26,"pr_int":27,"pr_char":28,"pr_string":29,"pr_bool":30,"pr_double":31,"LISTA_EXPREID":32,",":33,"VALORES":34,"expreBOOL":35,"EXPRESION":36,"Acceso_Vector_1D":37,"Acceso_Vector_2D":38,"VALORES2":39,"OPERACION":40,"OPERACIONES":41,"expreNUMBER":42,"expreDECIMAL":43,"+":44,"-":45,"*":46,"/":47,"%":48,"^":49,"++":50,"--":51,"=":52,"[":53,"]":54,"pr_new":55,"LISTA_VALORES_VECTORES":56,"LISTA_VALORES_VECTORES_2D":57,"ACCESO_VECTOR_1D":58,"ACCESO_VECTOR_2D":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"{",17:"}",20:"expreID",21:";",22:"Systemoutprintln",23:"(",25:")",26:"expreCADENA",27:"pr_int",28:"pr_char",29:"pr_string",30:"pr_bool",31:"pr_double",33:",",35:"expreBOOL",37:"Acceso_Vector_1D",38:"Acceso_Vector_2D",42:"expreNUMBER",43:"expreDECIMAL",44:"+",45:"-",46:"*",47:"/",48:"%",49:"^",50:"++",51:"--",52:"=",53:"[",54:"]",55:"pr_new"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,3],[18,3],[7,5],[24,1],[24,3],[19,1],[19,1],[19,1],[19,1],[19,1],[32,3],[32,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[39,1],[39,1],[39,1],[36,2],[36,1],[41,1],[40,1],[40,1],[40,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,2],[10,3],[10,3],[8,4],[9,5],[9,4],[9,3],[9,5],[11,11],[12,9],[56,3],[56,1],[13,16],[14,11],[57,5],[57,3],[58,4],[59,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]);  this.$= $$[$0-1];  
break;
case 3:
this.$=[$$[$0]]
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 16: case 18: case 19: case 20: case 21: case 22: case 25: case 26: case 27: case 31: case 32: case 33: case 35: case 36: case 37: case 38: case 39:
this.$=$$[$0];
break;
case 12:
console.log("error sintactico")
break;
case 13:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 14:

    
    this.$= new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);

break;
case 15:
 this.$= new Impresion($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 17:
this.$=$$[$0-2];
break;
case 23: case 58:
this.$=$$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 24: case 59:
this.$=[$$[$0]];
break;
case 28:
this.$='(' + $$[$0].casteo + ') ' + $$[$0].expresion;
break;
case 29: case 30:
this.$=$$[$0].variable + $$[$0].expresion;
break;
case 34:
 this.$=$$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 40:
this.$=$$[$0-2] + '+' + $$[$0];
break;
case 41:
this.$=$$[$0-2] - $$[$0];
break;
case 42:
this.$=$$[$0-2] * $$[$0];
break;
case 43:
this.$=$$[$0-2] / $$[$0];
break;
case 44:
this.$=$$[$0-2] % $$[$0];
break;
case 45:
this.$=$$[$0-2] ^ $$[$0];
break;
case 46:
this.$=$$[$0-1];
break;
case 47:
this.$=$$[$0-1] + '++';
break;
case 48:
this.$=$$[$0-1] + '--';
break;
case 49:
this.$= new Incremento($$[$0-2],'++',_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 50:
this.$= new Incremento($$[$0-2],'--',_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 51:

    this.$= new Casteo(null,null,$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
    console.log(this.$);
    
break;
case 52:

    this.$= new Asignacion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 53:

        this.$= new Asignacion(null,$$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 54:

        
        this.$= new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 55:

        
        this.$= new Asignacion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);

    
break;
case 56:

    this.$= new Vector_1D_T1($$[$0-10],$$[$0-7],$$[$0-4],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);

break;
case 57:

    this.$= new Vector_1D_T2($$[$0-8],$$[$0-5],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);

break;
case 60:


    this.$= new Vector_2D_T1($$[$0-15],$$[$0-10],$$[$0-7],$$[$0-5],$$[$0-2],_$[$0-15].first_line,_$[$0-15].first_column);

break;
case 61:

    this.$= new Vector_2D_T2($$[$0-10],$$[$0-5],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);

break;
case 62:
this.$=$$[$0-4]; $$[$0-4].push('{'+$$[$0-1]+'}');
break;
case 63:
this.$=['{'+$$[$0-1]+'}'];
break;
case 64:
this.$= new Acceso_Vector_1D($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 65:
this.$= new Acceso_Vector_2D($$[$0-6],$$[$0-4],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,19:15,20:$V1,22:$V2,23:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8},{1:[3]},{2:$V0,5:[1,22],6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,19:15,20:$V1,22:$V2,23:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),o($V9,[2,12]),{23:[1,24]},{19:25,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8},{20:[1,26],32:27,53:[1,28]},{50:[1,30],51:[1,31],52:[1,29]},o($Va,[2,18]),o($Va,[2,19]),o($Va,[2,20]),o($Va,[2,21]),o($Va,[2,22]),{1:[2,1]},o($V9,[2,2]),{20:[1,34],24:32,26:[1,33]},{25:[1,35]},o([21,33],[2,24],{52:[1,36]}),{21:[1,37],33:[1,39],52:[1,38]},{54:[1,40]},{8:45,20:$Vb,23:$Vc,26:$Vd,34:41,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi},{21:[1,54]},{21:[1,55]},{25:[1,56]},{25:[2,16]},{23:[1,57]},{20:$Vb,23:$Vj,26:[1,59],35:[1,60],36:61,39:58,40:50,41:48,42:$Vh,43:$Vi},{8:45,20:$Vb,23:$Vc,26:$Vd,34:63,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi},o($V9,[2,54]),{8:45,20:$Vb,23:$Vc,26:$Vd,34:64,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi},{20:[1,65]},{20:[1,66],53:[1,67]},{21:[1,68]},o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27],{40:69,20:$Vb,23:$Vj,42:$Vh,43:$Vi}),o($Vk,[2,28]),o($Vk,[2,29]),o($Vk,[2,30]),o($Vl,[2,35]),{19:25,20:$Vb,23:$Vj,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,40:70,42:$Vh,43:$Vi},o($Vl,[2,36],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt}),o($Vu,[2,37]),o($Vu,[2,38]),o($Vu,[2,39]),o($V9,[2,49]),o($V9,[2,50]),{21:[1,79]},{25:[1,80]},o($Vv,[2,51]),o($Vv,[2,31]),o($Vv,[2,32]),o([2,5,17,21,22,27,28,29,30,31,33,54],[2,33],{40:69,20:$Vb,23:$Vj,42:$Vh,43:$Vi}),{20:$Vb,23:$Vj,40:70,42:$Vh,43:$Vi},{21:[1,81]},{21:[1,82]},o([21,33,52],[2,23]),{52:[1,83]},{54:[1,84]},o($V9,[2,53]),o($Vl,[2,34],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt}),{25:[1,85],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{20:$Vb,23:$Vj,40:86,42:$Vh,43:$Vi},{20:$Vb,23:$Vj,40:87,42:$Vh,43:$Vi},{20:$Vb,23:$Vj,40:88,42:$Vh,43:$Vi},{20:$Vb,23:$Vj,40:89,42:$Vh,43:$Vi},{20:$Vb,23:$Vj,40:90,42:$Vh,43:$Vi},{20:$Vb,23:$Vj,40:91,42:$Vh,43:$Vi},o($Vu,[2,47]),o($Vu,[2,48]),o($V9,[2,15]),{25:[2,17]},o($V9,[2,52]),o($V9,[2,55]),{16:[1,93],55:[1,92]},{20:[1,94]},o($Vu,[2,46]),o($Vw,[2,40],{46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt}),o($Vw,[2,41],{46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt}),o($Vx,[2,42],{48:$Vq,49:$Vr,50:$Vs,51:$Vt}),o($Vx,[2,43],{48:$Vq,49:$Vr,50:$Vs,51:$Vt}),o($Vy,[2,44],{50:$Vs,51:$Vt}),o($Vy,[2,45],{50:$Vs,51:$Vt}),{19:95,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8},{8:45,20:$Vb,23:$Vc,26:$Vd,34:97,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi,56:96},{52:[1,98]},{53:[1,99]},{17:[1,100],33:$Vz},o($VA,[2,59]),{16:[1,103],55:[1,102]},{8:45,20:$Vb,23:$Vc,26:$Vd,34:104,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi},{21:[1,105]},{8:45,20:$Vb,23:$Vc,26:$Vd,34:106,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi},{19:107,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8},{16:[1,109],57:108},{54:[1,110]},o($V9,[2,57]),o($VA,[2,58]),{53:[1,111]},{17:[1,112],33:[1,113]},{8:45,20:$Vb,23:$Vc,26:$Vd,34:97,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi,56:114},{21:[1,115]},{8:45,20:$Vb,23:$Vc,26:$Vd,34:116,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi},{21:[1,117]},{16:[1,118]},{17:[1,119],33:$Vz},o($V9,[2,56]),{54:[1,120]},o($V9,[2,61]),{8:45,20:$Vb,23:$Vc,26:$Vd,34:97,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi,56:121},o($VA,[2,63]),{53:[1,122]},{17:[1,123],33:$Vz},{8:45,20:$Vb,23:$Vc,26:$Vd,34:124,35:$Ve,36:44,37:$Vf,38:$Vg,40:50,41:48,42:$Vh,43:$Vi},o($VA,[2,62]),{54:[1,125]},{21:[1,126]},o($V9,[2,60])],
defaultActions: {22:[2,1],33:[2,16],80:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
    const {Declaracion} = require('../Instrucciones/Declaracion.ts');
    const {Impresion} = require('../Instrucciones/Imprimir.ts');
    const {Bloque} = require('../Instrucciones/bloque.ts');
    const {Comentario} = require('../Instrucciones/Comentario.ts');
    const {Casteo} = require('../Instrucciones/Casteo.ts');
    const {Asignacion} = require('../Instrucciones/Asignacion.ts');
    const {Incremento} = require('../Instrucciones/Incremento.ts');
    const {Vector_1D_T1} = require('../Instrucciones/Vector_1D_T1.ts');
    const {Vector_1D_T2} = require('../Instrucciones/Vector_1D_T2.ts');
    const {Vector_2D_T1} = require('../Instrucciones/Vector_2D_T1.ts');
    const {Vector_2D_T2} = require('../Instrucciones/Vector_2D_T2.ts');
    const {Acceso_Vector_1D} = require('../Instrucciones/Acceso_Vector_1D.ts');
    const {Acceso_Vector_2D} = require('../Instrucciones/Acceso_Vector_2D.ts');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 43
break;
case 4:return 42 
break;
case 5:return 26 
break;
case 6:return 35
break;
case 7:return 29
break;
case 8:return 27
break;
case 9:return 28
break;
case 10:return 31
break;
case 11:return 30
break;
case 12:return 22
break;
case 13:return 55
break;
case 14:return 21
break;
case 15:return 25
break;
case 16:return 23
break;
case 17:return 17
break;
case 18:return 16
break;
case 19:return 52
break;
case 20:return 33
break;
case 21:return 50
break;
case 22:return 51
break;
case 23:return 44
break;
case 24:return 45
break;
case 25:return '<'
break;
case 26:return '>'
break;
case 27:return '=='
break;
case 28:return '!='
break;
case 29:return '&&'
break;
case 30:return '||'
break;
case 31:return '!'
break;
case 32:return 53
break;
case 33:return 54
break;
case 34:return 46
break;
case 35:return 47
break;
case 36:return 48
break;
case 37:return 49
break;
case 38:return 20;
break;
case 39:return 5
break;
case 40: 
        console.log("error lexico")
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+.[0-9]+))/i,/^(?:([0-9]+))/i,/^(?:([\"][^\"]*[\"]|[\'][^\']*[\']))/i,/^(?:(true|false\b))/i,/^(?:String\b)/i,/^(?:Int\b)/i,/^(?:Char\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:print\b)/i,/^(?:new\b)/i,/^(?:;)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\})/i,/^(?:\{)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}