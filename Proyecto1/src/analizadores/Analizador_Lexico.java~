/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 39, 39, 40, 39, 39,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    39,  0,  0,  0,  0,  0,  0,  0, 24, 25,  6, 12, 11,  7,  0,  5, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 26,  0, 27, 10,  9, 
     0, 21,  4, 18, 23, 16, 28, 29, 36, 20, 38,  4, 34, 22, 17, 14, 
    13, 37, 30, 32, 15, 35, 33,  4,  4,  4,  4,  0,  0,  0,  0,  3, 
     0, 21,  4, 18, 23, 16, 28, 29, 36, 20, 38,  4, 34, 22, 17, 14, 
    13, 37, 30, 32, 15, 35, 33,  4,  4,  4,  4,  0,  2,  0,  0,  0, 
     0,  0,  0,  0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\4\3\1\1\3\3"+
    "\1\14\1\15\1\16\1\17\2\3\1\1\2\3\1\20"+
    "\1\0\1\21\1\22\3\0\2\3\1\21\3\3\2\0"+
    "\4\3\1\0\2\3\1\0\3\3\2\0\1\23\2\3"+
    "\1\23\1\3\1\24\2\3\2\0\2\3\1\25\1\3"+
    "\1\26\4\0\1\26\4\3\1\27\1\3\1\0\1\3"+
    "\1\21\2\30\3\3\2\0\3\3\1\0\2\3\1\31"+
    "\2\32\2\3\1\21\1\33\4\0\5\3\1\0\1\3"+
    "\2\0\1\21\3\3\2\0\3\3\1\0\4\3\6\0"+
    "\5\3\1\0\1\3\12\0\3\3\1\0\1\34\1\3"+
    "\1\34\1\35\2\36\3\3\3\0\1\37\2\0\1\3"+
    "\1\37\2\3\1\40\1\0\1\3\1\21\4\0\1\41"+
    "\4\0\1\41\1\0\1\3\1\0\2\3\2\42\1\0"+
    "\1\21\1\0\3\3\5\0\3\3\1\0\1\3\11\0"+
    "\2\43\2\44\1\3\2\0\2\45\2\46\1\47\3\0"+
    "\1\50\1\51\1\3\1\50\1\51\2\52\1\0\1\53"+
    "\3\0\1\53\3\0\1\54\3\0\1\55\2\0\1\3"+
    "\1\21\7\0\2\56\3\0\1\3\2\0\1\57\2\0"+
    "\1\57\3\0\1\60\1\61\1\60\1\61\2\0\1\62"+
    "\1\0\1\62\2\0\2\63\2\0\2\64\2\0\2\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\51"+
    "\0\51\0\51\0\51\0\51\0\51\0\u011f\0\u0148\0\u0171"+
    "\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\51\0\51\0\51"+
    "\0\51\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\51\0\173"+
    "\0\173\0\u0334\0\315\0\366\0\u035d\0\u0386\0\u03af\0\u03d8"+
    "\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520"+
    "\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668"+
    "\0\u0691\0\u06ba\0\51\0\u06e3\0\u070c\0\244\0\u0735\0\51"+
    "\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d"+
    "\0\51\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\244\0\u094a\0\u0973"+
    "\0\u099c\0\u09c5\0\244\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\244\0\51\0\173\0\u0ca7"+
    "\0\u0cd0\0\u0cf9\0\244\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6"+
    "\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e"+
    "\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056"+
    "\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e"+
    "\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6"+
    "\0\u130f\0\u1338\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e"+
    "\0\u1457\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576"+
    "\0\u159f\0\51\0\u15c8\0\244\0\244\0\u15f1\0\u161a\0\u1643"+
    "\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\51\0\u1739\0\u1762"+
    "\0\u178b\0\244\0\u17b4\0\u17dd\0\244\0\u1806\0\u182f\0\u1858"+
    "\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\51\0\u1925\0\u194e\0\u1977"+
    "\0\u19a0\0\173\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\51"+
    "\0\244\0\u1a96\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c"+
    "\0\u1bb5\0\u1bde\0\u1c07\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4"+
    "\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c"+
    "\0\u1e45\0\u1e6e\0\51\0\244\0\51\0\244\0\u1e97\0\u1ec0"+
    "\0\u1ee9\0\51\0\244\0\51\0\244\0\244\0\u1f12\0\u1f3b"+
    "\0\u1f64\0\51\0\u1f8d\0\u1fb6\0\244\0\u1fdf\0\51\0\244"+
    "\0\u2008\0\51\0\u2031\0\u205a\0\u2083\0\173\0\u20ac\0\u20d5"+
    "\0\u20fe\0\244\0\u2127\0\u2150\0\u2179\0\173\0\u21a2\0\u21cb"+
    "\0\u21f4\0\u221d\0\u2246\0\u226f\0\u2298\0\u22c1\0\u22ea\0\u2313"+
    "\0\u233c\0\51\0\173\0\u2365\0\u238e\0\u23b7\0\u23e0\0\u2409"+
    "\0\u2432\0\51\0\u245b\0\u2484\0\173\0\u24ad\0\u24d6\0\u24ff"+
    "\0\51\0\51\0\244\0\173\0\u2528\0\u2551\0\51\0\u257a"+
    "\0\173\0\u25a3\0\u25cc\0\51\0\173\0\u25f5\0\u261e\0\51"+
    "\0\173\0\u2647\0\u2670\0\51\0\173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\5\1\20"+
    "\1\5\1\21\1\22\1\23\1\5\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\34\1\35"+
    "\3\5\1\36\2\5\1\37\53\0\1\3\1\40\1\41"+
    "\1\40\10\0\6\40\1\0\4\40\4\0\3\40\1\0"+
    "\7\40\3\0\2\40\1\41\1\40\10\0\6\40\1\0"+
    "\4\40\4\0\3\40\1\0\7\40\3\0\2\40\1\41"+
    "\1\5\10\0\6\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\3\0\1\42\2\0\1\42\1\43\1\44\6\0"+
    "\6\42\1\0\4\42\4\0\3\42\1\0\7\42\3\0"+
    "\1\45\2\0\1\45\2\44\6\0\6\45\1\0\4\45"+
    "\4\0\3\45\1\0\7\45\3\0\2\40\1\41\1\5"+
    "\10\0\1\5\1\46\4\5\1\0\1\5\1\47\2\5"+
    "\4\0\3\5\1\0\7\5\3\0\2\40\1\50\1\5"+
    "\10\0\6\5\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\4\5\1\51\1\5"+
    "\1\0\4\5\4\0\3\5\1\0\6\5\1\52\3\0"+
    "\2\40\1\41\1\5\10\0\1\5\1\53\4\5\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\23\0\1\54\4\0"+
    "\1\55\23\0\2\40\1\41\1\5\10\0\4\5\1\56"+
    "\1\5\1\0\2\5\1\57\1\5\4\0\3\5\1\0"+
    "\7\5\3\0\2\40\1\41\1\5\10\0\1\5\1\60"+
    "\1\5\1\61\2\5\1\62\1\63\3\5\4\0\3\5"+
    "\1\0\7\5\3\0\2\40\1\41\1\5\10\0\3\5"+
    "\1\64\2\5\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\6\5\1\65\1\66"+
    "\3\5\4\0\3\5\1\0\3\5\1\67\3\5\3\0"+
    "\2\40\1\41\1\5\10\0\3\5\1\70\2\5\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\21\0\1\71\1\72"+
    "\2\0\2\73\25\0\2\40\1\41\1\5\10\0\2\5"+
    "\1\74\1\75\2\5\1\73\1\76\3\5\4\0\3\5"+
    "\1\0\7\5\3\0\2\40\1\41\1\5\10\0\6\5"+
    "\1\0\1\5\1\77\2\5\4\0\3\5\1\0\7\5"+
    "\3\0\1\42\2\0\1\42\2\100\6\0\6\42\1\0"+
    "\4\42\4\0\3\42\1\0\7\42\3\0\1\45\2\0"+
    "\1\45\2\100\6\0\6\45\1\0\4\45\4\0\3\45"+
    "\1\0\7\45\3\0\2\40\1\41\1\5\10\0\2\5"+
    "\1\101\3\5\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\6\5\1\0\4\5"+
    "\4\0\2\5\1\102\1\0\7\5\3\0\2\40\1\41"+
    "\1\40\10\0\6\40\1\0\4\40\4\0\3\40\1\103"+
    "\1\104\6\40\3\0\2\40\1\41\1\5\10\0\2\5"+
    "\1\105\3\5\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\3\5\1\106\2\5"+
    "\1\0\4\5\4\0\3\5\1\0\7\5\3\0\2\40"+
    "\1\41\1\5\10\0\4\5\1\107\1\5\1\0\2\5"+
    "\1\110\1\5\4\0\3\5\1\0\7\5\21\0\1\111"+
    "\2\0\1\112\2\113\10\0\1\114\30\0\1\115\34\0"+
    "\2\40\1\41\1\5\10\0\2\5\1\116\2\5\1\117"+
    "\1\113\1\120\3\5\4\0\1\5\1\121\1\5\1\0"+
    "\7\5\3\0\2\40\1\41\1\5\10\0\1\122\5\5"+
    "\1\0\4\5\4\0\3\5\1\0\7\5\3\0\2\40"+
    "\1\41\1\5\10\0\6\5\1\0\3\5\1\123\4\0"+
    "\3\5\1\0\7\5\3\0\2\40\1\41\1\5\10\0"+
    "\2\5\1\124\3\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\22\0\1\125\31\0\2\40\1\41\1\5\10\0"+
    "\3\5\1\126\2\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\3\0\2\40\1\127\1\5\10\0\6\5\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\23\0\1\130\30\0"+
    "\2\40\1\41\1\5\10\0\4\5\1\131\1\5\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\3\0\2\40\1\41"+
    "\1\5\10\0\4\5\1\132\1\5\1\0\4\5\4\0"+
    "\3\5\1\0\7\5\3\0\2\40\1\41\1\5\10\0"+
    "\1\133\1\5\1\134\3\5\1\0\4\5\4\0\3\5"+
    "\1\0\7\5\40\0\1\135\47\0\1\136\14\0\2\40"+
    "\1\41\1\5\10\0\6\5\1\0\4\5\4\0\2\5"+
    "\1\137\1\0\7\5\3\0\2\40\1\41\1\5\10\0"+
    "\6\5\1\0\4\5\4\0\1\5\1\140\1\5\1\0"+
    "\7\5\3\0\2\40\1\41\1\5\10\0\5\5\1\141"+
    "\1\0\4\5\4\0\3\5\1\142\1\143\6\5\3\0"+
    "\2\40\1\41\1\5\10\0\3\5\1\144\2\5\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\3\0\2\40\1\41"+
    "\1\5\10\0\6\5\1\0\1\5\1\145\2\5\4\0"+
    "\3\5\1\0\7\5\25\0\2\146\25\0\2\40\1\41"+
    "\1\40\10\0\6\40\1\146\1\147\3\40\4\0\3\40"+
    "\1\0\7\40\3\0\2\40\1\41\1\5\10\0\1\5"+
    "\1\150\4\5\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\5\5\1\151\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\3\0\2\40\1\152"+
    "\1\5\10\0\6\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\3\0\2\40\1\41\1\5\10\0\1\5\1\153"+
    "\4\5\1\0\4\5\4\0\3\5\1\0\7\5\40\0"+
    "\1\154\34\0\1\155\64\0\1\156\50\0\1\157\13\0"+
    "\2\40\1\41\1\5\10\0\6\5\1\0\4\5\4\0"+
    "\2\5\1\160\1\0\7\5\3\0\2\40\1\41\1\5"+
    "\10\0\5\5\1\161\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\3\0\2\40\1\41\1\5\10\0\6\5\1\0"+
    "\4\5\4\0\2\5\1\162\1\0\7\5\3\0\2\40"+
    "\1\41\1\5\10\0\6\5\1\0\4\5\4\0\2\5"+
    "\1\163\1\0\7\5\3\0\2\40\1\41\1\5\10\0"+
    "\1\5\1\164\4\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\23\0\1\165\30\0\2\40\1\41\1\5\10\0"+
    "\4\5\1\166\1\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\3\0\2\40\1\41\1\40\10\0\6\40\1\0"+
    "\4\40\4\0\3\40\1\0\2\40\1\167\4\40\5\0"+
    "\1\170\46\0\2\40\1\171\1\5\10\0\6\5\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\3\0\2\40\1\41"+
    "\1\5\10\0\5\5\1\172\1\0\4\5\4\0\3\5"+
    "\1\0\7\5\3\0\2\40\1\41\1\5\10\0\3\5"+
    "\1\173\2\5\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\1\5\1\174\4\5"+
    "\1\0\4\5\4\0\3\5\1\0\7\5\25\0\2\175"+
    "\67\0\1\176\6\0\2\40\1\41\1\5\10\0\6\5"+
    "\1\175\1\177\3\5\4\0\3\5\1\0\7\5\3\0"+
    "\2\40\1\41\1\5\10\0\6\5\1\0\4\5\4\0"+
    "\3\5\1\0\3\5\1\200\3\5\3\0\2\40\1\41"+
    "\1\5\10\0\3\5\1\201\2\5\1\0\4\5\4\0"+
    "\3\5\1\0\7\5\21\0\1\202\32\0\2\40\1\41"+
    "\1\5\10\0\2\5\1\203\3\5\1\0\4\5\4\0"+
    "\3\5\1\0\7\5\3\0\2\40\1\41\1\5\10\0"+
    "\4\5\1\204\1\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\3\0\2\40\1\41\1\5\10\0\4\5\1\205"+
    "\1\5\1\0\4\5\4\0\3\5\1\0\7\5\3\0"+
    "\2\40\1\41\1\5\10\0\6\5\1\0\4\5\4\0"+
    "\3\5\1\0\3\5\1\206\3\5\3\0\2\40\1\41"+
    "\1\40\10\0\1\207\5\40\1\0\4\40\4\0\3\40"+
    "\1\0\1\40\1\210\5\40\22\0\1\211\53\0\2\212"+
    "\44\0\1\213\53\0\2\214\25\0\2\40\1\41\1\5"+
    "\10\0\3\5\1\215\2\5\1\0\4\5\4\0\3\5"+
    "\1\0\7\5\3\0\2\40\1\41\1\5\10\0\6\5"+
    "\1\212\1\216\3\5\4\0\3\5\1\0\7\5\3\0"+
    "\2\40\1\41\1\5\10\0\3\5\1\217\2\5\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\3\0\2\40\1\41"+
    "\1\5\10\0\6\5\1\214\1\220\3\5\4\0\3\5"+
    "\1\0\7\5\3\0\2\40\1\41\1\5\10\0\6\5"+
    "\1\0\3\5\1\221\4\0\3\5\1\0\7\5\21\0"+
    "\1\222\32\0\2\40\1\41\1\5\10\0\2\5\1\223"+
    "\3\5\1\0\4\5\4\0\3\5\1\0\7\5\3\0"+
    "\2\40\1\41\1\40\10\0\1\40\1\224\4\40\1\0"+
    "\4\40\4\0\3\40\1\0\7\40\17\0\1\225\10\0"+
    "\1\226\5\0\1\227\2\0\2\230\11\0\2\40\1\41"+
    "\1\40\10\0\1\231\5\40\1\0\2\40\1\232\1\40"+
    "\4\0\1\233\2\40\1\230\1\234\6\40\3\0\2\40"+
    "\1\41\1\5\10\0\6\5\1\235\1\236\3\5\4\0"+
    "\3\5\1\0\7\5\3\0\2\40\1\41\1\5\10\0"+
    "\2\5\1\237\3\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\3\0\2\40\1\41\1\5\10\0\6\5\1\0"+
    "\4\5\4\0\2\5\1\240\1\0\7\5\23\0\1\241"+
    "\50\0\1\242\30\0\2\40\1\41\1\5\10\0\4\5"+
    "\1\243\1\5\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\4\5\1\244\1\5"+
    "\1\0\4\5\4\0\3\5\1\0\7\5\3\0\2\40"+
    "\1\41\1\5\10\0\6\5\1\0\4\5\4\0\2\5"+
    "\1\245\1\0\7\5\27\0\1\246\24\0\2\40\1\41"+
    "\1\5\10\0\6\5\1\0\1\5\1\247\2\5\4\0"+
    "\3\5\1\0\7\5\3\0\2\40\1\41\1\5\10\0"+
    "\5\5\1\250\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\5\5\1\251\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\3\0\2\40\1\41"+
    "\1\5\10\0\2\5\1\252\3\5\1\0\4\5\4\0"+
    "\3\5\1\0\7\5\3\0\2\40\1\41\1\40\10\0"+
    "\6\40\1\0\1\40\1\253\2\40\4\0\3\40\1\0"+
    "\7\40\3\0\2\40\1\41\1\40\10\0\6\40\1\0"+
    "\1\40\1\254\2\40\4\0\3\40\1\0\7\40\30\0"+
    "\1\255\40\0\1\256\71\0\2\257\36\0\1\260\23\0"+
    "\2\40\1\41\1\5\10\0\6\5\1\0\2\5\1\261"+
    "\1\5\4\0\3\5\1\0\7\5\3\0\2\40\1\41"+
    "\1\5\10\0\1\5\1\262\4\5\1\0\4\5\4\0"+
    "\3\5\1\0\7\5\3\0\2\40\1\41\1\5\10\0"+
    "\6\5\1\0\4\5\4\0\3\5\1\257\1\263\6\5"+
    "\3\0\2\40\1\41\1\5\10\0\6\5\1\0\2\5"+
    "\1\264\1\5\4\0\3\5\1\0\7\5\3\0\2\40"+
    "\1\41\1\5\10\0\1\5\1\265\4\5\1\0\4\5"+
    "\4\0\3\5\1\0\7\5\40\0\1\266\13\0\2\40"+
    "\1\41\1\5\10\0\6\5\1\0\4\5\4\0\2\5"+
    "\1\267\1\0\7\5\3\0\2\40\1\270\1\40\10\0"+
    "\6\40\1\0\4\40\4\0\3\40\1\0\7\40\27\0"+
    "\1\271\43\0\1\272\2\0\2\273\67\0\1\274\30\0"+
    "\2\275\25\0\2\40\1\41\1\40\10\0\6\40\1\0"+
    "\1\40\1\276\2\40\4\0\3\40\1\0\7\40\3\0"+
    "\2\40\1\41\1\40\10\0\3\40\1\277\2\40\1\273"+
    "\1\300\3\40\4\0\3\40\1\0\7\40\3\0\2\40"+
    "\1\41\1\40\10\0\6\40\1\0\4\40\4\0\3\40"+
    "\1\0\3\40\1\301\3\40\3\0\2\40\1\41\1\40"+
    "\10\0\6\40\1\275\1\302\3\40\4\0\3\40\1\0"+
    "\7\40\20\0\1\303\33\0\2\40\1\41\1\5\10\0"+
    "\1\5\1\304\4\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\3\0\2\40\1\41\1\5\10\0\6\5\1\305"+
    "\1\306\3\5\4\0\3\5\1\0\7\5\3\0\2\40"+
    "\1\41\1\5\10\0\4\5\1\307\1\5\1\0\4\5"+
    "\4\0\3\5\1\0\7\5\37\0\1\310\14\0\2\40"+
    "\1\41\1\5\10\0\6\5\1\0\4\5\4\0\1\5"+
    "\1\311\1\5\1\0\7\5\5\0\1\312\46\0\2\40"+
    "\1\313\1\5\10\0\6\5\1\0\4\5\4\0\3\5"+
    "\1\0\7\5\3\0\2\40\1\41\1\5\10\0\6\5"+
    "\1\314\1\315\3\5\4\0\3\5\1\0\7\5\3\0"+
    "\2\40\1\41\1\5\10\0\3\5\1\316\2\5\1\0"+
    "\4\5\4\0\3\5\1\0\7\5\3\0\2\40\1\41"+
    "\1\5\10\0\6\5\1\0\1\5\1\317\2\5\4\0"+
    "\3\5\1\0\7\5\3\0\2\40\1\41\1\40\10\0"+
    "\6\40\1\0\4\40\4\0\2\40\1\320\1\0\7\40"+
    "\3\0\2\40\1\41\1\40\10\0\6\40\1\0\4\40"+
    "\4\0\3\40\1\0\2\40\1\321\4\40\22\0\1\322"+
    "\55\0\1\323\46\0\2\324\25\0\2\40\1\41\1\5"+
    "\10\0\3\5\1\325\2\5\1\0\4\5\4\0\3\5"+
    "\1\0\7\5\3\0\2\40\1\41\1\5\10\0\6\5"+
    "\1\0\1\5\1\326\2\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\6\5\1\324\1\327"+
    "\3\5\4\0\3\5\1\0\7\5\27\0\1\330\24\0"+
    "\2\40\1\41\1\5\10\0\6\5\1\0\1\5\1\331"+
    "\2\5\4\0\3\5\1\0\7\5\3\0\2\40\1\41"+
    "\1\40\10\0\5\40\1\332\1\0\4\40\4\0\3\40"+
    "\1\0\7\40\40\0\1\333\31\0\1\334\51\0\1\335"+
    "\51\0\1\336\30\0\2\40\1\41\1\40\10\0\6\40"+
    "\1\0\4\40\4\0\2\40\1\337\1\0\7\40\3\0"+
    "\2\40\1\41\1\40\10\0\2\40\1\340\3\40\1\0"+
    "\4\40\4\0\3\40\1\0\7\40\3\0\2\40\1\41"+
    "\1\40\10\0\3\40\1\341\2\40\1\0\4\40\4\0"+
    "\3\40\1\0\7\40\3\0\2\40\1\41\1\40\10\0"+
    "\4\40\1\342\1\40\1\0\4\40\4\0\3\40\1\0"+
    "\7\40\23\0\1\343\30\0\2\40\1\41\1\5\10\0"+
    "\4\5\1\344\1\5\1\0\4\5\4\0\3\5\1\0"+
    "\7\5\40\0\1\345\13\0\2\40\1\41\1\5\10\0"+
    "\6\5\1\0\4\5\4\0\2\5\1\346\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\6\5\1\0\1\5"+
    "\1\347\2\5\4\0\3\5\1\0\7\5\47\0\1\350"+
    "\4\0\2\40\1\41\1\40\10\0\6\40\1\0\4\40"+
    "\4\0\3\40\1\0\5\40\1\351\1\40\27\0\1\352"+
    "\24\0\2\40\1\41\1\5\10\0\6\5\1\0\1\5"+
    "\1\353\2\5\4\0\3\5\1\0\7\5\3\0\2\40"+
    "\1\41\1\5\10\0\6\5\1\0\4\5\4\0\3\5"+
    "\1\354\1\355\6\5\3\0\2\40\1\41\1\5\10\0"+
    "\6\5\1\0\4\5\4\0\2\5\1\356\1\0\7\5"+
    "\3\0\2\40\1\41\1\40\10\0\6\40\1\0\1\40"+
    "\1\357\2\40\4\0\3\40\1\0\7\40\3\0\2\40"+
    "\1\41\1\40\10\0\1\40\1\360\4\40\1\0\4\40"+
    "\4\0\3\40\1\0\7\40\23\0\1\361\65\0\1\362"+
    "\50\0\1\363\13\0\2\40\1\41\1\5\10\0\4\5"+
    "\1\364\1\5\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\5\10\0\6\5\1\0\4\5"+
    "\4\0\2\5\1\365\1\0\7\5\3\0\2\40\1\41"+
    "\1\5\10\0\6\5\1\0\4\5\4\0\2\5\1\366"+
    "\1\0\7\5\41\0\2\367\11\0\2\40\1\41\1\5"+
    "\10\0\6\5\1\0\4\5\4\0\3\5\1\367\1\370"+
    "\6\5\3\0\2\40\1\41\1\40\10\0\1\40\1\371"+
    "\4\40\1\0\4\40\4\0\3\40\1\0\7\40\27\0"+
    "\1\372\41\0\1\373\53\0\1\374\51\0\1\375\27\0"+
    "\2\40\1\41\1\40\10\0\6\40\1\0\1\40\1\376"+
    "\2\40\4\0\3\40\1\0\7\40\3\0\2\40\1\41"+
    "\1\40\10\0\1\40\1\377\4\40\1\0\4\40\4\0"+
    "\3\40\1\0\7\40\3\0\2\40\1\41\1\40\10\0"+
    "\4\40\1\u0100\1\40\1\0\4\40\4\0\3\40\1\0"+
    "\7\40\3\0\2\40\1\41\1\40\10\0\5\40\1\u0101"+
    "\1\0\4\40\4\0\3\40\1\0\7\40\3\0\2\40"+
    "\1\41\1\5\10\0\6\5\1\0\4\5\4\0\2\5"+
    "\1\u0102\1\0\7\5\45\0\1\u0103\6\0\2\40\1\41"+
    "\1\40\10\0\6\40\1\0\4\40\4\0\3\40\1\0"+
    "\3\40\1\u0104\3\40\3\0\2\40\1\41\1\40\10\0"+
    "\6\40\1\0\2\40\1\u0105\1\40\4\0\3\40\1\0"+
    "\7\40\3\0\2\40\1\41\1\40\10\0\6\40\1\0"+
    "\4\40\4\0\2\40\1\u0106\1\0\7\40\21\0\1\u0107"+
    "\34\0\1\u0108\46\0\2\40\1\41\1\5\10\0\2\5"+
    "\1\u0109\3\5\1\0\4\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\u010a\1\5\10\0\6\5\1\0\4\5"+
    "\4\0\3\5\1\0\7\5\3\0\2\40\1\41\1\40"+
    "\10\0\4\40\1\u010b\1\40\1\0\4\40\4\0\3\40"+
    "\1\0\7\40\31\0\1\u010c\40\0\1\u010d\54\0\2\u010e"+
    "\25\0\2\40\1\41\1\40\10\0\6\40\1\0\3\40"+
    "\1\u010f\4\0\3\40\1\0\7\40\3\0\2\40\1\41"+
    "\1\40\10\0\2\40\1\u0110\3\40\1\0\4\40\4\0"+
    "\3\40\1\0\7\40\3\0\2\40\1\41\1\40\10\0"+
    "\6\40\1\u010e\1\u0111\3\40\4\0\3\40\1\0\7\40"+
    "\22\0\1\u0112\31\0\2\40\1\41\1\40\10\0\3\40"+
    "\1\u0113\2\40\1\0\4\40\4\0\3\40\1\0\7\40"+
    "\3\0\2\40\1\41\1\40\10\0\3\40\1\u0114\2\40"+
    "\1\0\4\40\4\0\3\40\1\0\7\40\27\0\1\u0115"+
    "\44\0\1\u0116\30\0\2\40\1\41\1\5\10\0\6\5"+
    "\1\0\1\5\1\u0117\2\5\4\0\3\5\1\0\7\5"+
    "\3\0\2\40\1\41\1\40\10\0\4\40\1\u0118\1\40"+
    "\1\0\4\40\4\0\3\40\1\0\7\40\3\0\2\40"+
    "\1\41\1\40\10\0\2\40\1\u0119\3\40\1\0\4\40"+
    "\4\0\3\40\1\0\7\40\20\0\1\u011a\70\0\1\u011b"+
    "\30\0\1\u011c\33\0\2\40\1\41\1\40\10\0\1\40"+
    "\1\u011d\4\40\1\0\4\40\4\0\3\40\1\0\7\40"+
    "\3\0\2\40\1\41\1\40\10\0\6\40\1\0\4\40"+
    "\4\0\2\40\1\u011e\1\0\7\40\3\0\2\40\1\41"+
    "\1\40\10\0\1\40\1\u011f\4\40\1\0\4\40\4\0"+
    "\3\40\1\0\7\40\3\0\2\40\1\41\1\40\10\0"+
    "\2\40\1\u0120\3\40\1\0\4\40\4\0\3\40\1\0"+
    "\7\40\44\0\1\u0121\50\0\1\u0122\7\0\2\40\1\41"+
    "\1\5\10\0\6\5\1\0\4\5\4\0\3\5\1\0"+
    "\2\5\1\u0123\4\5\3\0\2\40\1\41\1\40\10\0"+
    "\6\40\1\0\4\40\4\0\3\40\1\0\2\40\1\u0124"+
    "\4\40\3\0\2\40\1\41\1\40\10\0\6\40\1\0"+
    "\4\40\4\0\2\40\1\u0125\1\0\7\40\27\0\1\u0126"+
    "\44\0\1\u0127\30\0\2\40\1\41\1\40\10\0\6\40"+
    "\1\0\1\40\1\u0128\2\40\4\0\3\40\1\0\7\40"+
    "\3\0\2\40\1\41\1\40\10\0\4\40\1\u0129\1\40"+
    "\1\0\4\40\4\0\3\40\1\0\7\40\3\0\2\40"+
    "\1\41\1\40\10\0\6\40\1\0\4\40\4\0\2\40"+
    "\1\u012a\1\0\7\40\3\0\2\40\1\41\1\40\10\0"+
    "\6\40\1\0\1\40\1\u012b\2\40\4\0\3\40\1\0"+
    "\7\40\41\0\2\u012c\11\0\2\40\1\41\1\40\10\0"+
    "\6\40\1\0\4\40\4\0\3\40\1\u012c\1\u012d\6\40"+
    "\3\0\2\40\1\41\1\40\10\0\1\40\1\u012e\4\40"+
    "\1\0\4\40\4\0\3\40\1\0\7\40\3\0\2\40"+
    "\1\41\1\40\10\0\6\40\1\0\4\40\4\0\2\40"+
    "\1\u012f\1\0\7\40\3\0\2\40\1\41\1\40\10\0"+
    "\6\40\1\0\4\40\4\0\3\40\1\u0130\1\u0131\6\40"+
    "\3\0\2\40\1\41\1\40\10\0\6\40\1\u0132\1\u0133"+
    "\3\40\4\0\3\40\1\0\7\40\20\0\1\u0134\33\0"+
    "\2\40\1\41\1\40\10\0\1\40\1\u0135\4\40\1\0"+
    "\4\40\4\0\3\40\1\0\7\40\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9881];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\6\11\10\1\4\11\5\1\1\11"+
    "\1\0\2\1\3\0\6\1\2\0\4\1\1\0\2\1"+
    "\1\0\3\1\2\0\1\11\4\1\1\11\2\1\2\0"+
    "\4\1\1\11\4\0\7\1\1\0\7\1\2\0\3\1"+
    "\1\0\3\1\1\11\5\1\4\0\5\1\1\0\1\1"+
    "\2\0\4\1\2\0\3\1\1\0\4\1\6\0\5\1"+
    "\1\0\1\1\12\0\3\1\1\0\1\11\10\1\3\0"+
    "\1\11\2\0\5\1\1\0\2\1\4\0\1\11\4\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\3\1\5\0\3\1\1\0\1\1\11\0"+
    "\1\11\1\1\1\11\2\1\2\0\1\11\1\1\1\11"+
    "\2\1\3\0\1\11\4\1\1\11\1\1\1\0\1\11"+
    "\3\0\1\1\3\0\1\1\3\0\1\1\2\0\2\1"+
    "\7\0\1\11\1\1\3\0\1\1\2\0\1\11\2\0"+
    "\1\1\3\0\2\11\2\1\2\0\1\11\1\0\1\1"+
    "\2\0\1\11\1\1\2\0\1\11\1\1\2\0\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+ "Linea"+yyline+" Columna "+yycolumn);
            } 
            // fall through
          case 54: break;
          case 2: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tnum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 55: break;
          case 3: 
            { //codigo en java
                    System.out.println("Reconocio cadena, lexema:"+yytext());
                    return new Symbol(Simbolos.tcadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 56: break;
          case 4: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tdiv, yycolumn, yyline, yytext());
            } 
            // fall through
          case 57: break;
          case 5: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tmul, yycolumn, yyline, yytext());
            } 
            // fall through
          case 58: break;
          case 6: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.trest, yycolumn, yyline, yytext());
            } 
            // fall through
          case 59: break;
          case 7: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacioninicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 60: break;
          case 8: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacionfin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 61: break;
          case 9: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tmayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 62: break;
          case 10: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tcoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 11: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tsum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 64: break;
          case 12: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.pare1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 65: break;
          case 13: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.pare2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 14: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tpuntoycoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 67: break;
          case 15: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 16: 
            { /* Espacios en blanco, se ignoran */
            } 
            // fall through
          case 69: break;
          case 17: 
            { //codigo en java
                    System.out.println("Reconocio variable, lexema:"+yytext());
                    return new Symbol(Simbolos.tvariable, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 18: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tcomentario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 19: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 20: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tcomentariovariaslineas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 21: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prCon, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 22: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prInt, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 23: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tmod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 24: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 25: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 26: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prO_Si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 27: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 28: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 29: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prHacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 30: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prHasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 31: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 32: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 33: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 34: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prString, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 35: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 36: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prRepetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 37: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tpot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 38: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prEntonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 39: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prEjecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 40: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 41: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 42: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 43: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 44: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prRetornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 45: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 46: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prHastaQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 47: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 48: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prIncremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 49: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimirNl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 50: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 51: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 52: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prConParametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 53: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prDeLoContrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
