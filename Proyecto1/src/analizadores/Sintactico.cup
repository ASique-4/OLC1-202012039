package analizadores;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import proyecto1.Errors;
import proyecto1.Nodo;


parser code 
{:      
        public static Nodo padre;
        boolean potenciaGo = false;
        boolean fmtGo = false;
        int countTab = 1;
        int tmpCountTab = 0;
        int cont = 0;
        public String python = "";
        public String golang = "";
        public int erroresSintacticos = 0;
        String condicion = "";
        String instruccion = "";
        String tmpInstruccion = "";
        String valor = "";
        String tmpPython = "";
        String tmpImprimir = "";
        String tmpImprimirnl = "";
        Nodo nodoError = new Nodo();
        Boolean osiBool = false;
        ArrayList<String> variables = new ArrayList<String>();
        public ArrayList<Errors> errorsSint = new ArrayList<Errors>();
        ArrayList<String> condiciones = new ArrayList<String>();
        ArrayList<String> tmpListaNombres = new ArrayList<String>();
        ArrayList<String> tmpOperacion = new ArrayList<String>();
        ArrayList<String> tmpOperadorLista = new ArrayList<String>();
        ArrayList<String> pythonArray = new ArrayList<String>();
        ArrayList<String> tmpPythonArray = new ArrayList<String>();
        ArrayList<String> tmpPython2 = new ArrayList<String>();
        Nodo tmpErrores = new Nodo();
        public void syntax_error(Symbol s){ 
                        erroresSintacticos++;
                        //Imprimir error
                        System.out.println("Error Sintáctico en la Línea " + (s.left) +
                        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

                        Errors tmp = new Errors("Sitactico", s.right , s.left,"No se esperaba este componente: " +s.value);
                        nodoError = new Nodo();
                        nodoError.setEtiqueta("ERROR");
                        nodoError.setIdNodo(cont); 
                        nodoError.setValor("No se esperaba este componente: " +s.value);
                        cont++;
                        errorsSint.add(tmp);
                
        
        } 
        //Repet tab
        public String tab(int n){
                String tab = "";
                for(int i = 0; i < n; i++){
                tab += "\t";
                }
                return tab;
        }
        //ASCII to char
        public String asciiToChar(String ascii){
                ascii = ascii.replace("{", "");
                ascii = ascii.replace("}", "");
                ascii = ascii.replace("$", "");
                ascii = ascii.replace("'", "");
                String[] asciiArray = ascii.split(",");
                String charValue = "";
                for(int i = 0; i < asciiArray.length; i++){
                        charValue += (char)Integer.parseInt(asciiArray[i]);
                }
                return charValue;
        }
        public void agregarTmpListaNombres(String a, Nodo b){
                int j = 0;
                for(String i: tmpListaNombres){
                        if(j == 0){
                                b.pythonCode += "var" + i + " = \"" + a + "\"\n";
                                b.GolangCode += "var" + i + " = \"" + a + "\"\n";
                        }else{
                                b.pythonCode += "var" + tab(countTab) + i + " = \"" + a + "\"\n";
                                b.GolangCode += "var" + tab(countTab) + i + " = \"" + a + "\"\n";
                        }
                        j++;
                }; 

                tmpListaNombres = new ArrayList<String>();
        }

        public void agregarTmpOperacionLista(String a){
        tmpOperacion.add( "(" + a + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

        }

        public void agregarTmpOperacionLista2(){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 2) + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        }

        public void agregarTmpOperacionLista3(String a){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")" +
                tmpOperadorLista.get(tmpOperadorLista.size() - 1) + "(" + a + ")" 
        ); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

        }

        public void agregarTmpOperacion(String a, String b){
        tmpOperacion.add(a + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + b); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        }
        
        public String recorrido(Nodo raiz){

                String ast = "";
                for(Nodo hijos : raiz.Hijos){
                        if(hijos != null){
                                //If hijos is null then eliminate
                                if(!(hijos.Etiqueta.equals(""))){
                                        if(hijos.pythonCode.equals("")){
                                                ast += recorrido(hijos);
                                        }else{
                                                ast += hijos.pythonCode;
                                        }
                                } else {
                                        System.out.println(raiz.Etiqueta);
                                }
                        }else{
                                Nodo tmp = new Nodo();
                                tmp.Etiqueta = "null";
                                raiz.Hijos.add(tmp);
                                ast += "Error" + "\n";
                        }

                }
                return ast;
        }

        //Recorrido para GolangCode
        public String recorridoGolang(Nodo raiz){
                String ast = "";
                for(Nodo hijos : raiz.Hijos){
                        if(hijos != null){
                                //If hijos is null then eliminate
                                if(!(hijos.Etiqueta.equals(""))){
                                        if(hijos.GolangCode.equals("")){
                                                ast += recorridoGolang(hijos);
                                        }else{
                                                ast += hijos.GolangCode;
                                        }
                                } else {
                                        System.out.println(raiz.Etiqueta);
                                }
                        }else{
                                Nodo tmp = new Nodo();
                                tmp.Etiqueta = "null";
                                raiz.Hijos.add(tmp);
                                ast += "Error" + "\n";
                        }

                }
                return ast;
        }
        /**
        * Método al que se llama automáticamente ante algún error sintáctico 
        * en el que ya no es posible una recuperación de errores.
        **/ 
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
                        System.out.println("Error síntactico irrecuperable en la Línea " + 
                        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
                        " no reconocido."); 
                        Errors tmp = new Errors("Sitactico", s.left , s.right,"Componente " + s.value + " no reconocido.");
                        
                        errorsSint.add(tmp);
                
        }  
:} 

terminal String tnum;
terminal String trest,tsum,tdiv,tmul,tpot,tmod, pare1, pare2, prInicio,prFin,
        tinterrogacioninicio,tinterrogacionfin,tcoma,tmayor, tcomentario, tcomentariovariaslineas,
        tpuntoycoma,prIngresar,prComo,prConValor,prSi,prEntonces,prFinSi,prO_Si,prDeLoContrario,prSegun,prHacer,prPara,
        prHasta,prFinPara,prCon,prIncremental,prMientras,prFinMientras,prRepetir,prHastaQue,prRetornar,prMetodo,
        prFinMetodo,prConParametros,prFuncion,prFinFuncion,prEjecutar,prImprimir,prImprimirNl,tigual,tvariable,tcadena,
        prFinSegun,palabra, prBoolean,prCaracter,prNumero,prCadena,prVerdadero,prFalso,
        prEsIgual,prEsDiferente,prMayor,prFloat,prMenor,prMayorOIgual,prMenorOIgual,caracter,cor1,cor2,ascii,prNot;           


non terminal INICIO;
non terminal CONDICION;
non terminal INSTRUCCIONES;
non terminal INSTRUCCIONES_CICLO;
non terminal INSTRUCCION;
non terminal IF;
non terminal VALOR;
non terminal LISTA_NOMBRES;
non terminal LISTA_NOMBRES2;
non terminal VARIABLE;
non terminal DECLARACION;
non terminal COMENTARIO;
non terminal COMENTARIO_VARIAS_LINEAS;
non terminal E;
non terminal ASIGNACION;
non terminal DE_LO_CONTRARIO;
non terminal EXPRESION;
non terminal O_SI;
non terminal SELECCION_MULTIPLE;
non terminal SEGUN;
non terminal LISTA_SEGUN;
non terminal FLECHA;
non terminal PARA;
non terminal PARA_SALTO;
non terminal MIENTRAS;
non terminal REPETIR;
non terminal RETORNO;
non terminal METODO;
non terminal LISTA_PARAMETROS;
non terminal FUNCION;
non terminal EJECUTAR;
non terminal IMPRIMIR;
non terminal IMPRIMIR_NL;
non terminal TIPO;
non terminal OPERACION;
non terminal OPERACIONES;
non terminal VARIABLES;

precedence left tsum, trest;
precedence left tdiv, tmul;
precedence left tmod, tpot;
precedence left pare1;
precedence left pare2;
precedence left cor1;
precedence left cor2;
precedence left tnum,prFloat,tvariable;

start with INICIO;

INICIO::= prInicio INSTRUCCIONES:n1 prFin{: 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("INICIO");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            nd.AddHijo((Nodo) n1);
            parser.padre = (Nodo) nd;
            python += "def main():\n";
            python += recorrido(nd);
            python += "if __name__ == '__main__':\n";
            python += "\tmain()\n";
            golang += "package main;\n";
            if((potenciaGo) && (fmtGo)){
                golang += "import ( \n\t\"math\" \n\t\"fmt\")\n";
            }else if((potenciaGo) && (!fmtGo)){
                golang += "import ( \n\t\"math\")\n";
            }else if(!(potenciaGo) && (fmtGo)){
                golang += "import ( \n\t\"fmt\")\n";
            }
            golang += "func main() {\n";
            golang += recorridoGolang(nd);
            golang += "}";
            RESULT = nd;     :};

INSTRUCCIONES::= E:n1 INSTRUCCIONES:n2 {: 
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("INSTRUCCIONES");
                nd.setIdNodo(parser.cont); 

                parser.cont++;
                if(n1 == null){
                        tmpErrores.setIdNodo(parser.cont);
                        parser.cont++;
                        tmpErrores.setEtiqueta("ERROR");
                        nd.AddHijo((Nodo) n2);
                        tmpErrores = nd;
                        tmpErrores.setIdNodo(parser.cont);
                        nd.pythonCode = ((Nodo) n2).pythonCode; 
                        nd.GolangCode = ((Nodo) n2).GolangCode;
                }else if(n2 == null){
                        tmpErrores.setIdNodo(parser.cont);
                        parser.cont++;
                        tmpErrores.setEtiqueta("ERROR");
                        nd.AddHijo((Nodo) n1);
                        nd.AddHijo(tmpErrores);
                        tmpErrores = nd;
                        if((nd.Hijos.get(0).Etiqueta.equals("DE_LO_CONTRARIO") || nd.Hijos.get(0).Etiqueta.equals("O_SI"))){
                                nd.pythonCode = tab(countTab-1) + ((Nodo) n1).pythonCode;  
                                nd.GolangCode = tab(countTab-1) + ((Nodo) n1).GolangCode;
                        }else{
                                nd.pythonCode = tab(countTab) + ((Nodo) n1).pythonCode;  
                                nd.GolangCode = tab(countTab) + ((Nodo) n1).GolangCode;
                        }
                        
                }else{
                        nd.AddHijo((Nodo) n1);
                        nd.AddHijo((Nodo) n2);
                        tmpErrores = nd;
                        if((nd.Hijos.get(0).Etiqueta.equals("DE_LO_CONTRARIO") || nd.Hijos.get(0).Etiqueta.equals("O_SI"))){
                                nd.pythonCode = tab(countTab-1) + ((Nodo) n1).pythonCode + "\n" + ((Nodo) n2).pythonCode; 
                                nd.GolangCode = tab(countTab-1) + ((Nodo) n1).GolangCode + "\n" + ((Nodo) n2).GolangCode;
                        }else{
                                nd.pythonCode = tab(countTab) + ((Nodo) n1).pythonCode + "\n" + ((Nodo) n2).pythonCode; 
                                nd.GolangCode = tab(countTab) + ((Nodo) n1).GolangCode + "\n" + ((Nodo) n2).GolangCode;
                        }
                        
                }
                
                RESULT = nd; 
                
                :}

                |E:n1 {: 
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("INSTRUCCION");
                nd.setIdNodo(parser.cont); 

                parser.cont++;

                if(n1 == null){
                        tmpErrores.setIdNodo(parser.cont);
                        tmpErrores.setEtiqueta("ERROR");
                        parser.cont++;
                        tmpErrores = nd;

                }else{
                        tmpErrores.setIdNodo(parser.cont);
                        tmpErrores.setEtiqueta("ERROR");
                        nd.AddHijo((Nodo) n1);
                        tmpErrores = nd;
                        parser.cont++;
                        if((nd.Hijos.get(0).Etiqueta.equals("DE_LO_CONTRARIO") || nd.Hijos.get(0).Etiqueta.equals("O_SI"))){
                                nd.pythonCode = tab(countTab-1) + nd.Hijos.get(0).pythonCode + "\n";
                                nd.GolangCode = tab(countTab-1) + nd.Hijos.get(0).GolangCode + "\n";
                        }else{
                                nd.pythonCode = tab(countTab) + nd.Hijos.get(0).pythonCode + "\n";
                                nd.GolangCode = tab(countTab) + nd.Hijos.get(0).GolangCode + "\n";
                        }
                }
                RESULT = nd;  
                
                

                
                :};

E::=    DECLARACION:a {:  RESULT = a;     :} 
        | {:countTab++;:} IF:a {: countTab--; RESULT = a;     :} 
        |COMENTARIO:a {: RESULT = a;     :} 
        |COMENTARIO_VARIAS_LINEAS:a {: RESULT = a;     :} 
        |ASIGNACION:a {: RESULT = a;     :} 
        | {:countTab++;:} SELECCION_MULTIPLE:a {: countTab--; RESULT = a;     :} 
        | {:countTab++;:} PARA:a {: countTab--; RESULT = a;     :} 
        | {:countTab++;:} MIENTRAS:a {: countTab--; RESULT = a;     :} 
        | {:countTab++;:} REPETIR:a {: countTab--; RESULT = a;     :} 
        |RETORNO:a {: RESULT = a;     :} 
        | {:countTab++;:} METODO:a {: countTab--; RESULT = a;     :} 
        | {:countTab++;:} FUNCION:a {: countTab--; RESULT = a;     :} 
        |EJECUTAR:a {: RESULT = a;     :} 
        |IMPRIMIR:a {: RESULT = a;     :} 
        |IMPRIMIR_NL:a {: RESULT = a;     :} 
        |error ;

EXPRESION::= EXPRESION OPERACIONES:a {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("OPERACIONES");
                nd.setIdNodo(parser.cont);
                parser.cont++;
                nd.AddHijo((Nodo) a);

                RESULT = nd; :}
                |OPERACIONES:a {: RESULT = a;:};

OPERACIONES::= OPERACION:e {: RESULT = e;:};

OPERACION::= tnum:n {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("NUMERO");
                nd.setIdNodo(parser.cont);
                parser.cont++;
                nd.setValor(n);
                nd.pythonCode = n;
                nd.GolangCode = n;
                RESULT = nd;:}
                | OPERACION:i tsum OPERACION:r {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("SUMA");
                nd.setIdNodo(parser.cont); 
                nd.setValor("+");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "+" + ( (Nodo) r).pythonCode  ;
                nd.GolangCode = ( (Nodo) i).GolangCode + "+" + ( (Nodo) r).GolangCode  ;
                RESULT = nd;:}
                | OPERACION:i trest OPERACION:r {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("RESTA");
                nd.setIdNodo(parser.cont); 
                nd.setValor("-");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "-" + ( (Nodo) r).pythonCode ;
                nd.GolangCode = ( (Nodo) i).GolangCode + "-" + ( (Nodo) r).GolangCode ;
                RESULT = nd;:}
                | OPERACION:i tmul OPERACION:r {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("MULTIPLICACION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("*");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "*" + ( (Nodo) r).pythonCode ;
                nd.GolangCode = ( (Nodo) i).GolangCode + "*" + ( (Nodo) r).GolangCode ;
                RESULT = nd;:}
                | OPERACION:i tdiv OPERACION:r {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("DIVICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("/");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "/" + ( (Nodo) r).pythonCode ;
                nd.GolangCode = ( (Nodo) i).GolangCode + "/" + ( (Nodo) r).GolangCode ;
                RESULT = nd;:}
                | OPERACION:i tmod OPERACION:r {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("MODULO");
                nd.setIdNodo(parser.cont); 
                nd.setValor("%");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "%" + ( (Nodo) r).pythonCode ;
                nd.GolangCode = ( (Nodo) i).GolangCode + "%" + ( (Nodo) r).GolangCode ;
                RESULT = nd;:}
                | OPERACION:i tpot OPERACION:r {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("POTENCIA");
                nd.setIdNodo(parser.cont); 
                nd.setValor("**");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "**" + ( (Nodo) r).pythonCode ;
                nd.GolangCode = "math.Pow(" + ( (Nodo) i).GolangCode + "," + ( (Nodo) r).GolangCode.replace("[","").replace("]","") + ")" ;
                RESULT = nd;:}
                | pare1 OPERACION:e pare2 {:
                ((Nodo) e).pythonCode = "(" + ((Nodo) e).pythonCode + ")";
                ((Nodo) e).GolangCode = "(" + ((Nodo) e).GolangCode + ")";
                RESULT = e;:}

                | cor1 OPERACION:e cor2 {:
                ((Nodo) e).pythonCode = "[" + ((Nodo) e).pythonCode + "]";
                ((Nodo) e).GolangCode = "[" + ((Nodo) e).GolangCode + "]";
                RESULT = e;:}
                
                | tvariable:n {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("VARIABLE");
                nd.setIdNodo(parser.cont);
                parser.cont++;
                nd.setValor(n);
                nd.pythonCode = n;
                nd.GolangCode = n;
                RESULT = nd;:}
                
                | prFloat:n {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("FLOAT");
                nd.setIdNodo(parser.cont);
                parser.cont++;
                nd.setValor(n);
                nd.pythonCode = n;
                nd.GolangCode = n;
                RESULT = nd;:};

TIPO::=prBoolean:a {: 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("BOOLEAN");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            nd.GolangCode = " bool";
            RESULT = nd;     :}
        |prCaracter:a {: 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("CARACTER");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            nd.GolangCode = " string";
            RESULT = nd;     :}
        |prNumero:a {: 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("ENTERO");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            nd.GolangCode = " int";
            RESULT = nd;     :}
        |prCadena:a {: 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("CADENA");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            nd.GolangCode = " string";
            RESULT = nd;     :};

DECLARACION::=prIngresar tvariable:a prComo TIPO:c prConValor VARIABLES:b tpuntoycoma {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Variable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Variables
                Nodo nd6 = (Nodo)  b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                parser.cont++;
                 
                nd.pythonCode += a.toString() + " = " + nd6.pythonCode  ; 
                nd.GolangCode += "var " + a.toString() + nd4.GolangCode + " = " + nd6.GolangCode  ;
                
                RESULT = nd;
                :}
                
        |prIngresar LISTA_NOMBRES:a prComo TIPO:c prConValor VARIABLES:b tpuntoycoma {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Lista de nombres
                Nodo nd2 = (Nodo) a;
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Variables
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                parser.cont++;

                RESULT = nd;
                agregarTmpListaNombres(nd6.Valor,nd);
                :}
        |prIngresar tvariable:a prComo TIPO:c prConValor EXPRESION:b  tpuntoycoma{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Variable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Expresion
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = a.toString() + " = " + nd6.pythonCode  ;
                nd.GolangCode += "var " + a.toString() + nd4.GolangCode + " = " + nd6.GolangCode  ;
                :}
                
        |prIngresar LISTA_NOMBRES:a prComo TIPO:c prConValor EXPRESION:b  tpuntoycoma{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Lista de nombres
                Nodo nd2 = (Nodo) a;
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Variables
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                parser.cont++;

                agregarTmpListaNombres(nd6.Valor,nd);
                RESULT = nd;
                :}

        |prIngresar tvariable:a prComo TIPO:c prConValor CONDICION:b  tpuntoycoma{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Variable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Expresion
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                RESULT = nd;
                parser.cont++;
                
                nd.pythonCode = a.toString() + " = " + ((Nodo) b).pythonCode;
                nd.GolangCode += "var " + a.toString() + nd4.GolangCode + " = " + nd6.GolangCode  ;
                :}
                
        |prIngresar LISTA_NOMBRES:a prComo TIPO:c prConValor CONDICION:b  tpuntoycoma{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Lista de nombres
                Nodo nd2 = (Nodo) a;
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Variables
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                parser.cont++;
                RESULT = nd;
                agregarTmpListaNombres(nd2.Valor,nd);
                :};
//Gramatica de un comentario
COMENTARIO::= tcomentario:c {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("COMENTARIO");
                nd.setIdNodo(parser.cont);
                nd.setValor(c);
                RESULT = nd;
                parser.cont++;
                //nd.pythonCode = c.toString();
                //nd.GolangCode = c.toString();
                :} ;
//Gramatica de un comentario de varias lineas
COMENTARIO_VARIAS_LINEAS::= tcomentariovariaslineas:c {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("COMENTARIO_VARIAS_LINEAS");
                nd.setIdNodo(parser.cont);
                nd.setValor(c);
                RESULT = nd;
                parser.cont++;
                //nd.pythonCode = c.toString();
                //nd.GolangCode = c.toString();
                :};                
//Gramatica de una asignacion
ASIGNACION::= tvariable:a FLECHA:c VARIABLES:b tpuntoycoma {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("ASIGNACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Variable
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("VARIABLE");
                nd1.setIdNodo(parser.cont);
                nd1.setValor(a);
                //Flecha
                Nodo nd2 = (Nodo) c;
                //Variables
                Nodo nd3 = (Nodo) b;
                //puntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("PUNTOYCOMA");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                
                nd.pythonCode = a.toString() + " = " + nd3.pythonCode ;
                nd.GolangCode = a.toString() + " = " + nd3.GolangCode;
                :}
                | LISTA_NOMBRES:b FLECHA:c VARIABLES:a tpuntoycoma {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("ASIGNACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Lista de nombres
                Nodo nd1 = (Nodo) b;
                //Flecha
                Nodo nd2 = (Nodo) c;
                //Variables
                Nodo nd3 = (Nodo) a;
                //puntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("PUNTOYCOMA");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                agregarTmpListaNombres(nd3.Valor,nd);
                :}
                | tvariable:a FLECHA:c EXPRESION:b tpuntoycoma {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("ASIGNACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Variable
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("VARIABLE");
                nd1.setIdNodo(parser.cont);
                nd1.setValor(a);
                //Flecha
                Nodo nd2 = (Nodo) c;
                //Expresion
                Nodo nd3 = (Nodo) b;
                //puntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("PUNTOYCOMA");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = a.toString() + " = " + nd3.pythonCode ;
                nd.GolangCode = a.toString() + " = " + nd3.GolangCode;
                :}
                | LISTA_NOMBRES:b FLECHA:c EXPRESION:a tpuntoycoma {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("ASIGNACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Lista de nombres
                Nodo nd1 = (Nodo) b;
                //Flecha
                Nodo nd2 = (Nodo) c;
                //Expresion
                Nodo nd3 = (Nodo) a;
                //puntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("PUNTOYCOMA");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                agregarTmpListaNombres(nd3.Valor,nd);
                :};
//Gramatica de seleccion multiple
SELECCION_MULTIPLE::= prSegun EXPRESION:a prHacer LISTA_SEGUN:b prFinSegun{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("SELECCION_MULTIPLE");
                nd.setIdNodo(parser.cont);
                nd.setValor("SELECCION_MULTIPLE");
                //prSegun 
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prSegun");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prSegun");
                //Exprersión
                Nodo nd2 = (Nodo) a;
                //prHacer
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("prHacer");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prHacer");
                //Lista de casos
                Nodo nd4 = (Nodo) b;
                //prFinSegun
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("prFinSegun");
                nd5.setIdNodo(parser.cont);
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = "if " + nd2.pythonCode + nd4.pythonCode ;
                nd.GolangCode = "switch " + nd2.GolangCode + "{\n" + nd4.GolangCode + tab(countTab - 1) + "}";
                :}

;

LISTA_SEGUN::= SEGUN:a LISTA_SEGUN:b {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("LISTA_SEGUN");
                nd.setIdNodo(parser.cont);
                nd.setValor("SEGUN");
                //Segun
                Nodo nd1 = (Nodo) a;
                //Lista Segun
                Nodo nd2 = (Nodo) b;
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = nd1.pythonCode + nd2.pythonCode;
                nd.GolangCode = tab(countTab - 1) + "case " + nd1.GolangCode + nd2.GolangCode;
                :}
        |SEGUN:a {: 
                ((Nodo) a).pythonCode = tab(countTab - 1) + "elif " + ((Nodo) a).pythonCode;
                ((Nodo) a).GolangCode = tab(countTab - 1) + "case " + ((Nodo) a).GolangCode;
                RESULT = a;:}
        ;

SEGUN::=tinterrogacioninicio EXPRESION:a tinterrogacionfin prEntonces INSTRUCCIONES:b{:
        Nodo nd = new Nodo();
        nd.setEtiqueta("SEGUN");
        nd.setIdNodo(parser.cont);
        nd.setValor("SEGUN");
        //Interrogacion inicio
        Nodo nd1 = new Nodo();
        nd1.setEtiqueta("INTERROGACION_INICIO");
        nd1.setIdNodo(parser.cont);
        nd1.setValor("tinterrogacioninicio");
        //Expresión
        Nodo nd2 = (Nodo) a;
        //Interrogacion fin
        Nodo nd3 = new Nodo();
        nd3.setEtiqueta("INTERROGACION_FIN");
        nd3.setIdNodo(parser.cont);
        nd3.setValor("tinterrogacionfin");
        //Entonces
        Nodo nd4 = new Nodo();
        nd4.setEtiqueta("ENTONCES");
        nd4.setIdNodo(parser.cont);
        nd4.setValor("prEntonces");
        //Instrucciones
        Nodo nd5 = (Nodo) b;
        //Agregando hijos
        nd.AddHijo(nd1);
        nd.AddHijo(nd2);
        nd.AddHijo(nd3);
        nd.AddHijo(nd4);
        nd.AddHijo(nd5);
        RESULT = nd;
        parser.cont++;
        nd.pythonCode = nd2.pythonCode + ":\n" + nd5.pythonCode + "\n";
        nd.GolangCode = nd2.GolangCode + ":\n" + nd5.GolangCode + "\n";
        :}
;        


LISTA_NOMBRES::= tvariable:a {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("VARIABLE");
                nd.setIdNodo(parser.cont);
                nd.setValor(a);
                parser.cont++;
                nd.pythonCode = a;
                nd.GolangCode = a;
                RESULT = nd;
                tmpListaNombres.add(a);:} LISTA_NOMBRES2 {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("LISTA_NOMBRES");
                nd.setIdNodo(parser.cont);
                nd.setValor("LISTA_NOMBRES");
                parser.cont++;
                for (int i = 0; i < tmpListaNombres.size(); i++) {
                    Nodo nd2 = new Nodo();
                    nd2.setEtiqueta("VARIABLE");
                    nd2.setIdNodo(parser.cont);
                    nd2.setValor(tmpListaNombres.get(i));
                    parser.cont++;
                    nd.AddHijo(nd2);
                }
                RESULT = nd;
                :};
LISTA_NOMBRES2::= tcoma tvariable:a {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("VARIABLE");
                nd.setIdNodo(parser.cont);
                nd.setValor(a);
                parser.cont++;
                tmpListaNombres.add(a);:} LISTA_NOMBRES2 
                |tcoma tvariable:a {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("VARIABLE");
                nd.setIdNodo(parser.cont);
                nd.setValor(a);
                parser.cont++;
                tmpListaNombres.add(a);:};

IF::= prSi CONDICION:a prEntonces INSTRUCCIONES:b prFinSi {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //Fin si
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("FIN_SI");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.pythonCode + ":\n" + nd3.pythonCode ;
                nd.GolangCode = "if " + nd1.GolangCode + "{\n" + nd3.GolangCode + tab(countTab - 1) + "}";
                :}
        |prSi CONDICION:a prEntonces INSTRUCCIONES:c O_SI:b prFinSi{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) c;
                //O si
                Nodo nd4 = (Nodo) b;
                //Fin si
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("FIN_SI");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.pythonCode + ":\n" + nd3.pythonCode + "\n" + nd4.pythonCode;
                nd.GolangCode = "if " + nd1.GolangCode + "{\n" + nd3.GolangCode + tab(countTab - 1) + "}" + nd4.GolangCode;
                :}
        |prSi CONDICION:a prEntonces INSTRUCCIONES:c DE_LO_CONTRARIO:b prFinSi{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) c;
                //De lo contrario
                Nodo nd4 = (Nodo) b;
                //Fin si
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("FIN_SI");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.pythonCode + ":\n" + nd3.pythonCode + "\n" + tab(countTab - 1) + "else:\n" + nd4.pythonCode ;
                nd.GolangCode = "if " + nd1.GolangCode + "{\n" + nd3.GolangCode + "\n" + tab(countTab - 1) + "}else {\n" + nd4.GolangCode + tab(countTab - 1) + "}";
                :}
        |prSi CONDICION:a prEntonces INSTRUCCIONES:b O_SI:c DE_LO_CONTRARIO:d prFinSi{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //O si
                Nodo nd4 = (Nodo) c;
                //De lo contrario
                Nodo nd5 = (Nodo) d;
                //Fin si
                Nodo nd6 = new Nodo();
                nd6.setEtiqueta("FIN_SI");
                nd6.setIdNodo(parser.cont);
                nd6.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.pythonCode + ":\n" + nd3.pythonCode + "\n" + nd4.pythonCode + tab(countTab - 1) + "else:\n" + nd5.pythonCode ;
                nd.GolangCode = "if " + nd1.GolangCode + "{\n" + nd3.GolangCode + tab(countTab - 1) + "}" + nd4.GolangCode + tab(countTab - 1) + "}else {\n" + nd5.GolangCode + tab(countTab - 1) + "}";
                :}
        
        
        |prSi tvariable:a prEntonces INSTRUCCIONES:b prFinSi {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Variable
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("VARIABLE");
                nd1.setIdNodo(parser.cont);
                nd1.setValor((String) a);
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //Fin si
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("FIN_SI");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.toString() + ":\n" + nd3.pythonCode ;
                nd.GolangCode = "if " + nd1.toString() + "{\n" + nd3.GolangCode + tab(countTab - 1) + "}";
                :}
        |prSi tvariable:a prEntonces INSTRUCCIONES:c O_SI:b prFinSi{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("VARIABLE");
                nd1.setIdNodo(parser.cont);
                nd1.setValor((String) a);
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) c;
                //O si
                Nodo nd4 = (Nodo) b;
                //Fin si
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("FIN_SI");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.toString() + ":\n" + nd3.pythonCode + nd4.pythonCode;
                nd.GolangCode = "if " + nd1.toString() + "{\n" + nd3.GolangCode + tab(countTab - 1) + "}" + nd4.GolangCode;
                :}
        |prSi tvariable:a prEntonces INSTRUCCIONES:c DE_LO_CONTRARIO:b prFinSi{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Variable
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("VARIABLE");
                nd1.setIdNodo(parser.cont);
                nd1.setValor((String) a);
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) c;
                //De lo contrario
                Nodo nd4 = (Nodo) b;
                //Fin si
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("FIN_SI");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if  " + nd1.toString() + ":\n" + nd3.pythonCode + "\n" + tab(countTab - 1) + "else:\n" + nd4.pythonCode ;
                nd.GolangCode = "if  " + nd1.toString() + "{\n" + nd3.GolangCode + "\n" + tab(countTab - 1) + "}else {\n" + nd4.GolangCode + tab(countTab - 1) + "}";
                :}
        |prSi tvariable:a prEntonces INSTRUCCIONES:b O_SI:c DE_LO_CONTRARIO:d prFinSi{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //variable
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("VARIABLE");
                nd1.setIdNodo(parser.cont);
                nd1.setValor((String) a);
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //O si
                Nodo nd4 = (Nodo) c;
                //De lo contrario
                Nodo nd5 = (Nodo) d;
                //Fin si
                Nodo nd6 = new Nodo();
                nd6.setEtiqueta("FIN_SI");
                nd6.setIdNodo(parser.cont);
                nd6.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.toString() + ":\n" + nd3.pythonCode + nd4.pythonCode + tab(countTab - 1) + "else:\n" + nd5.pythonCode ;
                nd.GolangCode = "if " + nd1.toString() + "{\n" + nd3.GolangCode + tab(countTab - 1) + nd4.GolangCode + tab(countTab - 1) + "}else {\n" + nd5.GolangCode + tab(countTab - 1) + "}";
                :};

DE_LO_CONTRARIO::= prDeLoContrario INSTRUCCIONES:a{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("DE_LO_CONTRARIO");
                nd.setIdNodo(parser.cont);
                nd.setValor("DE_LO_CONTRARIO");
                //Instrucciones
                Nodo nd1 = (Nodo) a;
                //Agregando hijos
                nd.AddHijo(nd1);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = nd1.pythonCode ;
                nd.GolangCode = nd1.GolangCode ;
                :};

O_SI::=  prO_Si CONDICION:a prEntonces INSTRUCCIONES:b O_SI:c{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("O_SI");
                nd.setIdNodo(parser.cont);
                nd.setValor("O_SI");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //O si
                Nodo nd4 = (Nodo) c;
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = tab(countTab - 1) + "elif " + nd1.pythonCode + ":\n"  + nd3.pythonCode + "\n" + nd4.pythonCode;
                nd.GolangCode = tab(countTab - 1) + "else if " + nd1.GolangCode + "{\n"  + nd3.GolangCode + nd4.GolangCode;
                :}
        |prO_Si  CONDICION:a prEntonces INSTRUCCIONES:b{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("O_SI");
                nd.setIdNodo(parser.cont);
                nd.setValor("O_SI");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = tab(countTab - 1) + "elif " + nd1.pythonCode + ":\n" + nd3.pythonCode ;
                nd.GolangCode = tab(countTab - 1) + "}else if " + nd1.GolangCode + "{\n" + nd3.GolangCode;
                :};

CONDICION::=   VARIABLES:a prEsIgual VARIABLES:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("==");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " == " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " == " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |VARIABLES:a prMayor VARIABLES:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor(">");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " > " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " > " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |VARIABLES:a prMayorOIgual VARIABLES:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor(">=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " >= " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " >= " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |VARIABLES:a prMenor VARIABLES:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("<");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " < " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " < " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |VARIABLES:a prMenorOIgual VARIABLES:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("<=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " <= " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " <= " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |VARIABLES:a prEsDiferente VARIABLES:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " != " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " != " + ((Nodo) b).GolangCode;
                RESULT = nd;:}


            |EXPRESION:a prEsIgual EXPRESION:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("==");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " == " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " == " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |EXPRESION:a prMayor EXPRESION:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor(">");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " > " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " > " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |EXPRESION:a prMayorOIgual EXPRESION:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor(">=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " >= " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " >= " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |EXPRESION:a prMenor EXPRESION:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("<");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " < " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " < " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |EXPRESION:a prMenorOIgual EXPRESION:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("<=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " <= " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " <= " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |EXPRESION:a prEsDiferente EXPRESION:b {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " != " + ((Nodo) b).pythonCode;
                nd.GolangCode = ((Nodo) a).GolangCode + " != " + ((Nodo) b).GolangCode;
                RESULT = nd;:}
            |prNot VARIABLES:a {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.pythonCode = "not " + ((Nodo) a).pythonCode;
                nd.GolangCode = "!(" + ((Nodo) a).GolangCode + ")";
                RESULT = nd;:}
            |prNot EXPRESION:a {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.pythonCode = "not (" + ((Nodo) a).pythonCode + ")";
                nd.GolangCode = "!(" + ((Nodo) a).GolangCode + ")"; 
                RESULT = nd;:}

            |prNot pare1 CONDICION:a pare2 {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.pythonCode = "not (" + ((Nodo) a).pythonCode + ")";
                nd.GolangCode = "!(" + ((Nodo) a).GolangCode + ")";
                RESULT = nd;:}
                |pare1 CONDICION:a pare2 {: RESULT = a;:}
                
;

VARIABLE::= tvariable:a {:RESULT = a;:};

VARIABLES::= tcadena:a {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CADENA");
                nd.setIdNodo(parser.cont); 
                nd.setValor(a.replace("\"", "").replace("\'", "").replace("\n",""));
                parser.cont++;
                nd.pythonCode = a.replace("\n","");
                nd.GolangCode = a.replace("\n","");
                RESULT = nd;:}
            |prVerdadero {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("BOOLEANO");
                nd.setIdNodo(parser.cont); 
                nd.setValor("True");
                parser.cont++;
                nd.pythonCode = "True";
                nd.GolangCode = "true";
                RESULT = nd;:}
            |prFalso {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("BOOLEANO");
                nd.setIdNodo(parser.cont); 
                nd.setValor("False");
                parser.cont++;
                nd.pythonCode = "False";
                nd.GolangCode = "false";
                RESULT = nd;:}
            |caracter:a {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CARACTER");
                nd.setIdNodo(parser.cont); 
                nd.setValor(a.replace("\"", "").replace("\'", ""));
                parser.cont++;
                nd.pythonCode = a;
                nd.GolangCode = a;
                RESULT = nd;:}
            |ascii:a {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CARACTER");
                nd.setIdNodo(parser.cont); 
                nd.setValor(asciiToChar(a));
                parser.cont++;
                nd.pythonCode = "\"" + asciiToChar(a) + "\"";
                nd.GolangCode = "\"" + asciiToChar(a) + "\"";
                RESULT = nd;:};


                 

PARA::= prPara tvariable:a FLECHA:e EXPRESION:b prHasta EXPRESION:c prHacer INSTRUCCIONES:d prFinPara {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("PARA");
                nd.setIdNodo(parser.cont);
                nd.setValor("PARA");
                parser.cont++;
                //prPara
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prPara");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prPara");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                parser.cont++;
                nd.AddHijo(nd2);
                //FLECHA
                Nodo nd3 = (Nodo) e;
                nd.AddHijo(nd3);
                //EXPRESION
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                //prHasta
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("HASTA");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("HASTA");
                parser.cont++;
                nd.AddHijo(nd5);
                //EXPRESION
                Nodo nd6 = (Nodo) c;
                nd.AddHijo(nd6);
                //prHacer
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("HACER");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("HACER");
                parser.cont++;
                nd.AddHijo(nd7);
                //INSTRUCCIONES
                Nodo nd8 = (Nodo) d;
                nd.AddHijo(nd8);
                //prFinPara
                Nodo nd9 = new Nodo();
                nd9.setEtiqueta("FINPARA");
                nd9.setIdNodo(parser.cont);
                nd9.setValor("FINPARA");
                parser.cont++;
                nd.AddHijo(nd9);
                RESULT = nd;
                nd.pythonCode = "for " + a + " in range(" + nd4.pythonCode + "," + nd6.pythonCode + "):\n" + nd8.pythonCode;
                nd.GolangCode = "for " + a + " := " + nd4.GolangCode + "; " + a + " < " + nd6.GolangCode + "; " + a + "++ {\n" + nd8.GolangCode + tab(countTab - 1) + "}";
                :}
            
            |prPara tvariable:a FLECHA:e EXPRESION:b prHasta EXPRESION:c prHacer  prFinPara {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("PARA");
                nd.setIdNodo(parser.cont);
                nd.setValor("PARA");
                parser.cont++;
                //prPara
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prPara");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prPara");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                parser.cont++;
                nd.AddHijo(nd2);
                //FLECHA
                Nodo nd3 = (Nodo) e;
                nd.AddHijo(nd3);
                //EXPRESION
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                //prHasta
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("HASTA");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("HASTA");
                parser.cont++;
                nd.AddHijo(nd5);
                //EXPRESION
                Nodo nd6 = (Nodo) c;
                nd.AddHijo(nd6);
                //Hacer
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("HACER");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("HACER");
                parser.cont++;
                nd.AddHijo(nd7);
                //prFinPara
                Nodo nd8 = new Nodo();
                nd8.setEtiqueta("FINPARA");
                nd8.setIdNodo(parser.cont);
                nd8.setValor("FINPARA");
                parser.cont++;
                nd.AddHijo(nd8);
                RESULT = nd;
                nd.pythonCode = "for " + a + " in range(" + nd4.pythonCode + "," + nd6.pythonCode + "):\n";
                nd.GolangCode = "for " + a + " := " + nd4.GolangCode + "; " + a + " < " + nd6.GolangCode + "; " + a + "++ {\n";
            :}
            |PARA_SALTO:a {:
                Nodo nd = (Nodo) a;
                RESULT = nd;
                :};

FLECHA::= trest tmayor {:
        Nodo nd = new Nodo();
        nd.setEtiqueta("FLECHA");
        nd.setIdNodo(parser.cont);
        nd.setValor("->");
        parser.cont++;
        //trest
        Nodo nd2 = new Nodo();
        nd2.setEtiqueta("trest");
        nd2.setIdNodo(parser.cont);
        nd2.setValor("-");
        parser.cont++;
        nd.AddHijo(nd2);
        //tmayor
        Nodo nd3 = new Nodo();
        nd3.setEtiqueta("tmayor");
        nd3.setIdNodo(parser.cont);
        nd3.setValor(">");
        parser.cont++;
        nd.AddHijo(nd3);
        RESULT = nd;
        :};

PARA_SALTO::= prPara tvariable:a FLECHA:b EXPRESION:c prHasta EXPRESION:d prCon prIncremental EXPRESION:e prHacer INSTRUCCIONES:f prFinPara{:
                        Nodo nd = new Nodo();
                        nd.setEtiqueta("PARA_SALTO");
                        nd.setIdNodo(parser.cont);
                        nd.setValor("PARA_SALTO");
                        parser.cont++;
                        //prPara
                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta("prPara");
                        nd1.setIdNodo(parser.cont);
                        nd1.setValor("prPara");
                        parser.cont++;
                        nd.AddHijo(nd1);
                        //tvariable
                        Nodo nd2 = new Nodo();
                        nd2.setEtiqueta("VARIABLE");
                        nd2.setIdNodo(parser.cont);
                        nd2.setValor(a);
                        parser.cont++;
                        nd.AddHijo(nd2);
                        //FLECHA
                        Nodo nd3 = (Nodo) b;
                        nd.AddHijo(nd3);
                        //EXPRESION
                        Nodo nd4 = (Nodo) c;
                        nd.AddHijo(nd4);
                        //prHasta
                        Nodo nd5 = new Nodo();
                        nd5.setEtiqueta("HASTA");
                        nd5.setIdNodo(parser.cont);
                        nd5.setValor("HASTA");
                        parser.cont++;
                        nd.AddHijo(nd5);
                        //EXPRESION
                        Nodo nd6 = (Nodo) d;
                        nd.AddHijo(nd6);
                        //prCon
                        Nodo nd7 = new Nodo();
                        nd7.setEtiqueta("CON");
                        nd7.setIdNodo(parser.cont);
                        nd7.setValor("CON");
                        parser.cont++;
                        nd.AddHijo(nd7);
                        //prIncremental
                        Nodo nd8 = new Nodo();
                        nd8.setEtiqueta("INCREMENTAL");
                        nd8.setIdNodo(parser.cont);
                        nd8.setValor("INCREMENTAL");
                        parser.cont++;
                        nd.AddHijo(nd8);
                        //EXPRESION
                        Nodo nd9 = (Nodo) e;
                        nd.AddHijo(nd9);
                        //prHacer
                        Nodo nd10 = new Nodo();
                        nd10.setEtiqueta("HACER");
                        nd10.setIdNodo(parser.cont);
                        nd10.setValor("HACER");
                        parser.cont++;
                        nd.AddHijo(nd10);
                        //INSTRUCCIONES
                        Nodo nd11 = (Nodo) f;
                        nd.AddHijo(nd11);
                        //prFinPara
                        Nodo nd12 = new Nodo();
                        nd12.setEtiqueta("FINPARA");
                        nd12.setIdNodo(parser.cont);
                        nd12.setValor("FINPARA");
                        parser.cont++;
                        nd.AddHijo(nd12);
                        RESULT = nd;
                        nd.pythonCode = "for " + a + " in range(" + nd4.pythonCode + "," + nd6.pythonCode + "," + nd9.pythonCode + "):\n" + nd11.pythonCode;
                        nd.GolangCode = "for " + a + " := " + nd4.GolangCode + "; " + a + " < " + nd6.GolangCode + "; " + a + " += " + nd9.GolangCode + " {\n" + nd11.GolangCode + tab(countTab - 1) + "}";
                        :};

MIENTRAS::= prMientras CONDICION:a prHacer INSTRUCCIONES:b prFinMientras{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("MIENTRAS");
                nd.setIdNodo(parser.cont);
                nd.setValor("MIENTRAS");
                parser.cont++;
                //prMientras
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prMientras");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prMientras");
                parser.cont++;
                nd.AddHijo(nd1);
                //CONDICION
                Nodo nd2 = (Nodo) a;
                nd.AddHijo(nd2);
                //prHacer
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("HACER");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("HACER");
                parser.cont++;
                nd.AddHijo(nd3);
                //INSTRUCCIONES
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                //prFinMientras
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("FINMIENTRAS");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("FINMIENTRAS");
                parser.cont++;
                nd.AddHijo(nd5);
                RESULT = nd;
                nd.pythonCode = "while "  + nd2.pythonCode + ":\n" + nd4.pythonCode;
                nd.GolangCode = "for true {\n" + tab(countTab + 1) + "if !(" + nd2.GolangCode + "){\n" + tab(countTab + 2) + "break\n" + tab(countTab + 1) + "}\n" + nd4.GolangCode + tab(countTab -1) + "}\n";
                :}
                ;


REPETIR::= prRepetir INSTRUCCION:a prHastaQue CONDICION:b {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("REPETIR");
                nd.setIdNodo(parser.cont);
                nd.setValor("REPETIR");
                parser.cont++;
                //prRepetir
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prRepetir");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prRepetir");
                parser.cont++;
                nd.AddHijo(nd1);
                //INSTRUCCION
                Nodo nd2 = (Nodo) a;
                nd.AddHijo(nd2);
                //prHasta
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("HASTA_QUE");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("HASTA_QUE");
                parser.cont++;
                nd.AddHijo(nd3);
                //CONDICION
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                RESULT = nd;
                nd.pythonCode = "while True:\n"  + nd2.pythonCode  + "if " + nd4.pythonCode + ":\n" + tab(countTab + 2)  + "break";
                        :}
        |prRepetir prHastaQue CONDICION:a {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("REPETIR");
                nd.setIdNodo(parser.cont);
                nd.setValor("REPETIR");
                parser.cont++;
                //prRepetir
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prRepetir");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prRepetir");
                parser.cont++;
                nd.AddHijo(nd1);
                //prHasta
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("HASTA_QUE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("HASTA_QUE");
                parser.cont++;
                nd.AddHijo(nd2);
                //CONDICION
                Nodo nd3 = (Nodo) a;
                nd.AddHijo(nd3);
                RESULT = nd;
                nd.pythonCode = "while True:\n"  + "if " + nd3.pythonCode + ":\n"   + "break";
                :}
                        ;




RETORNO::= prRetornar CONDICION:a tpuntoycoma{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("RETORNO");
                nd.setIdNodo(parser.cont);
                nd.setValor("RETORNO");
                parser.cont++;
                //prRetornar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prRetornar");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prRetornar");
                parser.cont++;
                nd.AddHijo(nd1);
                //CONDICION
                Nodo nd2 = (Nodo) a;
                nd.AddHijo(nd2);
                //tpuntoycoma
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("tpuntoycoma");
                nd3.setIdNodo(parser.cont);
                nd3.setValor(";");
                parser.cont++;
                nd.AddHijo(nd3);
                RESULT = nd;
                nd.pythonCode = tab(countTab + 1) + "return " + nd2.pythonCode;
                nd.GolangCode = tab(countTab + 1) + "return " + nd2.GolangCode;
                :}
        |prRetornar EXPRESION:a tpuntoycoma{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("RETORNO");
                nd.setIdNodo(parser.cont);
                nd.setValor("RETORNO");
                parser.cont++;
                //prRetornar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prRetornar");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prRetornar");
                parser.cont++;
                nd.AddHijo(nd1);
                //EXPRESION
                Nodo nd2 = (Nodo) a;
                nd.AddHijo(nd2);
                //tpuntoycoma
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("tpuntoycoma");
                nd3.setIdNodo(parser.cont);
                nd3.setValor(";");
                parser.cont++;
                nd.AddHijo(nd3);
                RESULT = nd;
                nd.pythonCode = "return " + nd2.pythonCode;
                nd.GolangCode = "return " + nd2.GolangCode;
                :}
                ;

METODO::= prMetodo tvariable:a prConParametros pare1 LISTA_PARAMETROS:b pare2 INSTRUCCIONES:c prFinMetodo {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("METODO");
                nd.setIdNodo(parser.cont);
                nd.setValor("METODO");
                parser.cont++;
                //prMetodo
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prMetodo");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prMetodo");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //prConParametros
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("prConParametros");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prConParametros");
                parser.cont++;
                nd.AddHijo(nd3);
                //LISTA_PARAMETROS
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                //INSTRUCCIONES
                Nodo nd5 = (Nodo) c;
                nd.AddHijo(nd5);
                //prFinMetodo
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("prFinMetodo");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("prFinMetodo");
                parser.cont++;
                nd.AddHijo(nd7);
                nd.pythonCode = "def " + a.toString() + "(" + nd4.pythonCode + "):\n" + nd5.pythonCode;
                nd.GolangCode = "func " + a.toString() + "(" + nd4.GolangCode + "){\n" + nd5.GolangCode + tab(countTab - 1) +  "}";
                RESULT = nd;
                :}
                |prMetodo tvariable:a INSTRUCCIONES:b prFinMetodo {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("METODO");
                nd.setIdNodo(parser.cont);
                nd.setValor("METODO");
                parser.cont++;
                //prMetodo
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prMetodo");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prMetodo");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //INSTRUCCIONES
                Nodo nd3 = (Nodo) b;
                nd.AddHijo(nd3);
                //prFinMetodo
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("prFinMetodo");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("prFinMetodo");
                parser.cont++;
                nd.AddHijo(nd4);
                RESULT = nd;
                nd.pythonCode = "def " + a.toString() + "():\n" + nd3.pythonCode;
                nd.GolangCode = "func " + a.toString() + "(){\n" + nd3.GolangCode + tab(countTab - 1) + "}";
                :};

LISTA_PARAMETROS::= LISTA_PARAMETROS:c tvariable:a TIPO:b  {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("LISTA_PARAMETROS");
                nd.setIdNodo(parser.cont);
                nd.setValor("LISTA_PARAMETROS");
                parser.cont++;
                //LISTA_PARAMETROS
                Nodo nd4 = (Nodo) c;
                nd.AddHijo(nd4);
                //PARAMETRO
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("PARAMETRO");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("PARAMETRO");
                parser.cont++;
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd1.AddHijo(nd2);
                //TIPO
                Nodo nd5 = (Nodo) b;
                nd1.AddHijo(nd5);
                nd.AddHijo(nd1);
                nd.pythonCode = nd4.pythonCode + nd5.pythonCode + a.toString();
                nd.GolangCode = nd4.GolangCode + a.toString() + nd5.GolangCode;
                RESULT = nd;
                :}

                |tvariable:a TIPO:b tcoma  {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("PARAMETRO");
                nd.setIdNodo(parser.cont);
                nd.setValor("PARAMETRO");
                parser.cont++;
                //tvariable
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("tvariable");
                nd1.setIdNodo(parser.cont);
                nd1.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd1);
                //TIPO
                Nodo nd2 = (Nodo) b;
                nd.AddHijo(nd2);
                //tcoma
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("tcoma");
                nd3.setIdNodo(parser.cont);
                nd3.setValor(",");
                parser.cont++;
                nd.AddHijo(nd3);
                nd.pythonCode = nd2.pythonCode + a.toString() + ",";
                nd.GolangCode = a.toString() + nd2.GolangCode + ",";
                RESULT = nd;
                :};


FUNCION::= prFuncion tvariable:a TIPO:d prConParametros pare1 LISTA_PARAMETROS:b pare2 INSTRUCCIONES:c prFinFuncion {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("FUNCION");
                nd.setIdNodo(parser.cont);
                nd.setValor("FUNCION");
                parser.cont++;
                //prFuncion
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prFuncion");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prFuncion");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //TIPO
                Nodo nd3 = (Nodo) d;
                nd.AddHijo(nd3);
                //prConParametros
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("prConParametros");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("prConParametros");
                parser.cont++;
                nd.AddHijo(nd4);
                //LISTA_PARAMETROS
                Nodo nd5 = (Nodo) b;
                nd.AddHijo(nd5);
                //INSTRUCCIONES
                Nodo nd6 = (Nodo) c;
                nd.AddHijo(nd6);
                //prFinFuncion
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("prFinFuncion");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("prFinFuncion");
                parser.cont++;
                nd.AddHijo(nd7);
                RESULT = nd;
                nd.pythonCode = "def " + nd2.Valor + "(" + nd5.pythonCode + "):\n" + nd6.pythonCode;
                nd.GolangCode = "func " + nd2.Valor + "(" + nd5.GolangCode + ") " + nd3.GolangCode + "{\n" + nd6.GolangCode + tab(countTab - 1) + "}";
                :}
        |prFuncion tvariable:a TIPO:b INSTRUCCIONES:c prFinFuncion {:
                Nodo nd = new Nodo();
                nd.setEtiqueta("FUNCION");
                nd.setIdNodo(parser.cont);
                nd.setValor("FUNCION");
                parser.cont++;
                //prFuncion
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prFuncion");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prFuncion");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //TIPO
                Nodo nd3 = (Nodo) b;
                nd.AddHijo(nd3);
                //INSTRUCCIONES
                Nodo nd4 = (Nodo) c;
                nd.AddHijo(nd4);
                //prFinFuncion
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("prFinFuncion");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prFinFuncion");
                parser.cont++;
                nd.AddHijo(nd5);
                RESULT = nd;
                nd.pythonCode = "def " + nd2.Valor + "():\n" + nd4.pythonCode;
                nd.GolangCode = "func " + nd2.Valor + "() " + nd3.GolangCode + "{\n" + nd4.GolangCode + tab(countTab - 1) + "}";
                :};

EJECUTAR::= prEjecutar tvariable:a pare1 pare2 tpuntoycoma{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("EJECUTAR");
                nd.setIdNodo(parser.cont);
                nd.setValor("EJECUTAR");
                parser.cont++;
                //prEjecutar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prEjecutar");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prEjecutar");
                parser.cont++;        
                nd.AddHijo(nd1);
                //VARIABLE
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //tpuntoycoma
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("tpuntoycoma");
                nd3.setIdNodo(parser.cont);
                nd3.setValor(";");
                parser.cont++;
                nd.AddHijo(nd3);
                RESULT = nd;
                nd.pythonCode = a.toString() + "()";
                nd.GolangCode = a.toString() + "()";
                        :}
        |prEjecutar tvariable:a pare1 LISTA_PARAMETROS:b pare2 tpuntoycoma{:
                Nodo nd = new Nodo();
                nd.setEtiqueta("EJECUTAR");
                nd.setIdNodo(parser.cont);
                nd.setValor("EJECUTAR");
                parser.cont++;
                //prEjecutar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prEjecutar");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prEjecutar");
                parser.cont++;
                nd.AddHijo(nd1);
                //VARIABLE
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //LISTA_PARAMETROS
                Nodo nd3 = (Nodo) b;
                nd.AddHijo(nd3);
                //tpuntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("tpuntoycoma");
                nd4.setIdNodo(parser.cont);
                nd4.setValor(";");
                parser.cont++;
                nd.AddHijo(nd4);
                RESULT = nd;
                nd.pythonCode = a.toString() + "(" + nd3.pythonCode + ");";
                nd.GolangCode = a.toString() + "(" + nd3.GolangCode + ")";
                :};

IMPRIMIR::= prImprimir VARIABLES:a tpuntoycoma{:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                nd.GolangCode = "fmt.Print(" + ((Nodo) a).GolangCode + ")";
                fmtGo = true;
                :}
            |prImprimir pare1 VARIABLES:a pare2 tpuntoycoma{:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                nd.GolangCode = "fmt.Print(" + ((Nodo) a).GolangCode + ")";
                fmtGo = true;
                :}


                |prImprimir EXPRESION:a tpuntoycoma {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                nd.GolangCode = "fmt.Print(" + ((Nodo) a).GolangCode + ")";
                fmtGo = true;
                RESULT = nd;:}
                |prImprimir pare1 EXPRESION:a pare2 tpuntoycoma {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                nd.GolangCode = "fmt.Print(" + ((Nodo) a).GolangCode + ")";
                fmtGo = true;
                :}
                
                |prImprimir CONDICION:a tpuntoycoma {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                nd.GolangCode = "fmt.Print(" + ((Nodo) a).GolangCode + ")";
                fmtGo = true;
                :}
                |prImprimir pare1 CONDICION:a pare2 tpuntoycoma {:
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                nd.GolangCode = "fmt.Print(" + ((Nodo) a).GolangCode + ")";
                fmtGo = true;
                :};

IMPRIMIR_NL::= prImprimirNl VARIABLES:a tpuntoycoma {:
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                        nd.GolangCode = "fmt.Println(" + ((Nodo) a).GolangCode + ")";
                        fmtGo = true;
                        :}

                |prImprimirNl pare1 VARIABLES:a pare2 tpuntoycoma {:
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                        nd.GolangCode = "fmt.Println(" + ((Nodo) a).GolangCode + ")";
                        fmtGo = true;
                        :}


                |prImprimirNl EXPRESION:a tpuntoycoma {:
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                        nd.GolangCode = "fmt.Println(" + ((Nodo) a).GolangCode + ")";
                        fmtGo = true;
                        :}
                |prImprimirNl pare1 EXPRESION:a pare2 tpuntoycoma {:
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                        nd.GolangCode = "fmt.Println(" + ((Nodo) a).GolangCode + ")";
                        fmtGo = true;
                        :}
                
                |prImprimirNl CONDICION:a tpuntoycoma {:
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                        nd.GolangCode = "fmt.Println(" + ((Nodo) a).GolangCode + ")";
                        fmtGo = true;
                        :}
                |prImprimirNl pare1 CONDICION:a pare2 tpuntoycoma {:
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                        nd.GolangCode = "fmt.Println(" + ((Nodo) a).GolangCode + ")";
                        fmtGo = true;
                        :};
