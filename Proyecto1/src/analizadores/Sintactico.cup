package analizadores;
import java_cup.runtime.Symbol;
import java.util.ArrayList;


parser code 
{:
    boolean cambiar = true;
    int cont = 0;
    public String python = "";
    public String golang = "";
    public int erroresSintacticos = 0;
    String condicion = "";
    String instruccion = "";
    String tmpInstruccion = "";
    String valor = "";
    String tmpPython = "";
    String tmpImprimir = "";
    ArrayList<String> tmpListaNombres = new ArrayList<String>();
    ArrayList<String> tmpOperacion = new ArrayList<String>();
    ArrayList<String> tmpOperadorLista = new ArrayList<String>();
    public void syntax_error(Symbol s){ 
        erroresSintacticos++;
        //Imprimir error
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    
    public void agregarTmpListaNombres(String a){


        for(String i: tmpListaNombres){
                python += i + " = " + a + ";\n";
        }; 
        
        
        tmpListaNombres = new ArrayList<String>();
    }

    public void agregarTmpOperacionLista(String a){
        tmpOperacion.add( "(" + a + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

    }

    public void agregarTmpOperacionLista2(){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 2) + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        tmpOperacion.remove(tmpOperacion.size() - 2);
    }

    public void agregarTmpOperacionLista3(){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")" +
         tmpOperadorLista.get(tmpOperadorLista.size() - 1) + "(" + a + ")" 
        ); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

    }

    public void agregarTmpOperacion(String a, String b){
        tmpOperacion.add(a + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + b); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
    }
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 

terminal String tnum;
terminal String trest,tsum,tdiv,tmul,tpot,tmod, pare1, pare2, prInicio,prFin,
        tinterrogacioninicio,tinterrogacionfin,tcoma,tmayor, tcomentario, tcomentariovariaslineas,
        tpuntoycoma,prIngresar,prComo,prConValor,prSi,prEntonces,prFinSi,prO_Si,prDE_LO_CONTRARIO,prSegun,prHacer,prPara,
        prHasta,prFinPara,prCon,prIncremental,prMientras,prFinMientras,prRepetir,prHastaQue,prRetornar,prMetodo,
        prFinMetodo,prConParametros,prFuncion,prFinFuncion,prEjecutar,prImprimir,prImprimirNl,tigual,tvariable,tcadena,
        prFinSegun,prDeLoContrario,palabra, prBoolean,prCaracter,prNumero,prCadena,prVerdadero,prFalso,
        prEsIgual,prEsDiferente,prMayor,prFloat,prMenor,prMayorOIgual,prMenorOIgual,caracter,cor1,cor2;           


non terminal INICIO;
non terminal String CONDICION;
non terminal String INSTRUCCIONES;
non terminal String INSTRUCCIONES_CICLO;
non terminal String INSTRUCCION;
non terminal String IF;
non terminal String VALOR;
non terminal String LISTA_NOMBRES;
non terminal String LISTA_NOMBRES2;
non terminal String VARIABLE;
non terminal String DECLARACION;
non terminal String COMENTARIO;
non terminal String COMENTARIO_VARIAS_LINEAS;
non terminal String E;
non terminal String ASIGNACION;
non terminal String DE_LO_CONTRARIO;
non terminal String EXPRESION;
non terminal String O_SI;
non terminal String SELECCION_MULTIPLE;
non terminal String SEGUN;
non terminal String FLECHA;
non terminal String PARA;
non terminal String PARA_SALTO;
non terminal String MIENTRAS;
non terminal String REPETIR;
non terminal String RETORNO;
non terminal String METODO;
non terminal String LISTA_PARAMETROS;
non terminal String FUNCION;
non terminal String EJECUTAR;
non terminal String IMPRIMIR;
non terminal String IMPRIMIR_NL;
non terminal String TIPO;
non terminal String OPERACION;
non terminal String OPERACIONES;
non terminal String OPERADORES;

precedence left tsum, trest;
precedence left tdiv, tmul;
precedence left tmod, tpot;

start with INICIO;

INICIO::= prInicio E prFin;

E::=    DECLARACION E
        | {:tmpPython += "if ";:} IF {:System.out.println("Se realizo un if");:} E
        |COMENTARIO {:System.out.println("Se realizo un comentar");:} E
        |COMENTARIO_VARIAS_LINEAS {:System.out.println("Se realizo un comentarioVariasLineas");:} E
        |ASIGNACION {:System.out.println("Se realizo un asignacion");:} E
        |SELECCION_MULTIPLE {:System.out.println("Se realizo un seleccionMultiple");:} E
        |PARA {:System.out.println("Se realizo un para");:} E
        |PARA_SALTO {:System.out.println("Se realizo un paraSalto");:} E
        |MIENTRAS {:System.out.println("Se realizo un mientras");:} E
        |REPETIR {:System.out.println("Se realizo un repetir");:} E
        |RETORNO {:System.out.println("Se realizo un retorno");:}E
        |METODO {:System.out.println("Se realizo un metodo");:}E
        |FUNCION {:System.out.println("Se realizo un funcion");:}E
        |EJECUTAR {:System.out.println("Se realizo un ejecutar");:}E
        |IMPRIMIR E 
        |IMPRIMIR_NL E {:tmpInstruccion += tmpImprimir; tmpImprimir = "";:}
        |OPERACION {:System.out.println("Se realizo una operacion");:} E
        |error {:tmpPython = "";:} E
        |;

OPERACIONES::= OPERACION OPERACIONES 
                | OPERACION;

OPERACION::=    tnum:a OPERADORES tnum:b {:agregarTmpOperacion(a,b);:}
                |tvariable:a OPERADORES tvariable:b {:agregarTmpOperacion(a,b);:}
                |tnum:a OPERADORES tvariable:b {:agregarTmpOperacion(a,b); :}
                |tvariable:a OPERADORES tnum:b {:agregarTmpOperacion(a,b);:}

                |tnum:a OPERADORES tnum:b OPERADORES OPERACION{:agregarTmpOperacion(a,b);agregarTmpOperacionLista(tmpOperacion.get(tmpOperacion.size() - 2));:}
                |tvariable:a OPERADORES tvariable:b OPERADORES OPERACION{:agregarTmpOperacion(a,b);agregarTmpOperacionLista(tmpOperacion.get(tmpOperacion.size() - 2));:}
                |tnum:a OPERADORES tvariable:b OPERADORES OPERACION{:agregarTmpOperacion(a,b);agregarTmpOperacionLista(tmpOperacion.get(tmpOperacion.size() - 2));:}
                |tvariable:a OPERADORES tnum:b OPERADORES OPERACION{:agregarTmpOperacion(a,b);agregarTmpOperacionLista(tmpOperacion.get(tmpOperacion.size() - 2));:}

                |tvariable:a tpot cor1 tvariable:b cor2 {:tmpOperacion.add(a + "**" + b);:}
                |tnum:a tpot cor1 tvariable:b cor2 {:tmpOperacion.add(a + "**" + b); :} 
                |tvariable:a tpot cor1 tnum:b cor2 {:tmpOperacion.add(a + "**" + b);:}
                |tnum:a tpot cor1 tnum:b cor2 {:tmpOperacion.add(a + "**" + b);:}
                
                |tnum:a OPERADORES pare1 OPERACIONES pare2 {:agregarTmpOperacionLista(a);:}
                |tvariable:a OPERADORES pare1 OPERACIONES pare2 {:agregarTmpOperacionLista(a);:}
                |pare1 OPERACIONES pare2 OPERADORES tnum:a {:agregarTmpOperacionLista3();:}
                |pare1 OPERACIONES pare2 OPERADORES tvariable:a {:agregarTmpOperacionLista3();:}
                |pare1 OPERACIONES pare2 OPERADORES pare1 OPERACIONES pare2 {:agregarTmpOperacionLista2();:};

OPERADORES::= tsum {: tmpOperadorLista.add("+");:}
            | trest {: tmpOperadorLista.add("-");:}
            | tdiv {: tmpOperadorLista.add("/");:}
            | tmul {:tmpOperadorLista.add("*");:}
            | tmod {:tmpOperadorLista.add("%");:};

TIPO::=prBoolean
        |prCaracter
        |prNumero
        |prCadena;

DECLARACION::= prIngresar tvariable:a prComo TIPO prConValor tcadena:b tpuntoycoma {:python += a + " = " + b + "\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor tnum:b tpuntoycoma {:python += a + " = " + b + "\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor trest tnum:b tpuntoycoma {:python += a + " = -" + b + "\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor tsum tnum:b tpuntoycoma {:python += a + " = +" + b + "\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor prFalso:b tpuntoycoma {:python += a + " = False\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor prVerdadero:b tpuntoycoma {:python += a + " = True\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor tvariable:b tpuntoycoma {:python += a + " = " + b + "\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor prFloat:b tpuntoycoma {:python += a + " = " + b + "\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor trest prFloat:b tpuntoycoma {:python += a + " = -" + b + "\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor tsum prFloat:b tpuntoycoma {:python += a + " = +" + b + "\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor caracter:b tpuntoycoma {:python += a + " = " + b + "\n";:}
                |prIngresar tvariable:a prComo TIPO prConValor OPERACION tpuntoycoma 
                {:
                        
                        python += a + " = " + tmpOperacion.get(tmpOperacion.size() - 1) + "\n";
                        
                        tmpOperacion = new ArrayList<String>();
                        tmpListaNombres = new ArrayList<String>();
                        cambiar = true; 
                :}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor tnum:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor trest tnum:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = -" + a + ";\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor tsum tnum:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = +" + a + ";\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor tvariable:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor tcadena:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor caracter:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor prFloat:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor prVerdadero:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = True;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor prFalso:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = False;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor trest prFloat:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = -" + a + ";\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor tsum prFloat:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = +" + a + ";\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor OPERACION tpuntoycoma 
                {:agregarTmpListaNombres(tmpOperacion.get(tmpOperacion.size() - 1));
                        tmpOperacion = new ArrayList<String>();
                        tmpListaNombres = new ArrayList<String>(); 
                :};
//Gramatica de un comentario
COMENTARIO::= tcomentario:c {:python +=c.replace("//","#")+"\n";:} ;
//Gramatica de un comentario de varias lineas
COMENTARIO_VARIAS_LINEAS::= tcomentariovariaslineas:c {:python += c.replace("/*","'''").replace("*/","'''") + "\n";:};                
//Gramatica de una asignacion
ASIGNACION::= tvariable:a FLECHA tcadena:b tpuntoycoma {:python += a + " = " + b + ";\n";:}
                | tvariable:a FLECHA tnum:b tpuntoycoma {:python += a + " = " + b + ";\n";:}
                | tvariable:a FLECHA tvariable:b tpuntoycoma {:python += a + " = " + b + ";\n";:} 
                | tvariable:a FLECHA prFloat:b tpuntoycoma {:python += a + " = " + b + ";\n";:} 
                | tvariable:a FLECHA prVerdadero:b tpuntoycoma {:python += a+" = True;\n";:}
                | tvariable:a FLECHA prFalso:b tpuntoycoma {:python += a+" = False;\n";:}
                | tvariable:a FLECHA caracter:b tpuntoycoma {:python += a + " = " + b + ";\n";:}
                | LISTA_NOMBRES FLECHA tcadena:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                | LISTA_NOMBRES FLECHA tnum:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                | LISTA_NOMBRES FLECHA tvariable:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                | LISTA_NOMBRES FLECHA prFloat:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                | LISTA_NOMBRES FLECHA prVerdadero:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = True;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                | LISTA_NOMBRES FLECHA prFalso:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = False;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                | LISTA_NOMBRES FLECHA caracter:a tpuntoycoma {:agregarTmpListaNombres(a);:};
//Gramatica de seleccion multiple
SELECCION_MULTIPLE::= prSegun SEGUN prFinSegun;

SEGUN::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES SEGUN
        |tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES;

VALOR::= tvariable:a {:valor = a;:} |tcadena:b {:valor = b;:};

LISTA_NOMBRES::= tvariable:a {:tmpListaNombres.add(a);:} LISTA_NOMBRES2
                |;
LISTA_NOMBRES2::= tcoma tvariable:a {:tmpListaNombres.add(a);:} LISTA_NOMBRES2
                |tcoma tvariable:a {:tmpListaNombres.add(a);:};

IF::= prSi  CONDICION prEntonces  E {:tmpPython += tmpInstruccion;:} prFinSi {:python += tmpPython + "\n"; tmpPython = "";:}
        |prSi CONDICION prEntonces E O_SI prFinSi
        |prSi CONDICION prEntonces E DE_LO_CONTRARIO prFinSi
        |prSi CONDICION prEntonces E O_SI DE_LO_CONTRARIO prFinSi;

DE_LO_CONTRARIO::= prDE_LO_CONTRARIO E DE_LO_CONTRARIO|prDE_LO_CONTRARIO E;

O_SI::= prO_Si CONDICION prEntonces E O_SI|prO_Si CONDICION prEntonces E;

CONDICION::= tvariable:a tigual:b tigual:c tvariable:d {:condicion = a + b +c +d ; tmpPython += condicion + ":\n\t";:} |
            tvariable:a tigual:b tigual:c tcadena:d {:condicion = a + b +c +d ;:} |
            tvariable:a tigual:b tigual:c tnum:d {:condicion = a + b +c +d ;:} ;

VARIABLE::= tvariable;

INSTRUCCIONES::=  INSTRUCCION tpuntoycoma INSTRUCCIONES
                 |INSTRUCCION tpuntoycoma;
                 
INSTRUCCIONES_CICLO::= INSTRUCCIONES_CICLO INSTRUCCION tpuntoycoma
                       |INSTRUCCION tpuntoycoma
                       ;
INSTRUCCION::= VARIABLE tigual VALOR;

PARA::= prPara VARIABLE FLECHA tnum prHasta tnum prHacer INSTRUCCIONES_CICLO prFinPara;

FLECHA::= trest tmayor;

PARA_SALTO::= prPara VARIABLE FLECHA tnum prHasta tnum prCon prIncremental tnum prHacer INSTRUCCIONES_CICLO prFinPara;

MIENTRAS::= prMientras CONDICION prHacer INSTRUCCIONES_CICLO prFinMientras;

REPETIR::= prRepetir INSTRUCCIONES_CICLO prHasta CONDICION;

RETORNO::= prRetornar VALOR;

METODO::= prMetodo VARIABLE prConParametros LISTA_PARAMETROS prConValor VALOR prFinMetodo
                |prMetodo VARIABLE INSTRUCCIONES prFinMetodo;

LISTA_PARAMETROS::= VARIABLE tcadena LISTA_PARAMETROS|VARIABLE tcadena tcoma LISTA_PARAMETROS;


FUNCION::= prFuncion VARIABLE tcadena prConParametros LISTA_PARAMETROS INSTRUCCIONES prFinFuncion
                |prFuncion VARIABLE tcadena INSTRUCCIONES prFinFuncion;

EJECUTAR::= prEjecutar VARIABLE pare1 pare2 tpuntoycoma|prEjecutar VARIABLE pare1 LISTA_PARAMETROS pare2 tpuntoycoma;

IMPRIMIR::= prImprimir VALOR tpuntoycoma;

IMPRIMIR_NL::= prImprimirNl VALOR tpuntoycoma {:tmpImprimir = "println(" + valor + ")";:};