package analizadores;
import java_cup.runtime.Symbol;
import java.util.ArrayList;


parser code 
{:
    boolean cambiar = true;
    int countTab = 1;
    int tmpCountTab = 0;
    int cont = 0;
    public String python = "";
    public String golang = "";
    public int erroresSintacticos = 0;
    String condicion = "";
    String instruccion = "";
    String tmpInstruccion = "";
    String valor = "";
    String tmpPython = "";
    String tmpImprimir = "";
    String tmpImprimirnl = "";
    Boolean osiBool = false;
    ArrayList<String> variables = new ArrayList<String>();
    ArrayList<String> condiciones = new ArrayList<String>();
    ArrayList<String> tmpListaNombres = new ArrayList<String>();
    ArrayList<String> tmpOperacion = new ArrayList<String>();
    ArrayList<String> tmpOperadorLista = new ArrayList<String>();
    ArrayList<String> pythonArray = new ArrayList<String>();
    ArrayList<String> tmpPythonArray = new ArrayList<String>();
    ArrayList<String> tmpPython2 = new ArrayList<String>();
    public void syntax_error(Symbol s){ 
        erroresSintacticos++;
        //Imprimir error
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    //Repet tab
        public String tab(int n){
                String tab = "";
                for(int i = 0; i < n; i++){
                tab += "\t";
                }
                return tab;
        }
    //ASCII to char
        public String asciiToChar(String ascii){
                ascii = ascii.replace("{", "");
                ascii = ascii.replace("}", "");
                ascii = ascii.replace("$", "");
                ascii = ascii.replace("'", "");
                System.out.println(ascii);
                String[] asciiArray = ascii.split(",");
                String charValue = "";
                for(int i = 0; i < asciiArray.length; i++){
                charValue += (char)Integer.parseInt(asciiArray[i]);
                }
                return "'" + charValue + "'";
        }
    public void agregarTmpListaNombres(String a){


        for(String i: tmpListaNombres){
                python += i + " = " + a + ";\n";
                pythonArray.add(i + " = " + a + ";\n");
        }; 
        
        
        tmpListaNombres = new ArrayList<String>();
    }

    public void agregarTmpOperacionLista(String a){
        tmpOperacion.add( "(" + a + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

    }

    public void agregarTmpOperacionLista2(){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 2) + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        tmpOperacion.remove(tmpOperacion.size() - 2);
    }

    public void agregarTmpOperacionLista3(String a){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")" +
         tmpOperadorLista.get(tmpOperadorLista.size() - 1) + "(" + a + ")" 
        ); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

    }

    public void agregarTmpOperacion(String a, String b){
        tmpOperacion.add(a + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + b); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
    }
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 

terminal String tnum;
terminal String trest,tsum,tdiv,tmul,tpot,tmod, pare1, pare2, prInicio,prFin,
        tinterrogacioninicio,tinterrogacionfin,tcoma,tmayor, tcomentario, tcomentariovariaslineas,
        tpuntoycoma,prIngresar,prComo,prConValor,prSi,prEntonces,prFinSi,prO_Si,prDeLoContrario,prSegun,prHacer,prPara,
        prHasta,prFinPara,prCon,prIncremental,prMientras,prFinMientras,prRepetir,prHastaQue,prRetornar,prMetodo,
        prFinMetodo,prConParametros,prFuncion,prFinFuncion,prEjecutar,prImprimir,prImprimirNl,tigual,tvariable,tcadena,
        prFinSegun,palabra, prBoolean,prCaracter,prNumero,prCadena,prVerdadero,prFalso,
        prEsIgual,prEsDiferente,prMayor,prFloat,prMenor,prMayorOIgual,prMenorOIgual,caracter,cor1,cor2,ascii,prNot;           


non terminal INICIO;
non terminal String CONDICION;
non terminal String INSTRUCCIONES;
non terminal String INSTRUCCIONES_CICLO;
non terminal String INSTRUCCION;
non terminal String IF;
non terminal String VALOR;
non terminal String LISTA_NOMBRES;
non terminal String LISTA_NOMBRES2;
non terminal String VARIABLE;
non terminal String DECLARACION;
non terminal String COMENTARIO;
non terminal String COMENTARIO_VARIAS_LINEAS;
non terminal String E;
non terminal String ASIGNACION;
non terminal String DE_LO_CONTRARIO;
non terminal String EXPRESION;
non terminal String O_SI;
non terminal String SELECCION_MULTIPLE;
non terminal String SEGUN;
non terminal String FLECHA;
non terminal String PARA;
non terminal String PARA_SALTO;
non terminal String MIENTRAS;
non terminal String REPETIR;
non terminal String RETORNO;
non terminal String METODO;
non terminal String LISTA_PARAMETROS;
non terminal String FUNCION;
non terminal String EJECUTAR;
non terminal String IMPRIMIR;
non terminal String IMPRIMIR_NL;
non terminal String TIPO;
non terminal String OPERACION;
non terminal String OPERACIONES;
non terminal String OPERACIONES2;
non terminal String OPERADORES;
non terminal String OPERANDOS;
non terminal String VARIABLES;

precedence left tsum, trest;
precedence left tdiv, tmul;
precedence left tmod, tpot;


start with INICIO;

INICIO::= prInicio E prFin;

E::=    DECLARACION E
        |{: tmpCountTab += 1; condiciones.add("if");:}  IF {:System.out.println("Se realizo un if");:} E
        |COMENTARIO {:System.out.println("Se realizo un comentar");:} E
        |COMENTARIO_VARIAS_LINEAS {:System.out.println("Se realizo un comentarioVariasLineas");:} E
        |ASIGNACION {:System.out.println("Se realizo un asignacion");:} E
        |SELECCION_MULTIPLE {:System.out.println("Se realizo un seleccionMultiple");:} E
        |PARA {:System.out.println("Se realizo un para");:} E
        |PARA_SALTO {:System.out.println("Se realizo un paraSalto");:} E
        |{:condiciones.add("mientras");:}MIENTRAS {:System.out.println("Se realizo un mientras");:} E
        |REPETIR {:System.out.println("Se realizo un repetir");:} E
        |RETORNO {:System.out.println("Se realizo un retorno");:}E
        |METODO {:System.out.println("Se realizo un metodo");:}E
        |FUNCION {:System.out.println("Se realizo un funcion");:}E
        |EJECUTAR {:System.out.println("Se realizo un ejecutar");:}E
        |IMPRIMIR E {:tmpPythonArray.add(tmpImprimir);:}
        |IMPRIMIR_NL E {:tmpPythonArray.add(tmpImprimirnl);:}
        |OPERACION {:System.out.println("Se realizo una operacion");:} E
        |error {:tmpPython = "";:} E
        |;

OPERACIONES::= OPERACIONES2 OPERACIONES
                | OPERACIONES2
                | OPERACION OPERACIONES
                | OPERACION;


OPERANDOS::= tnum:a {:variables.add(a);:}
                | tvariable:a {:variables.add(a);:};

OPERACION::=    OPERANDOS OPERADORES OPERANDOS {:agregarTmpOperacion(variables.get(variables.size() - 2),variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);:}

                |OPERANDOS OPERADORES OPERANDOS OPERADORES OPERACION{:agregarTmpOperacion(variables.get(variables.size() - 2),variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);:}

                |OPERANDOS tpot cor1 OPERANDOS cor2 {:tmpOperacion.add(variables.get(variables.size() - 2) + "**" +variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);:}
                
                |OPERANDOS OPERADORES pare1 OPERACIONES pare2 {:agregarTmpOperacionLista(variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);:}
                |pare1 OPERACIONES pare2 OPERADORES OPERANDOS {:agregarTmpOperacionLista3(variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);:}
                |pare1 OPERACIONES pare2 OPERADORES pare1 OPERACIONES pare2 {:agregarTmpOperacionLista2();:}
                
                |pare1 OPERACIONES pare2 OPERADORES pare1 OPERACIONES pare2 OPERACIONES2{:agregarTmpOperacionLista2();:}
                ;

OPERACIONES2::= OPERADORES OPERACION OPERACIONES2
                | OPERADORES OPERANDOS{:
                        agregarTmpOperacionLista3(variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);:}
                ;

OPERADORES::= tsum {: tmpOperadorLista.add("+");:}
            | trest {: tmpOperadorLista.add("-");:}
            | tdiv {: tmpOperadorLista.add("/");:}
            | tmul {:tmpOperadorLista.add("*");:}
            | tmod {:tmpOperadorLista.add("%");:};

TIPO::=prBoolean
        |prCaracter
        |prNumero
        |prCadena;

DECLARACION::= prIngresar tvariable:a prComo TIPO prConValor VARIABLES tpuntoycoma {:
                python += a + " = " + variables.get(variables.size() - 1) + "\n"; 
                pythonArray.add(a + " = " + variables.get(variables.size() - 1) + "\n");
                :}
                |prIngresar tvariable:a prComo TIPO prConValor OPERACION tpuntoycoma 
                {:
                        
                        python += a + " = " + tmpOperacion.get(tmpOperacion.size() - 1) + "\n";
                        
                        tmpOperacion = new ArrayList<String>();
                        tmpListaNombres = new ArrayList<String>();
                        cambiar = true; 
                :}
                
                |prIngresar LISTA_NOMBRES prComo TIPO prConValor VARIABLES tpuntoycoma {:agregarTmpListaNombres(variables.get(variables.size() - 1));variables.remove(variables.size() - 1);:}

                |prIngresar LISTA_NOMBRES prComo TIPO prConValor OPERACION tpuntoycoma 
                {:agregarTmpListaNombres(tmpOperacion.get(tmpOperacion.size() - 1));
                        tmpOperacion = new ArrayList<String>();
                        tmpListaNombres = new ArrayList<String>(); 
                :};
//Gramatica de un comentario
COMENTARIO::= tcomentario:c {:python +=c.replace("//","#")+"\n";:} ;
//Gramatica de un comentario de varias lineas
COMENTARIO_VARIAS_LINEAS::= tcomentariovariaslineas:c {:python += c.replace("/*","'''").replace("*/","'''") + "\n";:};                
//Gramatica de una asignacion
ASIGNACION::= tvariable:a FLECHA tcadena:b tpuntoycoma {:python += a + " = " + b + ";\n";:}
                | tvariable:a FLECHA tnum:b tpuntoycoma {:python += a + " = " + b + ";\n";:}
                | tvariable:a FLECHA tvariable:b tpuntoycoma {:python += a + " = " + b + ";\n";:} 
                | tvariable:a FLECHA prFloat:b tpuntoycoma {:python += a + " = " + b + ";\n";:} 
                | tvariable:a FLECHA prVerdadero:b tpuntoycoma {:python += a+" = True;\n";:}
                | tvariable:a FLECHA prFalso:b tpuntoycoma {:python += a+" = False;\n";:}
                | tvariable:a FLECHA caracter:b tpuntoycoma {:python += a + " = " + b + ";\n";:}
                | LISTA_NOMBRES FLECHA tcadena:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                | LISTA_NOMBRES FLECHA tnum:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                | LISTA_NOMBRES FLECHA tvariable:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                | LISTA_NOMBRES FLECHA prFloat:a tpuntoycoma {:agregarTmpListaNombres(a);:}
                | LISTA_NOMBRES FLECHA prVerdadero:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = True;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                | LISTA_NOMBRES FLECHA prFalso:a tpuntoycoma 
                {:for(String i: tmpListaNombres){
                         python += i + " = False;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                :}
                | LISTA_NOMBRES FLECHA caracter:a tpuntoycoma {:agregarTmpListaNombres(a);:};
//Gramatica de seleccion multiple
SELECCION_MULTIPLE::= prSegun SEGUN prFinSegun;

SEGUN::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES SEGUN
        |tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES;

VALOR::= tvariable:a {:valor = a;:} |tcadena:b {:valor = b;:};

LISTA_NOMBRES::= tvariable:a {:tmpListaNombres.add(a);:} LISTA_NOMBRES2
                |;
LISTA_NOMBRES2::= tcoma tvariable:a {:tmpListaNombres.add(a);:} LISTA_NOMBRES2
                |tcoma tvariable:a {:tmpListaNombres.add(a);:};

IF::= prSi CONDICION prEntonces E prFinSi {:
                if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        condiciones.remove(condiciones.size() - 1);
                }
                tmpPython += "if " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("if") || tmpPythonArray.get(i).contains("elif") || tmpPythonArray.get(i).contains("else") ){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:}
        |prSi CONDICION prEntonces E O_SI prFinSi{:
                python += "if " + condiciones.get(condiciones.size() - 1)+ ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                               if( tmpPythonArray.get(i).contains("if") || tmpPythonArray.get(i).contains("elif") || tmpPythonArray.get(i).contains("else") ){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                
                python += tmpPython + tmpPython2.get(tmpPython2.size() - 1) + "\n";
                tmpPython = "";
                tmpPython2.remove(tmpPython2.size() - 1);
                tmpPython2 = new ArrayList<String>();
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:}
        |prSi CONDICION prEntonces E DE_LO_CONTRARIO prFinSi{:
                if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        condiciones.remove(condiciones.size() - 1);
                }
                python += "if " + condiciones.get(condiciones.size() - 1)+ ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                               if( tmpPythonArray.get(i).contains("if") || tmpPythonArray.get(i).contains("elif") || tmpPythonArray.get(i).contains("else") ){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                
                python += tmpPython + tmpPython2.get(tmpPython2.size() - 1) + "\n";
                tmpPython = "";
                tmpPython2.remove(tmpPython2.size() - 1);
                tmpPython2 = new ArrayList<String>();
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:}
        |prSi CONDICION prEntonces E O_SI DE_LO_CONTRARIO prFinSi{:
                if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        condiciones.remove(condiciones.size() - 1);
                }
                python += "if " + condiciones.get(condiciones.size() - 1)+ ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last to the first element
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("if") || tmpPythonArray.get(i).contains("elif") || tmpPythonArray.get(i).contains("else") ){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }

                
                python += tmpPython;
                tmpPython = "";
                //Iterate tmpPython2 from the last element to the first element
                for(int i = tmpPython2.size() - 2; i >= 0; i--){
                        if(tmpPython2.get(i) != ""){
                                if( tmpPython2.get(i).contains("if") || tmpPython2.get(i).contains("elif") || tmpPython2.get(i).contains("else") ){
                                        tmpPython += tmpPython2.get(i) + "\n";
                                }else{
                                        tmpPython += "\t" + tmpPython2.get(i) + "\n";
                                }
                        }
                }
                tmpPython += tmpPython2.get(tmpPython2.size() - 1) + "\n";
                tmpPython2 = new ArrayList<String>();
                python += tmpPython;
                tmpPython = "";
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:};

DE_LO_CONTRARIO::= prDeLoContrario E{:
                String tmpstr = "else:\n";
                //Iterate tmpPythonArray from the last element to the first and end when found elif
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != "" && !tmpPythonArray.get(i).equals("elif")){
                                tmpstr += "\t" + tmpPythonArray.get(i) + "\n";
                                tmpPythonArray.remove(i);
                                i--;
                        }
                        if(tmpPythonArray.get(i).equals("elif")){
                                tmpPythonArray.remove(i);
                                break;
                        }
                }
                tmpPython2.add(tmpstr);
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:};

O_SI::=  prO_Si CONDICION prEntonces E O_SI{:
                String tmpstr = "elif " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first and end when found elif
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != "" && !tmpPythonArray.get(i).equals("elif")){
                                tmpstr += "\t" + tmpPythonArray.get(i) + "\n";
                                tmpPythonArray.remove(i);
                                i--;
                        }
                        if(tmpPythonArray.get(i).equals("elif")){
                                tmpPythonArray.remove(i);
                                break;
                        }
                }
                tmpPython2.add(tmpstr);
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:}
        |prO_Si  CONDICION prEntonces E{:
                String tmpstr = "elif " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first and end when found elif
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != "" && !tmpPythonArray.get(i).equals("elif")){
                                tmpstr += "\t" + tmpPythonArray.get(i) + "\n";
                                tmpPythonArray.remove(i);
                                i--;
                        }
                        if(tmpPythonArray.get(i).equals("elif")){
                                tmpPythonArray.remove(i);
                                break;
                        }
                }
                tmpPython2.add(tmpstr);
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:};

CONDICION::= VARIABLES prEsIgual VARIABLES {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                :} 
            |VARIABLES prMayor VARIABLES {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " > " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " > " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " > " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " > " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                :} 
            |VARIABLES prMayorOIgual VARIABLES {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " >= " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " >= " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " >= " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " >= " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                :} 
            |VARIABLES prMenor VARIABLES {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " < " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " < " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " < " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " < " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                :} 
            |VARIABLES prMenorOIgual VARIABLES {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " <= " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " <= " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " <= " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " <= " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                :} 
            |VARIABLES prEsDiferente VARIABLES {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " != " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " != " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " != " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " != " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                :}



            |VARIABLES prEsIgual OPERACION {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " == " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " == " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " == " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 1) + " == " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                }
                :} 
            |VARIABLES prMayor OPERACION {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " > " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " > " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " > " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 1) + " > " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }
                :} 
            |VARIABLES prMayorOIgual OPERACION {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " >= " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " >= " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " >= " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 1) + " >= " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }
                :} 
            |VARIABLES prMenor OPERACION {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " < " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " < " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " < " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 1) + " < " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }
                :} 
            |VARIABLES prMenorOIgual OPERACION {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " <= " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " <= " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " <= " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 1) + " <= " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }
                :} 
            |VARIABLES prEsDiferente OPERACION {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " != " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " != " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 1) + " != " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                        condiciones.add("mientras2");
                }else{
                        condiciones.add(variables.get(variables.size() - 1) + " != " + tmpOperacion.get(tmpOperacion.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        tmpOperacion.remove(tmpOperacion.size() - 1);
                }
                :}
                |tvariable:a {:
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a); 
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a); 
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a); 
                        condiciones.add("mientras2");

                }else{
                        condiciones.add(a); 
                }
                :} ;

VARIABLE::= tvariable;

VARIABLES::= tcadena:a {:variables.add(a);:}
            |prFloat:a {:variables.add(a);:}
            |prVerdadero:a {:variables.add("True");:}
            |prFalso:a {:variables.add("False");:}
            |caracter:a {:variables.add(a);:}
            |ascii:a {:variables.add(asciiToChar(a));:}
            |OPERANDOS;

INSTRUCCIONES::=  INSTRUCCION tpuntoycoma INSTRUCCIONES
                 |INSTRUCCION tpuntoycoma;
                 
INSTRUCCIONES_CICLO::= INSTRUCCIONES_CICLO INSTRUCCION tpuntoycoma
                       |INSTRUCCION tpuntoycoma
                       ;
INSTRUCCION::= VARIABLE tigual VALOR;

PARA::= prPara VARIABLE FLECHA tnum prHasta tnum prHacer INSTRUCCIONES_CICLO prFinPara;

FLECHA::= trest tmayor;

PARA_SALTO::= prPara VARIABLE FLECHA tnum prHasta tnum prCon prIncremental tnum prHacer INSTRUCCIONES_CICLO prFinPara;

MIENTRAS::= prMientras CONDICION prHacer E prFinMientras{:

                if(condiciones.get(condiciones.size() - 1).equals("mientras2")){
                        condiciones.remove(condiciones.size() - 1);
                }
                tmpPython += "while " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("mientras")){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:}
                |prMientras prNot CONDICION prHacer E prFinMientras{:

                if(condiciones.get(condiciones.size() - 1).equals("mientras2")){
                        condiciones.remove(condiciones.size() - 1);
                }
                tmpPython += "while " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("mientras")){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:}
                |prMientras pare1 CONDICION pare2 prHacer E prFinMientras
                |prMientras prNot pare1 CONDICION pare2 prHacer E prFinMientras{:

                if(condiciones.get(condiciones.size() - 1).equals("mientras2")){
                        condiciones.remove(condiciones.size() - 1);
                }
                tmpPython += "while " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("mientras")){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";:};

REPETIR::= prRepetir INSTRUCCIONES_CICLO prHasta CONDICION;

RETORNO::= prRetornar VALOR;

METODO::= prMetodo VARIABLE prConParametros LISTA_PARAMETROS prConValor VALOR prFinMetodo
                |prMetodo VARIABLE INSTRUCCIONES prFinMetodo;

LISTA_PARAMETROS::= VARIABLE tcadena LISTA_PARAMETROS|VARIABLE tcadena tcoma LISTA_PARAMETROS;


FUNCION::= prFuncion VARIABLE tcadena prConParametros LISTA_PARAMETROS INSTRUCCIONES prFinFuncion
                |prFuncion VARIABLE tcadena INSTRUCCIONES prFinFuncion;

EJECUTAR::= prEjecutar VARIABLE pare1 pare2 tpuntoycoma|prEjecutar VARIABLE pare1 LISTA_PARAMETROS pare2 tpuntoycoma;

IMPRIMIR::= prImprimir VARIABLES tpuntoycoma{:
                tmpImprimir = "print(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);:}
            |prImprimir pare1 VARIABLES pare2 tpuntoycoma{:
                tmpImprimir = "print(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);:};

IMPRIMIR_NL::= prImprimirNl VARIABLES tpuntoycoma {:
                tmpImprimirnl = "println(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);:}
                |prImprimirNl pare1 VARIABLES pare2 tpuntoycoma {:
                tmpImprimirnl = "println(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);:};