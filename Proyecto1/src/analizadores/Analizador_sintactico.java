
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\005\000\002\017" +
    "\004\000\002\042\002\000\002\017\005\000\002\043\002" +
    "\000\002\017\005\000\002\044\002\000\002\017\005\000" +
    "\002\045\002\000\002\017\005\000\002\046\002\000\002" +
    "\017\005\000\002\047\002\000\002\017\005\000\002\050" +
    "\002\000\002\017\005\000\002\051\002\000\002\017\005" +
    "\000\002\052\002\000\002\017\005\000\002\053\002\000" +
    "\002\017\005\000\002\054\002\000\002\017\005\000\002" +
    "\055\002\000\002\017\005\000\002\056\002\000\002\017" +
    "\005\000\002\057\002\000\002\017\005\000\002\060\002" +
    "\000\002\017\005\000\002\017\004\000\002\017\002\000" +
    "\002\007\007\000\002\007\010\000\002\007\010\000\002" +
    "\007\011\000\002\014\011\000\002\014\011\000\002\014" +
    "\011\000\002\014\011\000\002\015\003\000\002\016\003" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\024\005\000\002\025\010\000\002" +
    "\025\007\000\002\010\003\000\002\010\003\000\002\011" +
    "\004\000\002\011\002\000\002\012\005\000\002\012\004" +
    "\000\002\007\007\000\002\007\010\000\002\007\010\000" +
    "\002\007\011\000\002\021\005\000\002\021\004\000\002" +
    "\023\007\000\002\023\006\000\002\003\006\000\002\003" +
    "\006\000\002\003\006\000\002\013\003\000\002\004\005" +
    "\000\002\004\004\000\002\005\005\000\002\005\004\000" +
    "\002\006\005\000\002\027\013\000\002\026\004\000\002" +
    "\030\016\000\002\031\007\000\002\032\006\000\002\033" +
    "\004\000\002\034\011\000\002\034\006\000\002\035\005" +
    "\000\002\035\006\000\002\036\011\000\002\036\007\000" +
    "\002\037\007\000\002\037\010\000\002\040\005\000\002" +
    "\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\015\004\001\002\000\046\003\037\005" +
    "\uffca\016\uffdf\023\024\024\042\026\040\031\041\036\027" +
    "\040\023\045\050\047\026\051\011\052\031\055\015\057" +
    "\047\060\046\061\025\063\034\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\054\003\ufff2\005" +
    "\ufff2\016\ufff2\023\ufff2\024\ufff2\026\ufff2\031\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\040\ufff2\045\ufff2\047\ufff2\051" +
    "\ufff2\052\ufff2\055\ufff2\057\ufff2\060\ufff2\061\ufff2\063\ufff2" +
    "\001\002\000\054\003\ufffa\005\ufffa\016\ufffa\023\ufffa\024" +
    "\ufffa\026\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\040\ufffa\045\ufffa\047\ufffa\051\ufffa\052\ufffa\055\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\063\ufffa\001\002\000\006\063\071" +
    "\064\070\001\002\000\054\003\037\005\uffca\016\uffdf\023" +
    "\024\024\042\026\040\031\041\033\uffdf\034\uffdf\035\uffdf" +
    "\036\027\040\023\045\050\047\026\051\011\052\031\055" +
    "\015\057\047\060\046\061\025\063\034\001\002\000\054" +
    "\003\uffe4\005\uffe4\016\uffe4\023\uffe4\024\uffe4\026\uffe4\031" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4\045\uffe4" +
    "\047\uffe4\051\uffe4\052\uffe4\055\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\063\uffe4\001\002\000\054\003\uffe6\005\uffe6\016\uffe6" +
    "\023\uffe6\024\uffe6\026\uffe6\031\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\040\uffe6\045\uffe6\047\uffe6\051\uffe6\052\uffe6" +
    "\055\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6\001\002\000" +
    "\004\063\034\001\002\000\054\003\uffec\005\uffec\016\uffec" +
    "\023\uffec\024\uffec\026\uffec\031\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\040\uffec\045\uffec\047\uffec\051\uffec\052\uffec" +
    "\055\uffec\057\uffec\060\uffec\061\uffec\063\uffec\001\002\000" +
    "\006\005\120\021\140\001\002\000\054\003\ufffe\005\ufffe" +
    "\016\ufffe\023\ufffe\024\ufffe\026\ufffe\031\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\040\ufffe\045\ufffe\047\ufffe\051\ufffe" +
    "\052\ufffe\055\ufffe\057\ufffe\060\ufffe\061\ufffe\063\ufffe\001" +
    "\002\000\054\003\ufff6\005\ufff6\016\ufff6\023\ufff6\024\ufff6" +
    "\026\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\040" +
    "\ufff6\045\ufff6\047\ufff6\051\ufff6\052\ufff6\055\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\063\ufff6\001\002\000\054\003\ufff4\005" +
    "\ufff4\016\ufff4\023\ufff4\024\ufff4\026\ufff4\031\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\040\ufff4\045\ufff4\047\ufff4\051" +
    "\ufff4\052\ufff4\055\ufff4\057\ufff4\060\ufff4\061\ufff4\063\ufff4" +
    "\001\002\000\004\063\034\001\002\000\054\003\uffd6\005" +
    "\uffd6\016\uffd6\023\uffd6\024\uffd6\026\uffd6\031\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\040\uffd6\045\uffd6\047\uffd6\051" +
    "\uffd6\052\uffd6\055\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6" +
    "\001\002\000\004\064\254\001\002\000\004\063\034\001" +
    "\002\000\004\017\241\001\002\000\004\016\240\001\002" +
    "\000\004\063\034\001\002\000\054\003\uffea\005\uffea\016" +
    "\uffea\023\uffea\024\uffea\026\uffea\031\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\040\uffea\045\uffea\047\uffea\051\uffea\052" +
    "\uffea\055\uffea\057\uffea\060\uffea\061\uffea\063\uffea\001\002" +
    "\000\054\003\ufff8\005\ufff8\016\ufff8\023\ufff8\024\ufff8\026" +
    "\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\040\ufff8" +
    "\045\ufff8\047\ufff8\051\ufff8\052\ufff8\055\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\063\ufff8\001\002\000\074\003\uffbc\005\uffbc" +
    "\013\uffbc\016\uffbc\021\uffbc\023\uffbc\024\uffbc\026\uffbc\027" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\045\uffbc\047\uffbc\051\uffbc\052\uffbc\054" +
    "\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\001\002\000\054\003\uffe2\005\uffe2\016\uffe2\023" +
    "\uffe2\024\uffe2\026\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\040\uffe2\045\uffe2\047\uffe2\051\uffe2\052\uffe2\055" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\063\uffe2\001\002\000\054" +
    "\003\uffee\005\uffee\016\uffee\023\uffee\024\uffee\026\uffee\031" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\040\uffee\045\uffee" +
    "\047\uffee\051\uffee\052\uffee\055\uffee\057\uffee\060\uffee\061" +
    "\uffee\063\uffee\001\002\000\054\003\037\005\uffca\016\uffdf" +
    "\023\024\024\042\026\040\031\041\033\uffdf\034\uffdf\035" +
    "\uffdf\036\027\040\023\045\050\047\026\051\011\052\031" +
    "\055\015\057\047\060\046\061\025\063\034\001\002\000" +
    "\006\027\uffca\063\034\001\002\000\004\063\034\001\002" +
    "\000\054\003\uffd5\005\uffd5\016\uffd5\023\uffd5\024\uffd5\026" +
    "\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5" +
    "\045\uffd5\047\uffd5\051\uffd5\052\uffd5\055\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\063\uffd5\001\002\000\054\003\ufffc\005\ufffc" +
    "\016\ufffc\023\ufffc\024\ufffc\026\ufffc\031\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\040\ufffc\045\ufffc\047\ufffc\051\ufffc" +
    "\052\ufffc\055\ufffc\057\ufffc\060\ufffc\061\ufffc\063\ufffc\001" +
    "\002\000\004\005\120\001\002\000\054\003\ufff0\005\ufff0" +
    "\016\ufff0\023\ufff0\024\ufff0\026\ufff0\031\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\040\ufff0\045\ufff0\047\ufff0\051\ufff0" +
    "\052\ufff0\055\ufff0\057\ufff0\060\ufff0\061\ufff0\063\ufff0\001" +
    "\002\000\004\064\113\001\002\000\004\063\034\001\002" +
    "\000\004\063\034\001\002\000\054\003\uffe8\005\uffe8\016" +
    "\uffe8\023\uffe8\024\uffe8\026\uffe8\031\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\040\uffe8\045\uffe8\047\uffe8\051\uffe8\052" +
    "\uffe8\055\uffe8\057\uffe8\060\uffe8\061\uffe8\063\uffe8\001\002" +
    "\000\054\003\037\005\uffca\016\uffdf\023\024\024\042\026" +
    "\040\031\041\033\uffdf\034\uffdf\035\uffdf\036\027\040\023" +
    "\045\050\047\026\051\011\052\031\055\015\057\047\060" +
    "\046\061\025\063\034\001\002\000\012\016\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\001\002\000\004\037\063\001\002\000" +
    "\004\062\056\001\002\000\004\062\057\001\002\000\010" +
    "\004\061\063\034\064\060\001\002\000\060\003\uffbe\005" +
    "\uffbe\016\uffbe\023\uffbe\024\uffbe\026\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\045" +
    "\uffbe\047\uffbe\051\uffbe\052\uffbe\055\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\063\uffbe\001\002\000\060\003\uffbd\005\uffbd\016" +
    "\uffbd\023\uffbd\024\uffbd\026\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\045\uffbd\047" +
    "\uffbd\051\uffbd\052\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\063\uffbd\001\002\000\060\003\uffbf\005\uffbf\016\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\045\uffbf\047\uffbf\051" +
    "\uffbf\052\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\063\uffbf" +
    "\001\002\000\004\063\034\001\002\000\004\025\076\001" +
    "\002\000\006\046\074\063\034\001\002\000\004\062\067" +
    "\001\002\000\006\063\071\064\070\001\002\000\062\003" +
    "\uffcc\005\uffcc\016\uffcc\020\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040" +
    "\uffcc\045\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\063\uffcc\001\002\000\062\003" +
    "\uffcd\005\uffcd\016\uffcd\020\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040" +
    "\uffcd\045\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd\055\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\063\uffcd\001\002\000\004\025" +
    "\uffb7\001\002\000\004\025\075\001\002\000\054\003\uffb3" +
    "\005\uffb3\016\uffb3\023\uffb3\024\uffb3\026\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\045\uffb3\047\uffb3" +
    "\051\uffb3\052\uffb3\055\uffb3\057\uffb3\060\uffb3\061\uffb3\063" +
    "\uffb3\001\002\000\012\041\uffb9\042\uffb9\046\uffb9\063\uffb9" +
    "\001\002\000\012\041\uffb8\042\uffb8\046\uffb8\063\uffb8\001" +
    "\002\000\004\013\100\001\002\000\006\014\103\063\034" +
    "\001\002\000\004\014\111\001\002\000\004\064\105\001" +
    "\002\000\004\025\104\001\002\000\054\003\uffaa\005\uffaa" +
    "\016\uffaa\023\uffaa\024\uffaa\026\uffaa\031\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\040\uffaa\045\uffaa\047\uffaa\051\uffaa" +
    "\052\uffaa\055\uffaa\057\uffaa\060\uffaa\061\uffaa\063\uffaa\001" +
    "\002\000\006\021\107\063\034\001\002\000\010\014\uffae" +
    "\030\uffae\063\uffae\001\002\000\004\063\034\001\002\000" +
    "\010\014\uffad\030\uffad\063\uffad\001\002\000\004\025\112" +
    "\001\002\000\054\003\uffa9\005\uffa9\016\uffa9\023\uffa9\024" +
    "\uffa9\026\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\040\uffa9\045\uffa9\047\uffa9\051\uffa9\052\uffa9\055\uffa9\057" +
    "\uffa9\060\uffa9\061\uffa9\063\uffa9\001\002\000\004\025\114" +
    "\001\002\000\054\003\uffa8\005\uffa8\016\uffa8\023\uffa8\024" +
    "\uffa8\026\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\040\uffa8\045\uffa8\047\uffa8\051\uffa8\052\uffa8\055\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\063\uffa8\001\002\000\054\003\037" +
    "\005\uffca\016\uffdf\023\024\024\042\026\040\031\041\033" +
    "\uffdf\034\uffdf\035\uffdf\036\027\040\023\045\050\047\026" +
    "\051\011\052\031\055\015\057\047\060\046\061\025\063" +
    "\034\001\002\000\012\016\uffef\033\uffef\034\uffef\035\uffef" +
    "\001\002\000\006\004\123\064\122\001\002\000\004\022" +
    "\121\001\002\000\006\004\uffb5\064\uffb5\001\002\000\004" +
    "\025\125\001\002\000\004\025\124\001\002\000\054\003" +
    "\uffd1\005\uffd1\016\uffd1\023\uffd1\024\uffd1\026\uffd1\031\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\045\uffd1\047" +
    "\uffd1\051\uffd1\052\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1" +
    "\063\uffd1\001\002\000\054\003\uffd3\005\uffd3\016\uffd3\023" +
    "\uffd3\024\uffd3\026\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\040\uffd3\045\uffd3\047\uffd3\051\uffd3\052\uffd3\055" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\063\uffd3\001\002\000\054" +
    "\003\037\005\uffca\016\uffdf\023\024\024\042\026\040\031" +
    "\041\033\uffdf\034\uffdf\035\uffdf\036\027\040\023\045\050" +
    "\047\026\051\011\052\031\055\015\057\047\060\046\061" +
    "\025\063\034\001\002\000\012\016\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\001\002\000\004\032\131\001\002\000\052\003" +
    "\037\005\uffca\023\024\024\042\026\040\031\041\033\uffdf" +
    "\034\uffdf\035\uffdf\036\027\040\023\045\050\047\026\051" +
    "\011\052\031\055\015\057\047\060\046\061\025\063\034" +
    "\001\002\000\004\025\175\001\002\000\010\033\170\034" +
    "\153\035\147\001\002\000\010\033\152\034\153\035\147" +
    "\001\002\000\010\005\120\021\140\062\067\001\002\000" +
    "\006\004\144\064\143\001\002\000\006\005\uffcb\027\uffcb" +
    "\001\002\000\004\063\034\001\002\000\010\005\uffc8\021" +
    "\140\027\uffc8\001\002\000\006\005\uffc9\027\uffc9\001\002" +
    "\000\004\025\146\001\002\000\004\025\145\001\002\000" +
    "\054\003\uffd2\005\uffd2\016\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\045" +
    "\uffd2\047\uffd2\051\uffd2\052\uffd2\055\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\063\uffd2\001\002\000\054\003\uffd4\005\uffd4\016" +
    "\uffd4\023\uffd4\024\uffd4\026\uffd4\031\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\040\uffd4\045\uffd4\047\uffd4\051\uffd4\052" +
    "\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4\001\002" +
    "\000\050\003\037\005\uffca\023\024\024\042\026\040\031" +
    "\041\033\uffdf\035\uffdf\036\027\040\023\045\050\047\026" +
    "\051\011\052\031\055\015\057\047\060\046\061\025\063" +
    "\034\001\002\000\004\033\163\001\002\000\006\033\161" +
    "\035\147\001\002\000\054\003\uffc7\005\uffc7\016\uffc7\023" +
    "\uffc7\024\uffc7\026\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\040\uffc7\045\uffc7\047\uffc7\051\uffc7\052\uffc7\055" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7\001\002\000\004" +
    "\063\034\001\002\000\004\032\155\001\002\000\052\003" +
    "\037\005\uffca\023\024\024\042\026\040\031\041\033\uffdf" +
    "\034\uffdf\035\uffdf\036\027\040\023\045\050\047\026\051" +
    "\011\052\031\055\015\057\047\060\046\061\025\063\034" +
    "\001\002\000\010\033\uffc0\034\153\035\uffc0\001\002\000" +
    "\006\033\uffc1\035\uffc1\001\002\000\004\033\162\001\002" +
    "\000\054\003\uffc6\005\uffc6\016\uffc6\023\uffc6\024\uffc6\026" +
    "\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6" +
    "\045\uffc6\047\uffc6\051\uffc6\052\uffc6\055\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\063\uffc6\001\002\000\054\003\uffc4\005\uffc4" +
    "\016\uffc4\023\uffc4\024\uffc4\026\uffc4\031\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\040\uffc4\045\uffc4\047\uffc4\051\uffc4" +
    "\052\uffc4\055\uffc4\057\uffc4\060\uffc4\061\uffc4\063\uffc4\001" +
    "\002\000\054\003\uffc5\005\uffc5\016\uffc5\023\uffc5\024\uffc5" +
    "\026\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040" +
    "\uffc5\045\uffc5\047\uffc5\051\uffc5\052\uffc5\055\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\063\uffc5\001\002\000\006\033\uffc2\035" +
    "\147\001\002\000\004\033\uffc3\001\002\000\004\033\174" +
    "\001\002\000\006\033\172\035\147\001\002\000\054\003" +
    "\uffde\005\uffde\016\uffde\023\uffde\024\uffde\026\uffde\031\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\040\uffde\045\uffde\047" +
    "\uffde\051\uffde\052\uffde\055\uffde\057\uffde\060\uffde\061\uffde" +
    "\063\uffde\001\002\000\004\033\173\001\002\000\054\003" +
    "\uffdd\005\uffdd\016\uffdd\023\uffdd\024\uffdd\026\uffdd\031\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\045\uffdd\047" +
    "\uffdd\051\uffdd\052\uffdd\055\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\063\uffdd\001\002\000\054\003\uffdb\005\uffdb\016\uffdb\023" +
    "\uffdb\024\uffdb\026\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\040\uffdb\045\uffdb\047\uffdb\051\uffdb\052\uffdb\055" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\063\uffdb\001\002\000\054" +
    "\003\uffdc\005\uffdc\016\uffdc\023\uffdc\024\uffdc\026\uffdc\031" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\045\uffdc" +
    "\047\uffdc\051\uffdc\052\uffdc\055\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\063\uffdc\001\002\000\022\017\uffba\033\uffba\034\uffba" +
    "\035\uffba\053\uffba\056\uffba\063\034\067\uffba\001\002\000" +
    "\020\017\uffbb\033\uffbb\034\uffbb\035\uffbb\053\uffbb\056\uffbb" +
    "\067\uffbb\001\002\000\004\027\210\001\002\000\006\021" +
    "\140\027\201\001\002\000\004\071\202\001\002\000\004" +
    "\030\203\001\002\000\006\004\205\064\204\001\002\000" +
    "\004\025\207\001\002\000\004\025\206\001\002\000\054" +
    "\003\uffd9\005\uffd9\016\uffd9\023\uffd9\024\uffd9\026\uffd9\031" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\045\uffd9" +
    "\047\uffd9\051\uffd9\052\uffd9\055\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\063\uffd9\001\002\000\054\003\uffda\005\uffda\016\uffda" +
    "\023\uffda\024\uffda\026\uffda\031\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\040\uffda\045\uffda\047\uffda\051\uffda\052\uffda" +
    "\055\uffda\057\uffda\060\uffda\061\uffda\063\uffda\001\002\000" +
    "\004\071\211\001\002\000\004\030\212\001\002\000\006" +
    "\004\214\064\213\001\002\000\004\025\216\001\002\000" +
    "\004\025\215\001\002\000\054\003\uffd8\005\uffd8\016\uffd8" +
    "\023\uffd8\024\uffd8\026\uffd8\031\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\040\uffd8\045\uffd8\047\uffd8\051\uffd8\052\uffd8" +
    "\055\uffd8\057\uffd8\060\uffd8\061\uffd8\063\uffd8\001\002\000" +
    "\054\003\uffd7\005\uffd7\016\uffd7\023\uffd7\024\uffd7\026\uffd7" +
    "\031\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7\045" +
    "\uffd7\047\uffd7\051\uffd7\052\uffd7\055\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\063\uffd7\001\002\000\012\016\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\001\002\000\054\003\037\005\uffca\016\uffdf" +
    "\023\024\024\042\026\040\031\041\033\uffdf\034\uffdf\035" +
    "\uffdf\036\027\040\023\045\050\047\026\051\011\052\031" +
    "\055\015\057\047\060\046\061\025\063\034\001\002\000" +
    "\012\016\uffed\033\uffed\034\uffed\035\uffed\001\002\000\054" +
    "\003\037\005\uffca\016\uffdf\023\024\024\042\026\040\031" +
    "\041\033\uffdf\034\uffdf\035\uffdf\036\027\040\023\045\050" +
    "\047\026\051\011\052\031\055\015\057\047\060\046\061" +
    "\025\063\034\001\002\000\012\016\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\001\002\000\054\003\037\005\uffca\016\uffdf\023" +
    "\024\024\042\026\040\031\041\033\uffdf\034\uffdf\035\uffdf" +
    "\036\027\040\023\045\050\047\026\051\011\052\031\055" +
    "\015\057\047\060\046\061\025\063\034\001\002\000\012" +
    "\016\ufff7\033\ufff7\034\ufff7\035\ufff7\001\002\000\054\003" +
    "\037\005\uffca\016\uffdf\023\024\024\042\026\040\031\041" +
    "\033\uffdf\034\uffdf\035\uffdf\036\027\040\023\045\050\047" +
    "\026\051\011\052\031\055\015\057\047\060\046\061\025" +
    "\063\034\001\002\000\012\016\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\001\002\000\006\054\231\063\034\001\002\000\004" +
    "\063\034\001\002\000\004\053\233\001\002\000\054\003" +
    "\uffaf\005\uffaf\016\uffaf\023\uffaf\024\uffaf\026\uffaf\031\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\040\uffaf\045\uffaf\047" +
    "\uffaf\051\uffaf\052\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\063\uffaf\001\002\000\004\030\235\001\002\000\006\063" +
    "\071\064\070\001\002\000\004\053\237\001\002\000\054" +
    "\003\uffb0\005\uffb0\016\uffb0\023\uffb0\024\uffb0\026\uffb0\031" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\045\uffb0" +
    "\047\uffb0\051\uffb0\052\uffb0\055\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\063\uffb0\001\002\000\004\002\000\001\002\000\006" +
    "\063\071\064\070\001\002\000\004\067\243\001\002\000" +
    "\054\003\uffd0\005\uffd0\016\uffd0\023\uffd0\024\uffd0\026\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\045" +
    "\uffd0\047\uffd0\051\uffd0\052\uffd0\055\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\063\uffd0\001\002\000\004\020\245\001\002\000" +
    "\004\032\246\001\002\000\004\063\034\001\002\000\006" +
    "\017\241\067\uffce\001\002\000\004\067\uffcf\001\002\000" +
    "\006\041\252\063\034\001\002\000\004\063\034\001\002" +
    "\000\054\003\uffb2\005\uffb2\016\uffb2\023\uffb2\024\uffb2\026" +
    "\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2" +
    "\045\uffb2\047\uffb2\051\uffb2\052\uffb2\055\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\063\uffb2\001\002\000\004\025\255\001\002" +
    "\000\054\003\uffa7\005\uffa7\016\uffa7\023\uffa7\024\uffa7\026" +
    "\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\040\uffa7" +
    "\045\uffa7\047\uffa7\051\uffa7\052\uffa7\055\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\063\uffa7\001\002\000\004\005\120\001\002" +
    "\000\004\004\260\001\002\000\004\041\261\001\002\000" +
    "\004\004\262\001\002\000\006\037\263\043\264\001\002" +
    "\000\004\063\034\001\002\000\004\044\265\001\002\000" +
    "\004\004\266\001\002\000\004\037\267\001\002\000\004" +
    "\063\034\001\002\000\006\042\271\063\034\001\002\000" +
    "\054\003\uffb4\005\uffb4\016\uffb4\023\uffb4\024\uffb4\026\uffb4" +
    "\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\045" +
    "\uffb4\047\uffb4\051\uffb4\052\uffb4\055\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\063\uffb4\001\002\000\006\042\273\063\034\001" +
    "\002\000\054\003\uffb6\005\uffb6\016\uffb6\023\uffb6\024\uffb6" +
    "\026\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040" +
    "\uffb6\045\uffb6\047\uffb6\051\uffb6\052\uffb6\055\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\063\uffb6\001\002\000\054\003\037\005" +
    "\uffca\016\uffdf\023\024\024\042\026\040\031\041\033\uffdf" +
    "\034\uffdf\035\uffdf\036\027\040\023\045\050\047\026\051" +
    "\011\052\031\055\015\057\047\060\046\061\025\063\034" +
    "\001\002\000\012\016\ufff3\033\ufff3\034\ufff3\035\ufff3\001" +
    "\002\000\054\003\037\005\uffca\016\uffdf\023\024\024\042" +
    "\026\040\031\041\033\uffdf\034\uffdf\035\uffdf\036\027\040" +
    "\023\045\050\047\026\051\011\052\031\055\015\057\047" +
    "\060\046\061\025\063\034\001\002\000\012\016\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\001\002\000\054\003\037\005\uffca" +
    "\016\uffdf\023\024\024\042\026\040\031\041\033\uffdf\034" +
    "\uffdf\035\uffdf\036\027\040\023\045\050\047\026\051\011" +
    "\052\031\055\015\057\047\060\046\061\025\063\034\001" +
    "\002\000\012\016\ufffd\033\ufffd\034\ufffd\035\ufffd\001\002" +
    "\000\054\003\037\005\uffca\016\uffdf\023\024\024\042\026" +
    "\040\031\041\033\uffdf\034\uffdf\035\uffdf\036\027\040\023" +
    "\045\050\047\026\051\011\052\031\055\015\057\047\060" +
    "\046\061\025\063\034\001\002\000\012\016\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\001\002\000\004\064\305\001\002\000" +
    "\006\054\306\063\034\001\002\000\004\063\034\001\002" +
    "\000\004\056\310\001\002\000\054\003\uffab\005\uffab\016" +
    "\uffab\023\uffab\024\uffab\026\uffab\031\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\040\uffab\045\uffab\047\uffab\051\uffab\052" +
    "\uffab\055\uffab\057\uffab\060\uffab\061\uffab\063\uffab\001\002" +
    "\000\004\063\034\001\002\000\004\056\313\001\002\000" +
    "\054\003\uffac\005\uffac\016\uffac\023\uffac\024\uffac\026\uffac" +
    "\031\uffac\033\uffac\034\uffac\035\uffac\036\uffac\040\uffac\045" +
    "\uffac\047\uffac\051\uffac\052\uffac\055\uffac\057\uffac\060\uffac" +
    "\061\uffac\063\uffac\001\002\000\054\003\037\005\uffca\016" +
    "\uffdf\023\024\024\042\026\040\031\041\033\uffdf\034\uffdf" +
    "\035\uffdf\036\027\040\023\045\050\047\026\051\011\052" +
    "\031\055\015\057\047\060\046\061\025\063\034\001\002" +
    "\000\012\016\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000" +
    "\054\003\037\005\uffca\016\uffdf\023\024\024\042\026\040" +
    "\031\041\033\uffdf\034\uffdf\035\uffdf\036\027\040\023\045" +
    "\050\047\026\051\011\052\031\055\015\057\047\060\046" +
    "\061\025\063\034\001\002\000\012\016\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\001\002\000\012\016\uffff\033\uffff\034\uffff" +
    "\035\uffff\001\002\000\054\003\uffb1\005\uffb1\016\uffb1\023" +
    "\uffb1\024\uffb1\026\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\040\uffb1\045\uffb1\047\uffb1\051\uffb1\052\uffb1\055" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\063\uffb1\001\002\000\054" +
    "\003\037\005\uffca\016\uffdf\023\024\024\042\026\040\031" +
    "\041\033\uffdf\034\uffdf\035\uffdf\036\027\040\023\045\050" +
    "\047\026\051\011\052\031\055\015\057\047\060\046\061" +
    "\025\063\034\001\002\000\012\016\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\001\002\000\054\003\037\005\uffca\016\uffdf\023" +
    "\024\024\042\026\040\031\041\033\uffdf\034\uffdf\035\uffdf" +
    "\036\027\040\023\045\050\047\026\051\011\052\031\055" +
    "\015\057\047\060\046\061\025\063\034\001\002\000\012" +
    "\016\ufff1\033\ufff1\034\ufff1\035\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\002\004\001\001\000\050\007\017\011" +
    "\043\013\016\014\011\015\042\016\007\017\027\020\032" +
    "\024\020\027\021\030\006\031\044\032\035\033\015\034" +
    "\031\036\050\037\013\040\012\041\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\323\001\001\000" +
    "\004\044\321\001\001\000\004\010\320\001\001\000\050" +
    "\007\017\011\043\013\016\014\011\015\042\016\007\017" +
    "\317\020\032\024\020\027\021\030\006\031\044\032\035" +
    "\033\015\034\031\036\050\037\013\040\012\041\034\001" +
    "\001\000\004\057\315\001\001\000\004\056\313\001\001" +
    "\000\004\013\303\001\001\000\004\053\301\001\001\000" +
    "\006\012\136\026\135\001\001\000\004\042\277\001\001" +
    "\000\004\046\275\001\001\000\004\047\273\001\001\000" +
    "\004\013\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\250\006\063\013\065\001\001\000\004\025" +
    "\241\001\001\000\002\001\001\000\004\013\227\001\001" +
    "\000\004\054\225\001\001\000\004\045\223\001\001\000" +
    "\002\001\001\000\004\060\221\001\001\000\004\052\217" +
    "\001\001\000\050\007\017\011\043\013\016\014\011\015" +
    "\042\016\007\017\216\020\032\024\020\027\021\030\006" +
    "\031\044\032\035\033\015\034\031\036\050\037\013\040" +
    "\012\041\034\001\001\000\006\011\176\013\177\001\001" +
    "\000\006\003\127\013\054\001\001\000\002\001\001\000" +
    "\004\043\125\001\001\000\004\026\116\001\001\000\004" +
    "\051\114\001\001\000\002\001\001\000\004\013\076\001" +
    "\001\000\006\003\053\013\054\001\001\000\004\055\051" +
    "\001\001\000\050\007\017\011\043\013\016\014\011\015" +
    "\042\016\007\017\052\020\032\024\020\027\021\030\006" +
    "\031\044\032\035\033\015\034\031\036\050\037\013\040" +
    "\012\041\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\064\006\063\013\065\001\001\000\002\001" +
    "\001\000\006\006\072\013\065\001\001\000\002\001\001" +
    "\000\004\010\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\101\035\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\101\035\105\001\001\000\002\001\001\000\006\013\101" +
    "\035\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\007\017\011\043\013\016\014\011\015\042\016\007\017" +
    "\115\020\032\024\020\027\021\030\006\031\044\032\035" +
    "\033\015\034\031\036\050\037\013\040\012\041\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\007\017\011\043" +
    "\013\016\014\011\015\042\016\007\017\126\020\032\024" +
    "\020\027\021\030\006\031\044\032\035\033\015\034\031" +
    "\036\050\037\013\040\012\041\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\132\006\131\007\017" +
    "\011\043\013\134\014\011\015\042\016\007\017\133\020" +
    "\032\024\020\027\021\030\006\031\044\032\035\033\015" +
    "\034\031\036\050\037\013\040\012\041\034\001\001\000" +
    "\002\001\001\000\006\021\165\023\166\001\001\000\006" +
    "\021\147\023\150\001\001\000\006\012\136\026\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\140" +
    "\001\001\000\004\012\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\007\017\011\043\013\016\014\011\015" +
    "\042\016\007\017\163\020\032\024\020\027\021\030\006" +
    "\031\044\032\035\033\015\034\031\036\050\037\013\040" +
    "\012\041\034\001\001\000\002\001\001\000\004\021\157" +
    "\001\001\000\002\001\001\000\006\003\153\013\054\001" +
    "\001\000\002\001\001\000\050\007\017\011\043\013\016" +
    "\014\011\015\042\016\007\017\155\020\032\024\020\027" +
    "\021\030\006\031\044\032\035\033\015\034\031\036\050" +
    "\037\013\040\012\041\034\001\001\000\004\023\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\175" +
    "\006\131\013\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\007\017\011\043\013\016\014\011\015" +
    "\042\016\007\017\220\020\032\024\020\027\021\030\006" +
    "\031\044\032\035\033\015\034\031\036\050\037\013\040" +
    "\012\041\034\001\001\000\002\001\001\000\050\007\017" +
    "\011\043\013\016\014\011\015\042\016\007\017\222\020" +
    "\032\024\020\027\021\030\006\031\044\032\035\033\015" +
    "\034\031\036\050\037\013\040\012\041\034\001\001\000" +
    "\002\001\001\000\050\007\017\011\043\013\016\014\011" +
    "\015\042\016\007\017\224\020\032\024\020\027\021\030" +
    "\006\031\044\032\035\033\015\034\031\036\050\037\013" +
    "\040\012\041\034\001\001\000\002\001\001\000\050\007" +
    "\017\011\043\013\016\014\011\015\042\016\007\017\226" +
    "\020\032\024\020\027\021\030\006\031\044\032\035\033" +
    "\015\034\031\036\050\037\013\040\012\041\034\001\001" +
    "\000\002\001\001\000\010\004\231\006\131\013\065\001" +
    "\001\000\006\013\101\035\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\246" +
    "\006\131\013\065\001\001\000\004\025\247\001\001\000" +
    "\002\001\001\000\006\006\072\013\065\001\001\000\006" +
    "\003\252\013\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\271\006\063\013\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\267\006\063\013\065\001\001\000\006\006\072\013\065" +
    "\001\001\000\002\001\001\000\006\006\072\013\065\001" +
    "\001\000\002\001\001\000\050\007\017\011\043\013\016" +
    "\014\011\015\042\016\007\017\274\020\032\024\020\027" +
    "\021\030\006\031\044\032\035\033\015\034\031\036\050" +
    "\037\013\040\012\041\034\001\001\000\002\001\001\000" +
    "\050\007\017\011\043\013\016\014\011\015\042\016\007" +
    "\017\276\020\032\024\020\027\021\030\006\031\044\032" +
    "\035\033\015\034\031\036\050\037\013\040\012\041\034" +
    "\001\001\000\002\001\001\000\050\007\017\011\043\013" +
    "\016\014\011\015\042\016\007\017\300\020\032\024\020" +
    "\027\021\030\006\031\044\032\035\033\015\034\031\036" +
    "\050\037\013\040\012\041\034\001\001\000\002\001\001" +
    "\000\050\007\017\011\043\013\016\014\011\015\042\016" +
    "\007\017\302\020\032\024\020\027\021\030\006\031\044" +
    "\032\035\033\015\034\031\036\050\037\013\040\012\041" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\306\006\131\013\065\001\001\000\006\013\101\035" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\311\006\131\013\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\007\017\011\043\013\016\014\011" +
    "\015\042\016\007\017\314\020\032\024\020\027\021\030" +
    "\006\031\044\032\035\033\015\034\031\036\050\037\013" +
    "\040\012\041\034\001\001\000\002\001\001\000\050\007" +
    "\017\011\043\013\016\014\011\015\042\016\007\017\316" +
    "\020\032\024\020\027\021\030\006\031\044\032\035\033" +
    "\015\034\031\036\050\037\013\040\012\041\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\007\017\011\043\013\016\014\011\015\042\016\007" +
    "\017\322\020\032\024\020\027\021\030\006\031\044\032" +
    "\035\033\015\034\031\036\050\037\013\040\012\041\034" +
    "\001\001\000\002\001\001\000\050\007\017\011\043\013" +
    "\016\014\011\015\042\016\007\017\324\020\032\024\020" +
    "\027\021\030\006\031\044\032\035\033\015\034\031\036" +
    "\050\037\013\040\012\041\034\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    int erroresSintacticos = 0;
    public void syntax_error(Symbol s){ 
        erroresSintacticos++;
        //Imprimir error
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    //Método que devuelve el número de errores sintácticos
    public int getErroresSintacticos(){
        return erroresSintacticos;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio E prFin 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= DECLARACION E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un if");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= IF NT$0 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un comentar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= COMENTARIO NT$1 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un comentarioVariasLineas");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= COMENTARIO_VARIAS_LINEAS NT$2 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un asignacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= ASIGNACION NT$3 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un seleccionMultiple");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= SELECCION_MULTIPLE NT$4 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un para");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= PARA NT$5 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un paraSalto");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= PARA_SALTO NT$6 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un mientras");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= MIENTRAS NT$7 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$8 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un repetir");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= REPETIR NT$8 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$9 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un retorno");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= RETORNO NT$9 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$10 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un metodo");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= METODO NT$10 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$11 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un funcion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= FUNCION NT$11 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$12 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un ejecutar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= EJECUTAR NT$12 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$13 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un imprimir");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= IMPRIMIR NT$13 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$14 ::= 
            {
              Object RESULT =null;
System.out.println("Se realizo un IMPRIMIR_NL");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= IMPRIMIR_NL NT$14 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= error E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES O_SI prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES DE_LO_CONTRARIO prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES O_SI DE_LO_CONTRARIO prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= prIngresar VARIABLE prComo palabra prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= prIngresar VARIABLE prComo palabra prConValor tnum tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo palabra prConValor tnum tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo palabra prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMENTARIO ::= tcomentario 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMENTARIO_VARIAS_LINEAS ::= tcomentariovariaslineas 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO_VARIAS_LINEAS",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= VARIABLE FLECHA tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= LISTA_NOMBRES FLECHA tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= VARIABLE FLECHA tnum tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= LISTA_NOMBRES FLECHA tnum tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SELECCION_MULTIPLE ::= prSegun SEGUN prFinSegun 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES SEGUN 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALOR ::= tvariable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALOR ::= tcadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_NOMBRES ::= VARIABLE LISTA_NOMBRES2 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA_NOMBRES ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTA_NOMBRES2 ::= tcoma VARIABLE LISTA_NOMBRES2 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_NOMBRES2 ::= tcoma VARIABLE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= prSi CONDICION prEntonces E prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF ::= prSi CONDICION prEntonces E O_SI prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= prSi CONDICION prEntonces E DE_LO_CONTRARIO prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= prSi CONDICION prEntonces E O_SI DE_LO_CONTRARIO prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DE_LO_CONTRARIO ::= prDE_LO_CONTRARIO E DE_LO_CONTRARIO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DE_LO_CONTRARIO ::= prDE_LO_CONTRARIO E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // O_SI ::= prO_Si CONDICION prEntonces E O_SI 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // O_SI ::= prO_Si CONDICION prEntonces E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICION ::= VARIABLE tigual tigual VARIABLE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICION ::= VARIABLE tigual tigual tcadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICION ::= VARIABLE tigual tigual tnum 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VARIABLE ::= tvariable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCCIONES_CICLO ::= INSTRUCCIONES_CICLO INSTRUCCION tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTRUCCIONES_CICLO ::= INSTRUCCION tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTRUCCION ::= VARIABLE tigual VALOR 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARA ::= prPara VARIABLE FLECHA tnum prHasta tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FLECHA ::= trest tmayor 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FLECHA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARA_SALTO ::= prPara VARIABLE FLECHA tnum prHasta tnum prCon prIncremental tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA_SALTO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MIENTRAS ::= prMientras CONDICION prHacer INSTRUCCIONES_CICLO prFinMientras 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // REPETIR ::= prRepetir INSTRUCCIONES_CICLO prHasta CONDICION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RETORNO ::= prRetornar VALOR 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // METODO ::= prMetodo VARIABLE prConParametros LISTA_PARAMETROS prConValor VALOR prFinMetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // METODO ::= prMetodo VARIABLE INSTRUCCIONES prFinMetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_PARAMETROS ::= VARIABLE tcadena LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_PARAMETROS ::= VARIABLE tcadena tcoma LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCION ::= prFuncion VARIABLE tcadena prConParametros LISTA_PARAMETROS INSTRUCCIONES prFinFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCION ::= prFuncion VARIABLE tcadena INSTRUCCIONES prFinFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EJECUTAR ::= prEjecutar VARIABLE pare1 pare2 tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EJECUTAR ::= prEjecutar VARIABLE pare1 LISTA_PARAMETROS pare2 tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IMPRIMIR ::= prImprimir tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IMPRIMIR_NL ::= prImprimirNl tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
