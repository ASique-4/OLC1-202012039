
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\005\000\002\017" +
    "\004\000\002\046\002\000\002\047\002\000\002\017\006" +
    "\000\002\050\002\000\002\017\005\000\002\051\002\000" +
    "\002\017\005\000\002\052\002\000\002\017\005\000\002" +
    "\053\002\000\002\017\005\000\002\054\002\000\002\017" +
    "\005\000\002\055\002\000\002\017\005\000\002\056\002" +
    "\000\002\017\005\000\002\057\002\000\002\017\005\000" +
    "\002\060\002\000\002\017\005\000\002\061\002\000\002" +
    "\017\005\000\002\062\002\000\002\017\005\000\002\063" +
    "\002\000\002\017\005\000\002\017\004\000\002\017\004" +
    "\000\002\064\002\000\002\017\005\000\002\065\002\000" +
    "\002\017\005\000\002\017\002\000\002\044\004\000\002" +
    "\044\003\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\007\000\002\043\007" +
    "\000\002\043\007\000\002\043\007\000\002\043\007\000" +
    "\002\043\007\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\014\011\000\002\014\011\000" +
    "\002\014\012\000\002\014\012\000\002\014\011\000\002" +
    "\014\011\000\002\014\011\000\002\014\011\000\002\014" +
    "\012\000\002\014\012\000\002\014\011\000\002\014\011" +
    "\000\002\014\011\000\002\014\012\000\002\014\012\000" +
    "\002\014\011\000\002\014\011\000\002\014\011\000\002" +
    "\014\011\000\002\014\011\000\002\014\011\000\002\014" +
    "\012\000\002\014\012\000\002\014\011\000\002\015\003" +
    "\000\002\016\003\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\024\005\000" +
    "\002\025\010\000\002\025\007\000\002\010\003\000\002" +
    "\010\003\000\002\066\002\000\002\011\005\000\002\011" +
    "\002\000\002\067\002\000\002\012\006\000\002\012\004" +
    "\000\002\070\002\000\002\007\010\000\002\007\010\000" +
    "\002\007\010\000\002\007\011\000\002\021\005\000\002" +
    "\021\004\000\002\023\007\000\002\023\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\013\003" +
    "\000\002\004\005\000\002\004\004\000\002\005\005\000" +
    "\002\005\004\000\002\006\005\000\002\027\013\000\002" +
    "\026\004\000\002\030\016\000\002\031\007\000\002\032" +
    "\006\000\002\033\004\000\002\034\011\000\002\034\006" +
    "\000\002\035\005\000\002\035\006\000\002\036\011\000" +
    "\002\036\007\000\002\037\007\000\002\037\010\000\002" +
    "\040\005\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\004\015\004\001\002\000\050\003\040\004" +
    "\036\005\uff97\016\uffdd\023\024\024\043\026\041\031\ufffe" +
    "\036\027\040\021\045\050\047\026\051\012\052\031\055" +
    "\017\057\047\060\046\061\025\063\034\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\056\003" +
    "\uffe1\004\uffe1\005\uffe1\016\uffe1\023\uffe1\024\uffe1\026\uffe1" +
    "\031\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1\045" +
    "\uffe1\047\uffe1\051\uffe1\052\uffe1\055\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\063\uffe1\001\002\000\056\003\ufff1\004\ufff1\005" +
    "\ufff1\016\ufff1\023\ufff1\024\ufff1\026\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\040\ufff1\045\ufff1\047\ufff1\051" +
    "\ufff1\052\ufff1\055\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1" +
    "\001\002\000\056\003\ufff9\004\ufff9\005\ufff9\016\ufff9\023" +
    "\ufff9\024\ufff9\026\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\040\ufff9\045\ufff9\047\ufff9\051\ufff9\052\ufff9\055" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\063\ufff9\001\002\000\006" +
    "\063\064\064\065\001\002\000\056\003\040\004\036\005" +
    "\uff97\016\uffdd\023\024\024\043\026\041\031\ufffe\033\uffdd" +
    "\034\uffdd\035\uffdd\036\027\040\021\045\050\047\026\051" +
    "\012\052\031\055\017\057\047\060\046\061\025\063\034" +
    "\001\002\000\004\031\u011b\001\002\000\056\003\040\004" +
    "\036\005\uff97\016\uffdd\023\024\024\043\026\041\031\ufffe" +
    "\033\uffdd\034\uffdd\035\uffdd\036\027\040\021\045\050\047" +
    "\026\051\012\052\031\055\017\057\047\060\046\061\025" +
    "\063\034\001\002\000\056\003\uffe5\004\uffe5\005\uffe5\016" +
    "\uffe5\023\uffe5\024\uffe5\026\uffe5\031\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\040\uffe5\045\uffe5\047\uffe5\051\uffe5\052" +
    "\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\063\uffe5\001\002" +
    "\000\004\063\057\001\002\000\056\003\uffeb\004\uffeb\005" +
    "\uffeb\016\uffeb\023\uffeb\024\uffeb\026\uffeb\031\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\040\uffeb\045\uffeb\047\uffeb\051" +
    "\uffeb\052\uffeb\055\uffeb\057\uffeb\060\uffeb\061\uffeb\063\uffeb" +
    "\001\002\000\004\063\057\001\002\000\056\003\ufff3\004" +
    "\ufff3\005\ufff3\016\ufff3\023\ufff3\024\ufff3\026\ufff3\031\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\040\ufff3\045\ufff3\047" +
    "\ufff3\051\ufff3\052\ufff3\055\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\063\ufff3\001\002\000\056\003\ufff5\004\ufff5\005\ufff5\016" +
    "\ufff5\023\ufff5\024\ufff5\026\ufff5\031\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\040\ufff5\045\ufff5\047\ufff5\051\ufff5\052" +
    "\ufff5\055\ufff5\057\ufff5\060\ufff5\061\ufff5\063\ufff5\001\002" +
    "\000\056\003\uffae\004\uffae\005\uffae\016\uffae\023\uffae\024" +
    "\uffae\026\uffae\031\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\040\uffae\045\uffae\047\uffae\051\uffae\052\uffae\055\uffae\057" +
    "\uffae\060\uffae\061\uffae\063\uffae\001\002\000\006\063\064" +
    "\064\065\001\002\000\004\063\057\001\002\000\004\017" +
    "\357\001\002\000\056\003\uffe9\004\uffe9\005\uffe9\016\uffe9" +
    "\023\uffe9\024\uffe9\026\uffe9\031\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\040\uffe9\045\uffe9\047\uffe9\051\uffe9\052\uffe9" +
    "\055\uffe9\057\uffe9\060\uffe9\061\uffe9\063\uffe9\001\002\000" +
    "\004\063\057\001\002\000\004\016\341\001\002\000\056" +
    "\003\ufff7\004\ufff7\005\ufff7\016\ufff7\023\ufff7\024\ufff7\026" +
    "\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\040\ufff7" +
    "\045\ufff7\047\ufff7\051\ufff7\052\ufff7\055\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\063\ufff7\001\002\000\020\005\317\006\202" +
    "\007\175\010\173\011\174\012\201\021\uff99\001\002\000" +
    "\056\003\040\004\036\005\uff97\016\uffdd\023\024\024\043" +
    "\026\041\031\ufffe\033\uffdd\034\uffdd\035\uffdd\036\027\040" +
    "\021\045\050\047\026\051\012\052\031\055\017\057\047" +
    "\060\046\061\025\063\034\001\002\000\016\005\200\006" +
    "\202\007\175\010\173\011\226\012\201\001\002\000\056" +
    "\003\uffed\004\uffed\005\uffed\016\uffed\023\uffed\024\uffed\026" +
    "\uffed\031\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040\uffed" +
    "\045\uffed\047\uffed\051\uffed\052\uffed\055\uffed\057\uffed\060" +
    "\uffed\061\uffed\063\uffed\001\002\000\056\003\uffdf\004\uffdf" +
    "\005\uffdf\016\uffdf\023\uffdf\024\uffdf\026\uffdf\031\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\040\uffdf\045\uffdf\047\uffdf" +
    "\051\uffdf\052\uffdf\055\uffdf\057\uffdf\060\uffdf\061\uffdf\063" +
    "\uffdf\001\002\000\006\027\uff97\063\143\001\002\000\056" +
    "\003\ufffb\004\ufffb\005\ufffb\016\ufffb\023\ufffb\024\ufffb\026" +
    "\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\040\ufffb" +
    "\045\ufffb\047\ufffb\051\ufffb\052\ufffb\055\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\063\ufffb\001\002\000\056\003\uffad\004\uffad" +
    "\005\uffad\016\uffad\023\uffad\024\uffad\026\uffad\031\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\040\uffad\045\uffad\047\uffad" +
    "\051\uffad\052\uffad\055\uffad\057\uffad\060\uffad\061\uffad\063" +
    "\uffad\001\002\000\004\005\121\001\002\000\056\003\uffef" +
    "\004\uffef\005\uffef\016\uffef\023\uffef\024\uffef\026\uffef\031" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\040\uffef\045\uffef" +
    "\047\uffef\051\uffef\052\uffef\055\uffef\057\uffef\060\uffef\061" +
    "\uffef\063\uffef\001\002\000\006\063\064\064\065\001\002" +
    "\000\004\063\057\001\002\000\004\063\054\001\002\000" +
    "\056\003\uffe7\004\uffe7\005\uffe7\016\uffe7\023\uffe7\024\uffe7" +
    "\026\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040" +
    "\uffe7\045\uffe7\047\uffe7\051\uffe7\052\uffe7\055\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\063\uffe7\001\002\000\056\003\040\004" +
    "\036\005\uff97\016\uffdd\023\024\024\043\026\041\031\ufffe" +
    "\033\uffdd\034\uffdd\035\uffdd\036\027\040\021\045\050\047" +
    "\026\051\012\052\031\055\017\057\047\060\046\061\025" +
    "\063\034\001\002\000\012\016\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\001\002\000\004\062\073\001\002\000\004\037\056" +
    "\001\002\000\004\063\057\001\002\000\016\005\uff87\013" +
    "\uff87\054\uff87\062\uff87\063\uff87\064\uff87\001\002\000\004" +
    "\025\072\001\002\000\006\046\070\063\057\001\002\000" +
    "\004\062\063\001\002\000\006\063\064\064\065\001\002" +
    "\000\064\003\uff9b\004\uff9b\005\uff9b\016\uff9b\020\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\031\uff9b\033\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\040\uff9b\045\uff9b\047\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\055\uff9b\057\uff9b\060\uff9b\061\uff9b\063\uff9b" +
    "\001\002\000\064\003\uff9a\004\uff9a\005\uff9a\016\uff9a\020" +
    "\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\031\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\040\uff9a\045\uff9a\047\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\055\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\063\uff9a\001\002\000\004\025\uff82\001\002\000\004\025" +
    "\071\001\002\000\056\003\uff7e\004\uff7e\005\uff7e\016\uff7e" +
    "\023\uff7e\024\uff7e\026\uff7e\031\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\036\uff7e\040\uff7e\045\uff7e\047\uff7e\051\uff7e\052\uff7e" +
    "\055\uff7e\057\uff7e\060\uff7e\061\uff7e\063\uff7e\001\002\000" +
    "\012\041\uff84\042\uff84\046\uff84\063\uff84\001\002\000\012" +
    "\041\uff83\042\uff83\046\uff83\063\uff83\001\002\000\004\062" +
    "\074\001\002\000\010\004\077\063\075\064\076\001\002" +
    "\000\062\003\uff8a\004\uff8a\005\uff8a\016\uff8a\023\uff8a\024" +
    "\uff8a\026\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\045\uff8a\047\uff8a\051\uff8a\052" +
    "\uff8a\055\uff8a\057\uff8a\060\uff8a\061\uff8a\063\uff8a\001\002" +
    "\000\062\003\uff89\004\uff89\005\uff89\016\uff89\023\uff89\024" +
    "\uff89\026\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\045\uff89\047\uff89\051\uff89\052" +
    "\uff89\055\uff89\057\uff89\060\uff89\061\uff89\063\uff89\001\002" +
    "\000\062\003\uff88\004\uff88\005\uff88\016\uff88\023\uff88\024" +
    "\uff88\026\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\045\uff88\047\uff88\051\uff88\052" +
    "\uff88\055\uff88\057\uff88\060\uff88\061\uff88\063\uff88\001\002" +
    "\000\004\013\101\001\002\000\006\014\103\063\057\001" +
    "\002\000\004\014\112\001\002\000\004\025\111\001\002" +
    "\000\004\064\105\001\002\000\006\021\107\063\057\001" +
    "\002\000\010\014\uff79\030\uff79\063\uff79\001\002\000\004" +
    "\063\057\001\002\000\010\014\uff78\030\uff78\063\uff78\001" +
    "\002\000\056\003\uff75\004\uff75\005\uff75\016\uff75\023\uff75" +
    "\024\uff75\026\uff75\031\uff75\033\uff75\034\uff75\035\uff75\036" +
    "\uff75\040\uff75\045\uff75\047\uff75\051\uff75\052\uff75\055\uff75" +
    "\057\uff75\060\uff75\061\uff75\063\uff75\001\002\000\004\025" +
    "\113\001\002\000\056\003\uff74\004\uff74\005\uff74\016\uff74" +
    "\023\uff74\024\uff74\026\uff74\031\uff74\033\uff74\034\uff74\035" +
    "\uff74\036\uff74\040\uff74\045\uff74\047\uff74\051\uff74\052\uff74" +
    "\055\uff74\057\uff74\060\uff74\061\uff74\063\uff74\001\002\000" +
    "\004\025\115\001\002\000\056\003\uff73\004\uff73\005\uff73" +
    "\016\uff73\023\uff73\024\uff73\026\uff73\031\uff73\033\uff73\034" +
    "\uff73\035\uff73\036\uff73\040\uff73\045\uff73\047\uff73\051\uff73" +
    "\052\uff73\055\uff73\057\uff73\060\uff73\061\uff73\063\uff73\001" +
    "\002\000\056\003\040\004\036\005\uff97\016\uffdd\023\024" +
    "\024\043\026\041\031\ufffe\033\uffdd\034\uffdd\035\uffdd\036" +
    "\027\040\021\045\050\047\026\051\012\052\031\055\017" +
    "\057\047\060\046\061\025\063\034\001\002\000\012\016" +
    "\uffee\033\uffee\034\uffee\035\uffee\001\002\000\020\004\126" +
    "\063\123\064\124\075\125\076\127\102\130\106\131\001" +
    "\002\000\004\022\122\001\002\000\020\004\uff80\063\uff80" +
    "\064\uff80\075\uff80\076\uff80\102\uff80\106\uff80\001\002\000" +
    "\004\025\140\001\002\000\004\025\137\001\002\000\004" +
    "\025\136\001\002\000\004\025\135\001\002\000\004\025" +
    "\134\001\002\000\004\025\133\001\002\000\004\025\132" +
    "\001\002\000\056\003\uff9f\004\uff9f\005\uff9f\016\uff9f\023" +
    "\uff9f\024\uff9f\026\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\040\uff9f\045\uff9f\047\uff9f\051\uff9f\052\uff9f\055" +
    "\uff9f\057\uff9f\060\uff9f\061\uff9f\063\uff9f\001\002\000\056" +
    "\003\uffa2\004\uffa2\005\uffa2\016\uffa2\023\uffa2\024\uffa2\026" +
    "\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\040\uffa2" +
    "\045\uffa2\047\uffa2\051\uffa2\052\uffa2\055\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\063\uffa2\001\002\000\056\003\uffa0\004\uffa0" +
    "\005\uffa0\016\uffa0\023\uffa0\024\uffa0\026\uffa0\031\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\040\uffa0\045\uffa0\047\uffa0" +
    "\051\uffa0\052\uffa0\055\uffa0\057\uffa0\060\uffa0\061\uffa0\063" +
    "\uffa0\001\002\000\056\003\uffa4\004\uffa4\005\uffa4\016\uffa4" +
    "\023\uffa4\024\uffa4\026\uffa4\031\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\040\uffa4\045\uffa4\047\uffa4\051\uffa4\052\uffa4" +
    "\055\uffa4\057\uffa4\060\uffa4\061\uffa4\063\uffa4\001\002\000" +
    "\056\003\uffa1\004\uffa1\005\uffa1\016\uffa1\023\uffa1\024\uffa1" +
    "\026\uffa1\031\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\040" +
    "\uffa1\045\uffa1\047\uffa1\051\uffa1\052\uffa1\055\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\063\uffa1\001\002\000\056\003\uffa5\004" +
    "\uffa5\005\uffa5\016\uffa5\023\uffa5\024\uffa5\026\uffa5\031\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\040\uffa5\045\uffa5\047" +
    "\uffa5\051\uffa5\052\uffa5\055\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\063\uffa5\001\002\000\056\003\uffa3\004\uffa3\005\uffa3\016" +
    "\uffa3\023\uffa3\024\uffa3\026\uffa3\031\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\040\uffa3\045\uffa3\047\uffa3\051\uffa3\052" +
    "\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\063\uffa3\001\002" +
    "\000\056\003\040\004\036\005\uff97\016\uffdd\023\024\024" +
    "\043\026\041\031\ufffe\033\uffdd\034\uffdd\035\uffdd\036\027" +
    "\040\021\045\050\047\026\051\012\052\031\055\017\057" +
    "\047\060\046\061\025\063\034\001\002\000\012\016\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\001\002\000\006\021\uff99\027" +
    "\247\001\002\000\004\027\145\001\002\000\014\070\146" +
    "\071\152\072\147\073\151\074\150\001\002\000\004\030" +
    "\uffcb\001\002\000\004\030\uffc9\001\002\000\004\030\uffc7" +
    "\001\002\000\004\030\uffc8\001\002\000\004\030\uffca\001" +
    "\002\000\004\030\154\001\002\000\024\004\156\005\155" +
    "\006\157\063\162\064\160\075\166\076\165\102\164\106" +
    "\163\001\002\000\006\004\243\102\244\001\002\000\020" +
    "\005\200\006\202\007\175\010\173\011\226\012\201\025" +
    "\230\001\002\000\006\004\222\102\223\001\002\000\004" +
    "\025\221\001\002\000\004\025\220\001\002\000\020\005" +
    "\200\006\202\007\175\010\173\011\174\012\201\025\177" +
    "\001\002\000\004\025\172\001\002\000\004\025\171\001" +
    "\002\000\004\025\170\001\002\000\004\025\167\001\002" +
    "\000\056\003\uffb3\004\uffb3\005\uffb3\016\uffb3\023\uffb3\024" +
    "\uffb3\026\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\040\uffb3\045\uffb3\047\uffb3\051\uffb3\052\uffb3\055\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\063\uffb3\001\002\000\056\003\uffb2" +
    "\004\uffb2\005\uffb2\016\uffb2\023\uffb2\024\uffb2\026\uffb2\031" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\045\uffb2" +
    "\047\uffb2\051\uffb2\052\uffb2\055\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\063\uffb2\001\002\000\056\003\uffb4\004\uffb4\005\uffb4" +
    "\016\uffb4\023\uffb4\024\uffb4\026\uffb4\031\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\040\uffb4\045\uffb4\047\uffb4\051\uffb4" +
    "\052\uffb4\055\uffb4\057\uffb4\060\uffb4\061\uffb4\063\uffb4\001" +
    "\002\000\056\003\uffb5\004\uffb5\005\uffb5\016\uffb5\023\uffb5" +
    "\024\uffb5\026\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\040\uffb5\045\uffb5\047\uffb5\051\uffb5\052\uffb5\055\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\063\uffb5\001\002\000\010\004" +
    "\uffcd\013\uffcd\063\uffcd\001\002\000\004\107\213\001\002" +
    "\000\010\004\uffce\013\uffce\063\uffce\001\002\000\010\004" +
    "\205\013\203\063\204\001\002\000\056\003\uffb7\004\uffb7" +
    "\005\uffb7\016\uffb7\023\uffb7\024\uffb7\026\uffb7\031\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\045\uffb7\047\uffb7" +
    "\051\uffb7\052\uffb7\055\uffb7\057\uffb7\060\uffb7\061\uffb7\063" +
    "\uffb7\001\002\000\010\004\uffcf\013\uffcf\063\uffcf\001\002" +
    "\000\010\004\uffcc\013\uffcc\063\uffcc\001\002\000\010\004" +
    "\uffd0\013\uffd0\063\uffd0\001\002\000\006\004\036\063\206" +
    "\001\002\000\062\003\uffd9\004\uffd9\005\uffd9\014\uffd9\016" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\040\uffd9\045\uffd9\047\uffd9\051" +
    "\uffd9\052\uffd9\055\uffd9\057\uffd9\060\uffd9\061\uffd9\063\uffd9" +
    "\001\002\000\062\003\uffd7\004\uffd7\005\uffd7\014\uffd7\016" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\031\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\040\uffd7\045\uffd7\047\uffd7\051" +
    "\uffd7\052\uffd7\055\uffd7\057\uffd7\060\uffd7\061\uffd7\063\uffd7" +
    "\001\002\000\016\005\200\006\202\007\175\010\173\011" +
    "\174\012\201\001\002\000\004\014\212\001\002\000\010" +
    "\004\036\014\uffdb\063\206\001\002\000\004\014\uffdc\001" +
    "\002\000\062\003\uffd1\004\uffd1\005\uffd1\014\uffd1\016\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\031\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\040\uffd1\045\uffd1\047\uffd1\051\uffd1" +
    "\052\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\063\uffd1\001" +
    "\002\000\006\004\215\063\214\001\002\000\004\110\217" +
    "\001\002\000\004\110\216\001\002\000\062\003\uffd4\004" +
    "\uffd4\005\uffd4\014\uffd4\016\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\040" +
    "\uffd4\045\uffd4\047\uffd4\051\uffd4\052\uffd4\055\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\063\uffd4\001\002\000\062\003\uffd6\004" +
    "\uffd6\005\uffd6\014\uffd6\016\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\040" +
    "\uffd6\045\uffd6\047\uffd6\051\uffd6\052\uffd6\055\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\063\uffd6\001\002\000\056\003\uffaf\004" +
    "\uffaf\005\uffaf\016\uffaf\023\uffaf\024\uffaf\026\uffaf\031\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\040\uffaf\045\uffaf\047" +
    "\uffaf\051\uffaf\052\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\063\uffaf\001\002\000\056\003\uffb6\004\uffb6\005\uffb6\016" +
    "\uffb6\023\uffb6\024\uffb6\026\uffb6\031\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\040\uffb6\045\uffb6\047\uffb6\051\uffb6\052" +
    "\uffb6\055\uffb6\057\uffb6\060\uffb6\061\uffb6\063\uffb6\001\002" +
    "\000\004\025\225\001\002\000\004\025\224\001\002\000" +
    "\056\003\uffb0\004\uffb0\005\uffb0\016\uffb0\023\uffb0\024\uffb0" +
    "\026\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040" +
    "\uffb0\045\uffb0\047\uffb0\051\uffb0\052\uffb0\055\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\063\uffb0\001\002\000\056\003\uffb8\004" +
    "\uffb8\005\uffb8\016\uffb8\023\uffb8\024\uffb8\026\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\045\uffb8\047" +
    "\uffb8\051\uffb8\052\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\063\uffb8\001\002\000\004\107\236\001\002\000\010\004" +
    "\233\013\232\063\231\001\002\000\056\003\uffba\004\uffba" +
    "\005\uffba\016\uffba\023\uffba\024\uffba\026\uffba\031\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\040\uffba\045\uffba\047\uffba" +
    "\051\uffba\052\uffba\055\uffba\057\uffba\060\uffba\061\uffba\063" +
    "\uffba\001\002\000\062\003\uffd8\004\uffd8\005\uffd8\014\uffd8" +
    "\016\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\045\uffd8\047\uffd8" +
    "\051\uffd8\052\uffd8\055\uffd8\057\uffd8\060\uffd8\061\uffd8\063" +
    "\uffd8\001\002\000\006\004\036\063\206\001\002\000\062" +
    "\003\uffda\004\uffda\005\uffda\014\uffda\016\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\031\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\040\uffda\045\uffda\047\uffda\051\uffda\052\uffda\055" +
    "\uffda\057\uffda\060\uffda\061\uffda\063\uffda\001\002\000\004" +
    "\014\235\001\002\000\062\003\uffd2\004\uffd2\005\uffd2\014" +
    "\uffd2\016\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\031\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\045\uffd2\047" +
    "\uffd2\051\uffd2\052\uffd2\055\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\063\uffd2\001\002\000\006\004\240\063\237\001\002\000" +
    "\004\110\242\001\002\000\004\110\241\001\002\000\062" +
    "\003\uffd3\004\uffd3\005\uffd3\014\uffd3\016\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\040\uffd3\045\uffd3\047\uffd3\051\uffd3\052\uffd3\055" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\063\uffd3\001\002\000\062" +
    "\003\uffd5\004\uffd5\005\uffd5\014\uffd5\016\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\040\uffd5\045\uffd5\047\uffd5\051\uffd5\052\uffd5\055" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\063\uffd5\001\002\000\004" +
    "\025\246\001\002\000\004\025\245\001\002\000\056\003" +
    "\uffb1\004\uffb1\005\uffb1\016\uffb1\023\uffb1\024\uffb1\026\uffb1" +
    "\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\040\uffb1\045" +
    "\uffb1\047\uffb1\051\uffb1\052\uffb1\055\uffb1\057\uffb1\060\uffb1" +
    "\061\uffb1\063\uffb1\001\002\000\056\003\uffb9\004\uffb9\005" +
    "\uffb9\016\uffb9\023\uffb9\024\uffb9\026\uffb9\031\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\040\uffb9\045\uffb9\047\uffb9\051" +
    "\uffb9\052\uffb9\055\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9" +
    "\001\002\000\014\070\146\071\152\072\147\073\151\074" +
    "\150\001\002\000\004\021\252\001\002\000\006\005\uff98" +
    "\027\uff98\001\002\000\004\063\253\001\002\000\010\005" +
    "\uff94\021\uff96\027\uff94\001\002\000\004\021\252\001\002" +
    "\000\006\005\uff95\027\uff95\001\002\000\004\030\257\001" +
    "\002\000\024\004\261\005\260\006\262\063\265\064\263" +
    "\075\271\076\270\102\267\106\266\001\002\000\006\004" +
    "\306\102\307\001\002\000\020\005\200\006\202\007\175" +
    "\010\173\011\226\012\201\025\305\001\002\000\006\004" +
    "\301\102\302\001\002\000\004\025\300\001\002\000\004" +
    "\025\277\001\002\000\020\005\200\006\202\007\175\010" +
    "\173\011\174\012\201\025\276\001\002\000\004\025\275" +
    "\001\002\000\004\025\274\001\002\000\004\025\273\001" +
    "\002\000\004\025\272\001\002\000\056\003\uffc1\004\uffc1" +
    "\005\uffc1\016\uffc1\023\uffc1\024\uffc1\026\uffc1\031\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\040\uffc1\045\uffc1\047\uffc1" +
    "\051\uffc1\052\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1\063" +
    "\uffc1\001\002\000\056\003\uffc2\004\uffc2\005\uffc2\016\uffc2" +
    "\023\uffc2\024\uffc2\026\uffc2\031\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\040\uffc2\045\uffc2\047\uffc2\051\uffc2\052\uffc2" +
    "\055\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2\001\002\000" +
    "\056\003\uffbf\004\uffbf\005\uffbf\016\uffbf\023\uffbf\024\uffbf" +
    "\026\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040" +
    "\uffbf\045\uffbf\047\uffbf\051\uffbf\052\uffbf\055\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\063\uffbf\001\002\000\056\003\uffbc\004" +
    "\uffbc\005\uffbc\016\uffbc\023\uffbc\024\uffbc\026\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\040\uffbc\045\uffbc\047" +
    "\uffbc\051\uffbc\052\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\063\uffbc\001\002\000\056\003\uffc0\004\uffc0\005\uffc0\016" +
    "\uffc0\023\uffc0\024\uffc0\026\uffc0\031\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\040\uffc0\045\uffc0\047\uffc0\051\uffc0\052" +
    "\uffc0\055\uffc0\057\uffc0\060\uffc0\061\uffc0\063\uffc0\001\002" +
    "\000\056\003\uffbb\004\uffbb\005\uffbb\016\uffbb\023\uffbb\024" +
    "\uffbb\026\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\040\uffbb\045\uffbb\047\uffbb\051\uffbb\052\uffbb\055\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\063\uffbb\001\002\000\056\003\uffc6" +
    "\004\uffc6\005\uffc6\016\uffc6\023\uffc6\024\uffc6\026\uffc6\031" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\045\uffc6" +
    "\047\uffc6\051\uffc6\052\uffc6\055\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\063\uffc6\001\002\000\004\025\304\001\002\000\004" +
    "\025\303\001\002\000\056\003\uffbd\004\uffbd\005\uffbd\016" +
    "\uffbd\023\uffbd\024\uffbd\026\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\040\uffbd\045\uffbd\047\uffbd\051\uffbd\052" +
    "\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd\063\uffbd\001\002" +
    "\000\056\003\uffc3\004\uffc3\005\uffc3\016\uffc3\023\uffc3\024" +
    "\uffc3\026\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\040\uffc3\045\uffc3\047\uffc3\051\uffc3\052\uffc3\055\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\063\uffc3\001\002\000\056\003\uffc5" +
    "\004\uffc5\005\uffc5\016\uffc5\023\uffc5\024\uffc5\026\uffc5\031" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\045\uffc5" +
    "\047\uffc5\051\uffc5\052\uffc5\055\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\063\uffc5\001\002\000\004\025\311\001\002\000\004" +
    "\025\310\001\002\000\056\003\uffbe\004\uffbe\005\uffbe\016" +
    "\uffbe\023\uffbe\024\uffbe\026\uffbe\031\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\040\uffbe\045\uffbe\047\uffbe\051\uffbe\052" +
    "\uffbe\055\uffbe\057\uffbe\060\uffbe\061\uffbe\063\uffbe\001\002" +
    "\000\056\003\uffc4\004\uffc4\005\uffc4\016\uffc4\023\uffc4\024" +
    "\uffc4\026\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\040\uffc4\045\uffc4\047\uffc4\051\uffc4\052\uffc4\055\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\063\uffc4\001\002\000\056\003\040" +
    "\004\036\005\uff97\016\uffdd\023\024\024\043\026\041\031" +
    "\ufffe\033\uffdd\034\uffdd\035\uffdd\036\027\040\021\045\050" +
    "\047\026\051\012\052\031\055\017\057\047\060\046\061" +
    "\025\063\034\001\002\000\012\016\uffde\033\uffde\034\uffde" +
    "\035\uffde\001\002\000\056\003\040\004\036\005\uff97\016" +
    "\uffdd\023\024\024\043\026\041\031\ufffe\033\uffdd\034\uffdd" +
    "\035\uffdd\036\027\040\021\045\050\047\026\051\012\052" +
    "\031\055\017\057\047\060\046\061\025\063\034\001\002" +
    "\000\012\016\uffec\033\uffec\034\uffec\035\uffec\001\002\000" +
    "\012\016\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002\000\012" +
    "\004\uffcf\013\uffcf\022\122\063\uffcf\001\002\000\020\004" +
    "\324\063\322\064\321\075\323\076\325\102\326\106\327" +
    "\001\002\000\004\025\336\001\002\000\004\025\335\001" +
    "\002\000\004\025\334\001\002\000\004\025\333\001\002" +
    "\000\004\025\332\001\002\000\004\025\331\001\002\000" +
    "\004\025\330\001\002\000\056\003\uffa6\004\uffa6\005\uffa6" +
    "\016\uffa6\023\uffa6\024\uffa6\026\uffa6\031\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\040\uffa6\045\uffa6\047\uffa6\051\uffa6" +
    "\052\uffa6\055\uffa6\057\uffa6\060\uffa6\061\uffa6\063\uffa6\001" +
    "\002\000\056\003\uffa9\004\uffa9\005\uffa9\016\uffa9\023\uffa9" +
    "\024\uffa9\026\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\040\uffa9\045\uffa9\047\uffa9\051\uffa9\052\uffa9\055\uffa9" +
    "\057\uffa9\060\uffa9\061\uffa9\063\uffa9\001\002\000\056\003" +
    "\uffa7\004\uffa7\005\uffa7\016\uffa7\023\uffa7\024\uffa7\026\uffa7" +
    "\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\040\uffa7\045" +
    "\uffa7\047\uffa7\051\uffa7\052\uffa7\055\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\063\uffa7\001\002\000\056\003\uffab\004\uffab\005" +
    "\uffab\016\uffab\023\uffab\024\uffab\026\uffab\031\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\040\uffab\045\uffab\047\uffab\051" +
    "\uffab\052\uffab\055\uffab\057\uffab\060\uffab\061\uffab\063\uffab" +
    "\001\002\000\056\003\uffa8\004\uffa8\005\uffa8\016\uffa8\023" +
    "\uffa8\024\uffa8\026\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\040\uffa8\045\uffa8\047\uffa8\051\uffa8\052\uffa8\055" +
    "\uffa8\057\uffa8\060\uffa8\061\uffa8\063\uffa8\001\002\000\056" +
    "\003\uffaa\004\uffaa\005\uffaa\016\uffaa\023\uffaa\024\uffaa\026" +
    "\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\040\uffaa" +
    "\045\uffaa\047\uffaa\051\uffaa\052\uffaa\055\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\063\uffaa\001\002\000\056\003\uffac\004\uffac" +
    "\005\uffac\016\uffac\023\uffac\024\uffac\026\uffac\031\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\040\uffac\045\uffac\047\uffac" +
    "\051\uffac\052\uffac\055\uffac\057\uffac\060\uffac\061\uffac\063" +
    "\uffac\001\002\000\056\003\040\004\036\005\uff97\016\uffdd" +
    "\023\024\024\043\026\041\031\ufffe\033\uffdd\034\uffdd\035" +
    "\uffdd\036\027\040\021\045\050\047\026\051\012\052\031" +
    "\055\017\057\047\060\046\061\025\063\034\001\002\000" +
    "\012\016\ufff6\033\ufff6\034\ufff6\035\ufff6\001\002\000\004" +
    "\002\000\001\002\000\006\054\343\063\057\001\002\000" +
    "\004\063\057\001\002\000\004\053\350\001\002\000\004" +
    "\025\346\001\002\000\014\017\uff85\053\uff85\056\uff85\063" +
    "\057\065\uff85\001\002\000\012\017\uff86\053\uff86\056\uff86" +
    "\065\uff86\001\002\000\056\003\uff7a\004\uff7a\005\uff7a\016" +
    "\uff7a\023\uff7a\024\uff7a\026\uff7a\031\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\040\uff7a\045\uff7a\047\uff7a\051\uff7a\052" +
    "\uff7a\055\uff7a\057\uff7a\060\uff7a\061\uff7a\063\uff7a\001\002" +
    "\000\004\030\352\001\002\000\006\063\064\064\065\001" +
    "\002\000\004\053\354\001\002\000\056\003\uff7b\004\uff7b" +
    "\005\uff7b\016\uff7b\023\uff7b\024\uff7b\026\uff7b\031\uff7b\033" +
    "\uff7b\034\uff7b\035\uff7b\036\uff7b\040\uff7b\045\uff7b\047\uff7b" +
    "\051\uff7b\052\uff7b\055\uff7b\057\uff7b\060\uff7b\061\uff7b\063" +
    "\uff7b\001\002\000\056\003\040\004\036\005\uff97\016\uffdd" +
    "\023\024\024\043\026\041\031\ufffe\033\uffdd\034\uffdd\035" +
    "\uffdd\036\027\040\021\045\050\047\026\051\012\052\031" +
    "\055\017\057\047\060\046\061\025\063\034\001\002\000" +
    "\012\016\uffe8\033\uffe8\034\uffe8\035\uffe8\001\002\000\006" +
    "\063\064\064\065\001\002\000\004\065\361\001\002\000" +
    "\056\003\uff9e\004\uff9e\005\uff9e\016\uff9e\023\uff9e\024\uff9e" +
    "\026\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\040" +
    "\uff9e\045\uff9e\047\uff9e\051\uff9e\052\uff9e\055\uff9e\057\uff9e" +
    "\060\uff9e\061\uff9e\063\uff9e\001\002\000\004\020\363\001" +
    "\002\000\004\032\364\001\002\000\004\063\057\001\002" +
    "\000\006\017\357\065\uff9c\001\002\000\004\065\uff9d\001" +
    "\002\000\006\041\370\063\057\001\002\000\004\063\054" +
    "\001\002\000\056\003\uff7d\004\uff7d\005\uff7d\016\uff7d\023" +
    "\uff7d\024\uff7d\026\uff7d\031\uff7d\033\uff7d\034\uff7d\035\uff7d" +
    "\036\uff7d\040\uff7d\045\uff7d\047\uff7d\051\uff7d\052\uff7d\055" +
    "\uff7d\057\uff7d\060\uff7d\061\uff7d\063\uff7d\001\002\000\004" +
    "\025\373\001\002\000\056\003\uff72\004\uff72\005\uff72\016" +
    "\uff72\023\uff72\024\uff72\026\uff72\031\uff72\033\uff72\034\uff72" +
    "\035\uff72\036\uff72\040\uff72\045\uff72\047\uff72\051\uff72\052" +
    "\uff72\055\uff72\057\uff72\060\uff72\061\uff72\063\uff72\001\002" +
    "\000\056\003\040\004\036\005\uff97\016\uffdd\023\024\024" +
    "\043\026\041\031\ufffe\033\uffdd\034\uffdd\035\uffdd\036\027" +
    "\040\021\045\050\047\026\051\012\052\031\055\017\057" +
    "\047\060\046\061\025\063\034\001\002\000\012\016\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\001\002\000\056\003\040\004" +
    "\036\005\uff97\016\uffdd\023\024\024\043\026\041\031\ufffe" +
    "\033\uffdd\034\uffdd\035\uffdd\036\027\040\021\045\050\047" +
    "\026\051\012\052\031\055\017\057\047\060\046\061\025" +
    "\063\034\001\002\000\012\016\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\001\002\000\004\005\121\001\002\000\004\004\u0102" +
    "\001\002\000\004\041\u0103\001\002\000\004\004\u0104\001" +
    "\002\000\006\037\u0105\043\u0106\001\002\000\004\063\057" +
    "\001\002\000\004\044\u0107\001\002\000\004\004\u0108\001" +
    "\002\000\004\037\u0109\001\002\000\004\063\057\001\002" +
    "\000\006\042\u010b\063\057\001\002\000\056\003\uff7f\004" +
    "\uff7f\005\uff7f\016\uff7f\023\uff7f\024\uff7f\026\uff7f\031\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\036\uff7f\040\uff7f\045\uff7f\047" +
    "\uff7f\051\uff7f\052\uff7f\055\uff7f\057\uff7f\060\uff7f\061\uff7f" +
    "\063\uff7f\001\002\000\006\042\u010d\063\057\001\002\000" +
    "\056\003\uff81\004\uff81\005\uff81\016\uff81\023\uff81\024\uff81" +
    "\026\uff81\031\uff81\033\uff81\034\uff81\035\uff81\036\uff81\040" +
    "\uff81\045\uff81\047\uff81\051\uff81\052\uff81\055\uff81\057\uff81" +
    "\060\uff81\061\uff81\063\uff81\001\002\000\056\003\040\004" +
    "\036\005\uff97\016\uffdd\023\024\024\043\026\041\031\ufffe" +
    "\033\uffdd\034\uffdd\035\uffdd\036\027\040\021\045\050\047" +
    "\026\051\012\052\031\055\017\057\047\060\046\061\025" +
    "\063\034\001\002\000\012\016\uffea\033\uffea\034\uffea\035" +
    "\uffea\001\002\000\004\064\u0111\001\002\000\006\054\u0112" +
    "\063\057\001\002\000\004\063\057\001\002\000\004\056" +
    "\u0114\001\002\000\056\003\uff76\004\uff76\005\uff76\016\uff76" +
    "\023\uff76\024\uff76\026\uff76\031\uff76\033\uff76\034\uff76\035" +
    "\uff76\036\uff76\040\uff76\045\uff76\047\uff76\051\uff76\052\uff76" +
    "\055\uff76\057\uff76\060\uff76\061\uff76\063\uff76\001\002\000" +
    "\004\063\057\001\002\000\004\056\u0117\001\002\000\056" +
    "\003\uff77\004\uff77\005\uff77\016\uff77\023\uff77\024\uff77\026" +
    "\uff77\031\uff77\033\uff77\034\uff77\035\uff77\036\uff77\040\uff77" +
    "\045\uff77\047\uff77\051\uff77\052\uff77\055\uff77\057\uff77\060" +
    "\uff77\061\uff77\063\uff77\001\002\000\056\003\040\004\036" +
    "\005\uff97\016\uffdd\023\024\024\043\026\041\031\ufffe\033" +
    "\uffdd\034\uffdd\035\uffdd\036\027\040\021\045\050\047\026" +
    "\051\012\052\031\055\017\057\047\060\046\061\025\063" +
    "\034\001\002\000\012\016\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\001\002\000\012\016\uffe3\033\uffe3\034\uffe3\035\uffe3\001" +
    "\002\000\004\063\054\001\002\000\056\003\ufffd\004\ufffd" +
    "\005\ufffd\016\ufffd\023\ufffd\024\ufffd\026\ufffd\031\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd\045\ufffd\047\ufffd" +
    "\051\ufffd\052\ufffd\055\ufffd\057\ufffd\060\ufffd\061\ufffd\063" +
    "\ufffd\001\002\000\056\003\040\004\036\005\uff97\016\uffdd" +
    "\023\024\024\043\026\041\031\ufffe\033\uffdd\034\uffdd\035" +
    "\uffdd\036\027\040\021\045\050\047\026\051\012\052\031" +
    "\055\017\057\047\060\046\061\025\063\034\001\002\000" +
    "\012\016\ufffc\033\ufffc\034\ufffc\035\ufffc\001\002\000\004" +
    "\032\u0120\001\002\000\054\003\040\004\036\005\uff97\023" +
    "\024\024\043\026\041\031\ufffe\033\uffdd\034\uffdd\035\uffdd" +
    "\036\027\040\021\045\050\047\026\051\012\052\031\055" +
    "\017\057\047\060\046\061\025\063\034\001\002\000\010" +
    "\033\uff93\034\u0126\035\u0122\001\002\000\052\003\040\004" +
    "\036\005\uff97\023\024\024\043\026\041\031\ufffe\033\uffdd" +
    "\035\uffdd\036\027\040\021\045\050\047\026\051\012\052" +
    "\031\055\017\057\047\060\046\061\025\063\034\001\002" +
    "\000\004\033\u012f\001\002\000\004\033\u012e\001\002\000" +
    "\006\033\u012c\035\u0122\001\002\000\004\063\054\001\002" +
    "\000\004\032\u0128\001\002\000\054\003\040\004\036\005" +
    "\uff97\023\024\024\043\026\041\031\ufffe\033\uffdd\034\uffdd" +
    "\035\uffdd\036\027\040\021\045\050\047\026\051\012\052" +
    "\031\055\017\057\047\060\046\061\025\063\034\001\002" +
    "\000\010\033\uff8b\034\u0126\035\uff8b\001\002\000\006\033" +
    "\uff8c\035\uff8c\001\002\000\004\033\u012d\001\002\000\056" +
    "\003\uff91\004\uff91\005\uff91\016\uff91\023\uff91\024\uff91\026" +
    "\uff91\031\uff91\033\uff91\034\uff91\035\uff91\036\uff91\040\uff91" +
    "\045\uff91\047\uff91\051\uff91\052\uff91\055\uff91\057\uff91\060" +
    "\uff91\061\uff91\063\uff91\001\002\000\056\003\uff8f\004\uff8f" +
    "\005\uff8f\016\uff8f\023\uff8f\024\uff8f\026\uff8f\031\uff8f\033" +
    "\uff8f\034\uff8f\035\uff8f\036\uff8f\040\uff8f\045\uff8f\047\uff8f" +
    "\051\uff8f\052\uff8f\055\uff8f\057\uff8f\060\uff8f\061\uff8f\063" +
    "\uff8f\001\002\000\056\003\uff92\004\uff92\005\uff92\016\uff92" +
    "\023\uff92\024\uff92\026\uff92\031\uff92\033\uff92\034\uff92\035" +
    "\uff92\036\uff92\040\uff92\045\uff92\047\uff92\051\uff92\052\uff92" +
    "\055\uff92\057\uff92\060\uff92\061\uff92\063\uff92\001\002\000" +
    "\056\003\uff90\004\uff90\005\uff90\016\uff90\023\uff90\024\uff90" +
    "\026\uff90\031\uff90\033\uff90\034\uff90\035\uff90\036\uff90\040" +
    "\uff90\045\uff90\047\uff90\051\uff90\052\uff90\055\uff90\057\uff90" +
    "\060\uff90\061\uff90\063\uff90\001\002\000\006\033\uff8d\035" +
    "\u0122\001\002\000\004\033\uff8e\001\002\000\012\016\uffff" +
    "\033\uffff\034\uffff\035\uffff\001\002\000\056\003\uff7c\004" +
    "\uff7c\005\uff7c\016\uff7c\023\uff7c\024\uff7c\026\uff7c\031\uff7c" +
    "\033\uff7c\034\uff7c\035\uff7c\036\uff7c\040\uff7c\045\uff7c\047" +
    "\uff7c\051\uff7c\052\uff7c\055\uff7c\057\uff7c\060\uff7c\061\uff7c" +
    "\063\uff7c\001\002\000\056\003\040\004\036\005\uff97\016" +
    "\uffdd\023\024\024\043\026\041\031\ufffe\033\uffdd\034\uffdd" +
    "\035\uffdd\036\027\040\021\045\050\047\026\051\012\052" +
    "\031\055\017\057\047\060\046\061\025\063\034\001\002" +
    "\000\012\016\ufff8\033\ufff8\034\ufff8\035\ufff8\001\002\000" +
    "\056\003\040\004\036\005\uff97\016\uffdd\023\024\024\043" +
    "\026\041\031\ufffe\033\uffdd\034\uffdd\035\uffdd\036\027\040" +
    "\021\045\050\047\026\051\012\052\031\055\017\057\047" +
    "\060\046\061\025\063\034\001\002\000\012\016\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\001\002\000\056\003\040\004\036" +
    "\005\uff97\016\uffdd\023\024\024\043\026\041\031\ufffe\033" +
    "\uffdd\034\uffdd\035\uffdd\036\027\040\021\045\050\047\026" +
    "\051\012\052\031\055\017\057\047\060\046\061\025\063" +
    "\034\001\002\000\012\016\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\004\002\004\001\001\000\050\011\043\014" +
    "\012\015\041\016\010\017\031\020\032\024\022\027\021" +
    "\030\007\031\044\032\036\033\017\034\027\036\050\037" +
    "\015\040\014\041\034\043\006\046\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\u0137\001\001\000" +
    "\004\055\u0135\001\001\000\004\051\u0133\001\001\000\004" +
    "\010\u0132\001\001\000\050\011\043\014\012\015\041\016" +
    "\010\017\u0131\020\032\024\022\027\021\030\007\031\044" +
    "\032\036\033\017\034\027\036\050\037\015\040\014\041" +
    "\034\043\006\046\013\001\001\000\004\007\u011b\001\001" +
    "\000\050\011\043\014\012\015\041\016\010\017\u0119\020" +
    "\032\024\022\027\021\030\007\031\044\032\036\033\017" +
    "\034\027\036\050\037\015\040\014\041\034\043\006\046" +
    "\013\001\001\000\004\063\u0117\001\001\000\004\013\u010f" +
    "\001\001\000\004\060\u010d\001\001\000\004\013\377\001" +
    "\001\000\004\054\375\001\001\000\004\053\373\001\001" +
    "\000\002\001\001\000\004\010\371\001\001\000\010\005" +
    "\366\006\057\013\061\001\001\000\004\025\357\001\001" +
    "\000\004\061\354\001\001\000\004\013\341\001\001\000" +
    "\002\001\001\000\004\052\336\001\001\000\010\026\317" +
    "\045\175\066\247\001\001\000\050\011\043\014\012\015" +
    "\041\016\010\017\315\020\032\024\022\027\021\030\007" +
    "\031\044\032\036\033\017\034\027\036\050\037\015\040" +
    "\014\041\034\043\006\046\013\001\001\000\004\045\226" +
    "\001\001\000\004\057\313\001\001\000\004\065\311\001" +
    "\001\000\004\011\143\001\001\000\004\050\140\001\001" +
    "\000\002\001\001\000\004\026\117\001\001\000\004\056" +
    "\115\001\001\000\004\010\113\001\001\000\004\013\077" +
    "\001\001\000\004\003\054\001\001\000\004\062\051\001" +
    "\001\000\050\011\043\014\012\015\041\016\010\017\052" +
    "\020\032\024\022\027\021\030\007\031\044\032\036\033" +
    "\017\034\027\036\050\037\015\040\014\041\034\043\006" +
    "\046\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\060\006\057\013\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\066\013" +
    "\061\001\001\000\002\001\001\000\004\010\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\103\035\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\103\035\105" +
    "\001\001\000\002\001\001\000\006\013\103\035\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\043\014\012\015\041\016\010\017\116\020\032" +
    "\024\022\027\021\030\007\031\044\032\036\033\017\034" +
    "\027\036\050\037\015\040\014\041\034\043\006\046\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\043" +
    "\014\012\015\041\016\010\017\141\020\032\024\022\027" +
    "\021\030\007\031\044\032\036\033\017\034\027\036\050" +
    "\037\015\040\014\041\034\043\006\046\013\001\001\000" +
    "\002\001\001\000\004\066\247\001\001\000\002\001\001" +
    "\000\004\042\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\160\001\001\000\002\001" +
    "\001\000\004\045\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\207\044\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\175\001\001\000\002\001\001\000\006" +
    "\043\207\044\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\207" +
    "\044\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\255\001\001\000\004\012\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\253\001\001" +
    "\000\004\012\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\263\001\001\000\002\001\001\000\004" +
    "\045\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\043\014\012\015\041\016\010\017\312\020\032\024" +
    "\022\027\021\030\007\031\044\032\036\033\017\034\027" +
    "\036\050\037\015\040\014\041\034\043\006\046\013\001" +
    "\001\000\002\001\001\000\050\011\043\014\012\015\041" +
    "\016\010\017\314\020\032\024\022\027\021\030\007\031" +
    "\044\032\036\033\017\034\027\036\050\037\015\040\014" +
    "\041\034\043\006\046\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\043\014\012\015\041\016\010\017" +
    "\337\020\032\024\022\027\021\030\007\031\044\032\036" +
    "\033\017\034\027\036\050\037\015\040\014\041\034\043" +
    "\006\046\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\343\006\344\013\061\001\001\000\006\013" +
    "\103\035\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\346\006\344\013\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\043\014\012\015\041\016\010\017\355\020\032\024\022" +
    "\027\021\030\007\031\044\032\036\033\017\034\027\036" +
    "\050\037\015\040\014\041\034\043\006\046\013\001\001" +
    "\000\002\001\001\000\004\010\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\364\006\344\013\061\001\001\000\004\025" +
    "\365\001\001\000\002\001\001\000\006\006\066\013\061" +
    "\001\001\000\004\003\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\043\014\012" +
    "\015\041\016\010\017\374\020\032\024\022\027\021\030" +
    "\007\031\044\032\036\033\017\034\027\036\050\037\015" +
    "\040\014\041\034\043\006\046\013\001\001\000\002\001" +
    "\001\000\050\011\043\014\012\015\041\016\010\017\376" +
    "\020\032\024\022\027\021\030\007\031\044\032\036\033" +
    "\017\034\027\036\050\037\015\040\014\041\034\043\006" +
    "\046\013\001\001\000\002\001\001\000\004\026\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\u010b\006\057\013\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\u0109\006\057\013\061\001\001\000\006\006" +
    "\066\013\061\001\001\000\002\001\001\000\006\006\066" +
    "\013\061\001\001\000\002\001\001\000\050\011\043\014" +
    "\012\015\041\016\010\017\u010e\020\032\024\022\027\021" +
    "\030\007\031\044\032\036\033\017\034\027\036\050\037" +
    "\015\040\014\041\034\043\006\046\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\u0112\006\344\013" +
    "\061\001\001\000\006\013\103\035\u0114\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\u0115\006\344\013" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\043\014\012\015\041\016\010\017\u0118\020\032\024" +
    "\022\027\021\030\007\031\044\032\036\033\017\034\027" +
    "\036\050\037\015\040\014\041\034\043\006\046\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u011e" +
    "\001\001\000\004\047\u011c\001\001\000\050\011\043\014" +
    "\012\015\041\016\010\017\u011d\020\032\024\022\027\021" +
    "\030\007\031\044\032\036\033\017\034\027\036\050\037" +
    "\015\040\014\041\034\043\006\046\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\011\043\014\012\015" +
    "\041\016\010\017\u0120\020\032\024\022\027\021\030\007" +
    "\031\044\032\036\033\017\034\027\036\050\037\015\040" +
    "\014\041\034\043\006\046\013\001\001\000\010\021\u0122" +
    "\023\u0124\070\u0123\001\001\000\050\011\043\014\012\015" +
    "\041\016\010\017\u012f\020\032\024\022\027\021\030\007" +
    "\031\044\032\036\033\017\034\027\036\050\037\015\040" +
    "\014\041\034\043\006\046\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u012a\001\001\000\004\003" +
    "\u0126\001\001\000\002\001\001\000\050\011\043\014\012" +
    "\015\041\016\010\017\u0128\020\032\024\022\027\021\030" +
    "\007\031\044\032\036\033\017\034\027\036\050\037\015" +
    "\040\014\041\034\043\006\046\013\001\001\000\004\023" +
    "\u0129\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\011\043\014\012\015" +
    "\041\016\010\017\u0134\020\032\024\022\027\021\030\007" +
    "\031\044\032\036\033\017\034\027\036\050\037\015\040" +
    "\014\041\034\043\006\046\013\001\001\000\002\001\001" +
    "\000\050\011\043\014\012\015\041\016\010\017\u0136\020" +
    "\032\024\022\027\021\030\007\031\044\032\036\033\017" +
    "\034\027\036\050\037\015\040\014\041\034\043\006\046" +
    "\013\001\001\000\002\001\001\000\050\011\043\014\012" +
    "\015\041\016\010\017\u0138\020\032\024\022\027\021\030" +
    "\007\031\044\032\036\033\017\034\027\036\050\037\015" +
    "\040\014\041\034\043\006\046\013\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    
    public String python = "";
    public String golang = "";
    public int erroresSintacticos = 0;
    String condicion = "";
    String instruccion = "";
    String tmpInstruccion = "";
    String valor = "";
    String tmpPython = "";
    String tmpImprimir = "";
    ArrayList<String> tmpListaNombres = new ArrayList<String>();
    ArrayList<String> tmpOperacion = new ArrayList<String>();
    String tmpOperacion2 = "";
    String tmpOperdor = "";
    String tmpOperdor2 = "";
    public void syntax_error(Symbol s){ 
        erroresSintacticos++;
        //Imprimir error
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    
    
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio E prFin 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= DECLARACION E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
tmpPython += "if ";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
System.out.println("Se realizo un if");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= NT$0 IF NT$1 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= COMENTARIO NT$2 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentarioVariasLineas");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= COMENTARIO_VARIAS_LINEAS NT$3 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un asignacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= ASIGNACION NT$4 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un seleccionMultiple");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= SELECCION_MULTIPLE NT$5 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un para");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= PARA NT$6 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un paraSalto");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= PARA_SALTO NT$7 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un mientras");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= MIENTRAS NT$8 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un repetir");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= REPETIR NT$9 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un retorno");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= RETORNO NT$10 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un metodo");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= METODO NT$11 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$12 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un funcion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= FUNCION NT$12 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$13 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un ejecutar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= EJECUTAR NT$13 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= IMPRIMIR E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= IMPRIMIR_NL E 
            {
              String RESULT =null;
		tmpInstruccion += tmpImprimir; tmpImprimir = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$14 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo una operacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= OPERACION NT$14 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$15 ::= 
            {
              String RESULT =null;
tmpPython = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",51, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= error NT$15 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACIONES ::= OPERACION OPERACIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACIONES ::= OPERACION 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= tnum OPERADORES tnum 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		tmpOperacion.add(a + tmpOperdor + b); tmpOperdor = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= tvariable OPERADORES tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		tmpOperacion.add(a + tmpOperdor + b); tmpOperdor = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= tnum OPERADORES tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		tmpOperacion.add(a + tmpOperdor + b); tmpOperdor = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION ::= tvariable OPERADORES tnum 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		tmpOperacion.add(a + tmpOperdor + b); tmpOperdor = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= tvariable tpot cor1 tvariable cor2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		tmpOperacion.add(a + "**" + b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= tnum tpot cor1 tvariable cor2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		tmpOperacion.add(a + "**" + b); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= tvariable tpot cor1 tnum cor2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		tmpOperacion.add(a + "**" + b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= tnum tpot cor1 tnum cor2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		tmpOperacion.add(a + "**" + b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION ::= tnum OPERADORES pare1 OPERACIONES pare2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		tmpOperacion2 += "(" + a + tmpOperdor2 + tmpOperacion + ")"; tmpOperdor2 = ""; ArrayList<String> tmpOperacion = new ArrayList<String>();
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION ::= tvariable OPERADORES pare1 OPERACIONES pare2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		tmpOperacion2 += "(" + a + tmpOperdor2 + tmpOperacion + ")"; tmpOperdor2 = ""; ArrayList<String> tmpOperacion = new ArrayList<String>();
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERADORES ::= tsum 
            {
              String RESULT =null;
		tmpOperdor = "+"; tmpOperdor2 = "+";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADORES ::= trest 
            {
              String RESULT =null;
		tmpOperdor = "-"; tmpOperdor2 = "-";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADORES ::= tdiv 
            {
              String RESULT =null;
		tmpOperdor = "/"; tmpOperdor2 = "/";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADORES ::= tmul 
            {
              String RESULT =null;
		tmpOperdor = "*"; tmpOperdor2 = "*";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADORES ::= tmod 
            {
              String RESULT =null;
		tmpOperdor = "%"; tmpOperdor2 = "%";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= prBoolean 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= prBooleana 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= prCaracter 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= prNumero 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= prCadena 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor trest tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = -" + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tsum tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = +" + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = False\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = True\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor trest prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = -" + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tsum prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = +" + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor OPERACION tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		python += a + " = " + tmpOperacion + tmpOperacion2 + "\n"; ArrayList<String> tmpOperacion = new ArrayList<String>(); tmpOperacion2 = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor trest tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = -" + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tsum tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = +" + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = True;\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = False;\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor trest prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = -" + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tsum prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = +" + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor OPERACION tpuntoycoma 
            {
              String RESULT =null;
		for(String i: tmpListaNombres){
                         python += i + " = " + tmpOperacion + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COMENTARIO ::= tcomentario 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python +=c.replace("//","#")+"\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COMENTARIO_VARIAS_LINEAS ::= tcomentariovariaslineas 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python += c.replace("/*","'''").replace("*/","'''") + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO_VARIAS_LINEAS",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGNACION ::= tvariable FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = "+b+";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGNACION ::= tvariable FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIGNACION ::= tvariable FLECHA tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = "+b+";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNACION ::= tvariable FLECHA prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = "+b+";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNACION ::= tvariable FLECHA prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = True;\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNACION ::= tvariable FLECHA prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = False;\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNACION ::= tvariable FLECHA caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = "+b+";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGNACION ::= LISTA_NOMBRES FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ASIGNACION ::= LISTA_NOMBRES FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ASIGNACION ::= LISTA_NOMBRES FLECHA tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ASIGNACION ::= LISTA_NOMBRES FLECHA prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNACION ::= LISTA_NOMBRES FLECHA prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = True;\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ASIGNACION ::= LISTA_NOMBRES FLECHA prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = False;\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASIGNACION ::= LISTA_NOMBRES FLECHA caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = " + a + ";\n";
                }; 
                        ArrayList<String> tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SELECCION_MULTIPLE ::= prSegun SEGUN prFinSegun 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES SEGUN 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR ::= tcadena 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$16 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",52, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTA_NOMBRES ::= tvariable NT$16 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LISTA_NOMBRES ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$17 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",53, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LISTA_NOMBRES2 ::= tcoma tvariable NT$17 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LISTA_NOMBRES2 ::= tcoma tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$18 ::= 
            {
              String RESULT =null;
tmpPython += tmpInstruccion;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",54, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IF ::= prSi CONDICION prEntonces E NT$18 prFinSi 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpPython + "\n"; tmpPython = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IF ::= prSi CONDICION prEntonces E O_SI prFinSi 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IF ::= prSi CONDICION prEntonces E DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IF ::= prSi CONDICION prEntonces E O_SI DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DE_LO_CONTRARIO ::= prDE_LO_CONTRARIO E DE_LO_CONTRARIO 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DE_LO_CONTRARIO ::= prDE_LO_CONTRARIO E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // O_SI ::= prO_Si CONDICION prEntonces E O_SI 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // O_SI ::= prO_Si CONDICION prEntonces E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONDICION ::= tvariable tigual tigual tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		condicion = a + b +c +d ; tmpPython += condicion + ":\n\t";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICION ::= tvariable tigual tigual tcadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		condicion = a + b +c +d ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICION ::= tvariable tigual tigual tnum 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		condicion = a + b +c +d ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VARIABLE ::= tvariable 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INSTRUCCIONES_CICLO ::= INSTRUCCIONES_CICLO INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INSTRUCCIONES_CICLO ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INSTRUCCION ::= VARIABLE tigual VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARA ::= prPara VARIABLE FLECHA tnum prHasta tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FLECHA ::= trest tmayor 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FLECHA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PARA_SALTO ::= prPara VARIABLE FLECHA tnum prHasta tnum prCon prIncremental tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA_SALTO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MIENTRAS ::= prMientras CONDICION prHacer INSTRUCCIONES_CICLO prFinMientras 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // REPETIR ::= prRepetir INSTRUCCIONES_CICLO prHasta CONDICION 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // RETORNO ::= prRetornar VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // METODO ::= prMetodo VARIABLE prConParametros LISTA_PARAMETROS prConValor VALOR prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // METODO ::= prMetodo VARIABLE INSTRUCCIONES prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LISTA_PARAMETROS ::= VARIABLE tcadena LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LISTA_PARAMETROS ::= VARIABLE tcadena tcoma LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FUNCION ::= prFuncion VARIABLE tcadena prConParametros LISTA_PARAMETROS INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FUNCION ::= prFuncion VARIABLE tcadena INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EJECUTAR ::= prEjecutar VARIABLE pare1 pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EJECUTAR ::= prEjecutar VARIABLE pare1 LISTA_PARAMETROS pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IMPRIMIR ::= prImprimir VALOR tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // IMPRIMIR_NL ::= prImprimirNl VALOR tpuntoycoma 
            {
              String RESULT =null;
		tmpImprimir = "println(" + valor + ")";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
