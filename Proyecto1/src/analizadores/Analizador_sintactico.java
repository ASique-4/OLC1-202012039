
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\005\000\002\017" +
    "\004\000\002\046\002\000\002\047\002\000\002\017\006" +
    "\000\002\050\002\000\002\017\005\000\002\051\002\000" +
    "\002\017\005\000\002\052\002\000\002\017\005\000\002" +
    "\053\002\000\002\017\005\000\002\054\002\000\002\017" +
    "\005\000\002\055\002\000\002\017\005\000\002\056\002" +
    "\000\002\057\002\000\002\017\006\000\002\060\002\000" +
    "\002\017\005\000\002\061\002\000\002\017\005\000\002" +
    "\062\002\000\002\017\005\000\002\063\002\000\002\017" +
    "\005\000\002\064\002\000\002\017\005\000\002\017\004" +
    "\000\002\017\004\000\002\065\002\000\002\017\005\000" +
    "\002\066\002\000\002\017\005\000\002\017\002\000\002" +
    "\022\004\000\002\022\003\000\002\044\003\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\014\011\000\002\014\011\000\002\015\003\000\002\016" +
    "\003\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\024\005\000\002\025\010" +
    "\000\002\025\007\000\002\010\003\000\002\010\003\000" +
    "\002\067\002\000\002\011\005\000\002\011\002\000\002" +
    "\070\002\000\002\012\006\000\002\012\004\000\002\007" +
    "\007\000\002\007\010\000\002\007\010\000\002\007\011" +
    "\000\002\021\004\000\002\023\007\000\002\023\006\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\013" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\004\005\000\002\004\004\000\002" +
    "\005\005\000\002\005\004\000\002\006\005\000\002\027" +
    "\013\000\002\026\004\000\002\030\016\000\002\031\007" +
    "\000\002\031\010\000\002\031\011\000\002\031\012\000" +
    "\002\032\006\000\002\033\004\000\002\034\011\000\002" +
    "\034\006\000\002\035\005\000\002\035\006\000\002\036" +
    "\011\000\002\036\007\000\002\037\007\000\002\037\010" +
    "\000\002\040\005\000\002\040\007\000\002\041\005\000" +
    "\002\041\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\004\015\004\001\002\000\046\003\037\005" +
    "\uffb5\016\uffdc\023\025\024\042\026\041\031\ufffe\036\030" +
    "\040\024\045\uffef\047\027\051\014\052\034\055\017\057" +
    "\045\060\046\061\026\063\035\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\070\003\uffe0\005" +
    "\075\006\077\007\074\010\072\011\073\012\076\016\uffe0" +
    "\023\uffe0\024\uffe0\026\uffe0\031\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\040\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0" +
    "\052\uffe0\055\uffe0\057\uffe0\060\uffe0\061\uffe0\063\uffe0\001" +
    "\002\000\004\045\u0101\001\002\000\056\003\ufff1\005\ufff1" +
    "\016\ufff1\023\ufff1\024\ufff1\026\ufff1\031\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\040\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\051\ufff1\052\ufff1\055\ufff1\057\ufff1\060\ufff1\061\ufff1\063" +
    "\ufff1\001\002\000\056\003\ufff9\005\ufff9\016\ufff9\023\ufff9" +
    "\024\ufff9\026\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\040\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\052\ufff9" +
    "\055\ufff9\057\ufff9\060\ufff9\061\ufff9\063\ufff9\001\002\000" +
    "\056\003\037\005\uffb5\016\uffdc\023\025\024\042\026\041" +
    "\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030\040\024\045" +
    "\uffef\046\uffdc\047\027\051\014\052\034\055\017\057\045" +
    "\060\046\061\026\063\035\001\002\000\006\063\226\064" +
    "\227\001\002\000\056\003\037\005\uffb5\016\uffdc\023\025" +
    "\024\042\026\041\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036" +
    "\030\040\024\045\uffef\046\uffdc\047\027\051\014\052\034" +
    "\055\017\057\045\060\046\061\026\063\035\001\002\000" +
    "\056\003\uffe4\005\uffe4\016\uffe4\023\uffe4\024\uffe4\026\uffe4" +
    "\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\055\uffe4\057\uffe4" +
    "\060\uffe4\061\uffe4\063\uffe4\001\002\000\004\063\106\001" +
    "\002\000\004\031\333\001\002\000\056\003\uffea\005\uffea" +
    "\016\uffea\023\uffea\024\uffea\026\uffea\031\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\040\uffea\045\uffea\046\uffea\047\uffea" +
    "\051\uffea\052\uffea\055\uffea\057\uffea\060\uffea\061\uffea\063" +
    "\uffea\001\002\000\056\003\ufff5\005\ufff5\016\ufff5\023\ufff5" +
    "\024\ufff5\026\ufff5\031\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\040\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5\052\ufff5" +
    "\055\ufff5\057\ufff5\060\ufff5\061\ufff5\063\ufff5\001\002\000" +
    "\056\003\ufff3\005\ufff3\016\ufff3\023\ufff3\024\ufff3\026\ufff3" +
    "\031\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\040\ufff3\045" +
    "\ufff3\046\ufff3\047\ufff3\051\ufff3\052\ufff3\055\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\063\ufff3\001\002\000\004\063\106\001" +
    "\002\000\056\003\uffcc\005\uffcc\016\uffcc\023\uffcc\024\uffcc" +
    "\026\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\055\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\063\uffcc\001\002\000\020\013" +
    "\301\064\052\073\063\074\061\100\060\104\057\107\064" +
    "\001\002\000\004\063\106\001\002\000\004\017\245\001" +
    "\002\000\056\003\uffe8\005\uffe8\016\uffe8\023\uffe8\024\uffe8" +
    "\026\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\055\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\063\uffe8\001\002\000\056\003" +
    "\ufff7\005\ufff7\016\ufff7\023\ufff7\024\ufff7\026\ufff7\031\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\040\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\051\ufff7\052\ufff7\055\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\063\ufff7\001\002\000\004\016\240\001\002\000" +
    "\004\063\106\001\002\000\006\005\124\021\uffb7\001\002" +
    "\000\056\003\037\005\uffb5\016\uffdc\023\025\024\042\026" +
    "\041\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030\040\024" +
    "\045\uffef\046\uffdc\047\027\051\014\052\034\055\017\057" +
    "\045\060\046\061\026\063\035\001\002\000\056\003\uffde" +
    "\005\uffde\016\uffde\023\uffde\024\uffde\026\uffde\031\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\040\uffde\045\uffde\046\uffde" +
    "\047\uffde\051\uffde\052\uffde\055\uffde\057\uffde\060\uffde\061" +
    "\uffde\063\uffde\001\002\000\056\003\uffec\005\uffec\016\uffec" +
    "\023\uffec\024\uffec\026\uffec\031\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\040\uffec\045\uffec\046\uffec\047\uffec\051\uffec" +
    "\052\uffec\055\uffec\057\uffec\060\uffec\061\uffec\063\uffec\001" +
    "\002\000\006\027\uffb5\063\146\001\002\000\056\003\uffcb" +
    "\005\uffcb\016\uffcb\023\uffcb\024\uffcb\026\uffcb\031\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\051\uffcb\052\uffcb\055\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\063\uffcb\001\002\000\056\003\ufffb\005\ufffb\016\ufffb" +
    "\023\ufffb\024\ufffb\026\ufffb\031\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\040\ufffb\045\ufffb\046\ufffb\047\ufffb\051\ufffb" +
    "\052\ufffb\055\ufffb\057\ufffb\060\ufffb\061\ufffb\063\ufffb\001" +
    "\002\000\004\005\124\001\002\000\004\063\106\001\002" +
    "\000\020\013\056\064\052\073\063\074\061\100\060\104" +
    "\057\107\064\001\002\000\056\003\uffe6\005\uffe6\016\uffe6" +
    "\023\uffe6\024\uffe6\026\uffe6\031\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\040\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6" +
    "\052\uffe6\055\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6\001" +
    "\002\000\056\003\037\005\uffb5\016\uffdc\023\025\024\042" +
    "\026\041\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030\040" +
    "\024\045\uffef\046\uffdc\047\027\051\014\052\034\055\017" +
    "\057\045\060\046\061\026\063\035\001\002\000\014\016" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\046\uffe5\001\002\000\102" +
    "\003\uffa3\005\uffa3\014\uffa3\016\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\045\uffa3\046\uffa3\047\uffa3\051" +
    "\uffa3\052\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\063\uffa3" +
    "\075\uffa3\076\uffa3\077\uffa3\101\uffa3\102\uffa3\103\uffa3\001" +
    "\002\000\114\003\uffd9\005\075\006\077\007\074\010\072" +
    "\011\073\012\076\014\uffd9\016\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\045\uffd9\046\uffd9\047\uffd9\051" +
    "\uffd9\052\uffd9\055\uffd9\057\uffd9\060\uffd9\061\uffd9\063\uffd9" +
    "\075\uffd9\076\uffd9\077\uffd9\101\uffd9\102\uffd9\103\uffd9\001" +
    "\002\000\102\003\uffda\005\uffda\014\uffda\016\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\045\uffda\046\uffda" +
    "\047\uffda\051\uffda\052\uffda\055\uffda\057\uffda\060\uffda\061" +
    "\uffda\063\uffda\075\uffda\076\uffda\077\uffda\101\uffda\102\uffda" +
    "\103\uffda\001\002\000\004\025\071\001\002\000\016\064" +
    "\052\073\063\074\061\100\060\104\057\107\064\001\002" +
    "\000\102\003\uff9f\005\uff9f\014\uff9f\016\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\051\uff9f\052\uff9f\055\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\063\uff9f\075\uff9f\076\uff9f\077\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\001\002\000\102\003\uffa2\005\uffa2\014\uffa2\016\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\051\uffa2\052\uffa2\055\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\063\uffa2\075\uffa2\076\uffa2\077\uffa2\101\uffa2" +
    "\102\uffa2\103\uffa2\001\002\000\102\003\uffa0\005\uffa0\014" +
    "\uffa0\016\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\055\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\063\uffa0\075\uffa0\076\uffa0\077" +
    "\uffa0\101\uffa0\102\uffa0\103\uffa0\001\002\000\102\003\uff9d" +
    "\005\uff9d\014\uff9d\016\uff9d\023\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d\052" +
    "\uff9d\055\uff9d\057\uff9d\060\uff9d\061\uff9d\063\uff9d\075\uff9d" +
    "\076\uff9d\077\uff9d\101\uff9d\102\uff9d\103\uff9d\001\002\000" +
    "\102\003\uffa1\005\uffa1\014\uffa1\016\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\051\uffa1\052\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\063" +
    "\uffa1\075\uffa1\076\uffa1\077\uffa1\101\uffa1\102\uffa1\103\uffa1" +
    "\001\002\000\102\003\uff9e\005\uff9e\014\uff9e\016\uff9e\023" +
    "\uff9e\024\uff9e\025\uff9e\026\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\051\uff9e\052\uff9e\055\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\063\uff9e\075\uff9e\076\uff9e\077\uff9e\101\uff9e\102" +
    "\uff9e\103\uff9e\001\002\000\102\003\uffdb\005\uffdb\014\uffdb" +
    "\016\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\055\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\063\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\101\uffdb\102\uffdb\103\uffdb\001\002\000\004\014\067\001" +
    "\002\000\004\025\070\001\002\000\056\003\uff85\005\uff85" +
    "\016\uff85\023\uff85\024\uff85\026\uff85\031\uff85\033\uff85\034" +
    "\uff85\035\uff85\036\uff85\040\uff85\045\uff85\046\uff85\047\uff85" +
    "\051\uff85\052\uff85\055\uff85\057\uff85\060\uff85\061\uff85\063" +
    "\uff85\001\002\000\056\003\uff86\005\uff86\016\uff86\023\uff86" +
    "\024\uff86\026\uff86\031\uff86\033\uff86\034\uff86\035\uff86\036" +
    "\uff86\040\uff86\045\uff86\046\uff86\047\uff86\051\uff86\052\uff86" +
    "\055\uff86\057\uff86\060\uff86\061\uff86\063\uff86\001\002\000" +
    "\002\001\002\000\002\001\002\000\002\001\002\000\002" +
    "\001\002\000\002\001\002\000\002\001\002\000\114\003" +
    "\uffd8\005\uffd8\006\uffd8\007\074\010\072\011\073\012\076" +
    "\014\uffd8\016\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\055" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\063\uffd8\075\uffd8\076\uffd8" +
    "\077\uffd8\101\uffd8\102\uffd8\103\uffd8\001\002\000\114\003" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\014\uffd4\016\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\055" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4\075\uffd4\076\uffd4" +
    "\077\uffd4\101\uffd4\102\uffd4\103\uffd4\001\002\000\114\003" +
    "\uffd7\005\uffd7\006\uffd7\007\074\010\072\011\073\012\076" +
    "\014\uffd7\016\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7\052\uffd7\055" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\063\uffd7\075\uffd7\076\uffd7" +
    "\077\uffd7\101\uffd7\102\uffd7\103\uffd7\001\002\000\114\003" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\073\012\076" +
    "\014\uffd5\016\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5\055" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\063\uffd5\075\uffd5\076\uffd5" +
    "\077\uffd5\101\uffd5\102\uffd5\103\uffd5\001\002\000\114\003" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\014\uffd3\016\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\055" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\063\uffd3\075\uffd3\076\uffd3" +
    "\077\uffd3\101\uffd3\102\uffd3\103\uffd3\001\002\000\114\003" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\073\012\076" +
    "\014\uffd6\016\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6\052\uffd6\055" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6\075\uffd6\076\uffd6" +
    "\077\uffd6\101\uffd6\102\uffd6\103\uffd6\001\002\000\016\005" +
    "\uffa4\013\uffa4\054\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002" +
    "\000\004\013\110\001\002\000\006\014\112\063\106\001" +
    "\002\000\004\014\121\001\002\000\004\025\120\001\002" +
    "\000\004\064\114\001\002\000\006\021\116\063\106\001" +
    "\002\000\010\014\uff8c\030\uff8c\063\uff8c\001\002\000\004" +
    "\063\106\001\002\000\010\014\uff8b\030\uff8b\063\uff8b\001" +
    "\002\000\056\003\uff88\005\uff88\016\uff88\023\uff88\024\uff88" +
    "\026\uff88\031\uff88\033\uff88\034\uff88\035\uff88\036\uff88\040" +
    "\uff88\045\uff88\046\uff88\047\uff88\051\uff88\052\uff88\055\uff88" +
    "\057\uff88\060\uff88\061\uff88\063\uff88\001\002\000\004\025" +
    "\122\001\002\000\056\003\uff87\005\uff87\016\uff87\023\uff87" +
    "\024\uff87\026\uff87\031\uff87\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\040\uff87\045\uff87\046\uff87\047\uff87\051\uff87\052\uff87" +
    "\055\uff87\057\uff87\060\uff87\061\uff87\063\uff87\001\002\000" +
    "\020\004\131\063\126\064\127\073\130\074\132\100\133" +
    "\104\134\001\002\000\004\022\125\001\002\000\020\004" +
    "\uff96\063\uff96\064\uff96\073\uff96\074\uff96\100\uff96\104\uff96" +
    "\001\002\000\004\025\143\001\002\000\004\025\142\001" +
    "\002\000\004\025\141\001\002\000\004\025\140\001\002" +
    "\000\004\025\137\001\002\000\004\025\136\001\002\000" +
    "\004\025\135\001\002\000\056\003\uffbd\005\uffbd\016\uffbd" +
    "\023\uffbd\024\uffbd\026\uffbd\031\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\040\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd" +
    "\052\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd\063\uffbd\001" +
    "\002\000\056\003\uffc0\005\uffc0\016\uffc0\023\uffc0\024\uffc0" +
    "\026\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\040" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\055\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\063\uffc0\001\002\000\056\003" +
    "\uffbe\005\uffbe\016\uffbe\023\uffbe\024\uffbe\026\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\040\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\051\uffbe\052\uffbe\055\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\063\uffbe\001\002\000\056\003\uffc2\005\uffc2\016" +
    "\uffc2\023\uffc2\024\uffc2\026\uffc2\031\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\040\uffc2\045\uffc2\046\uffc2\047\uffc2\051" +
    "\uffc2\052\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2" +
    "\001\002\000\056\003\uffbf\005\uffbf\016\uffbf\023\uffbf\024" +
    "\uffbf\026\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\040\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\055" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\063\uffbf\001\002\000\056" +
    "\003\uffc3\005\uffc3\016\uffc3\023\uffc3\024\uffc3\026\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\051\uffc3\052\uffc3\055\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\063\uffc3\001\002\000\056\003\uffc1\005\uffc1" +
    "\016\uffc1\023\uffc1\024\uffc1\026\uffc1\031\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\051\uffc1\052\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1\063" +
    "\uffc1\001\002\000\056\003\037\005\uffb5\016\uffdc\023\025" +
    "\024\042\026\041\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036" +
    "\030\040\024\045\uffef\046\uffdc\047\027\051\014\052\034" +
    "\055\017\057\045\060\046\061\026\063\035\001\002\000" +
    "\014\016\ufffa\033\ufffa\034\ufffa\035\ufffa\046\ufffa\001\002" +
    "\000\006\021\uffb7\027\161\001\002\000\004\027\150\001" +
    "\002\000\012\067\151\070\152\071\154\072\153\001\002" +
    "\000\004\030\uffd2\001\002\000\004\030\uffd1\001\002\000" +
    "\004\030\uffcf\001\002\000\004\030\uffd0\001\002\000\004" +
    "\030\156\001\002\000\016\064\052\073\063\074\061\100" +
    "\060\104\057\107\064\001\002\000\004\025\160\001\002" +
    "\000\056\003\uffcd\005\uffcd\016\uffcd\023\uffcd\024\uffcd\026" +
    "\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\055\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\063\uffcd\001\002\000\012\067\151" +
    "\070\152\071\154\072\153\001\002\000\004\021\164\001" +
    "\002\000\006\005\uffb6\027\uffb6\001\002\000\004\063\165" +
    "\001\002\000\010\005\uffb2\021\uffb4\027\uffb2\001\002\000" +
    "\004\021\164\001\002\000\006\005\uffb3\027\uffb3\001\002" +
    "\000\004\030\171\001\002\000\016\064\052\073\063\074" +
    "\061\100\060\104\057\107\064\001\002\000\004\025\173" +
    "\001\002\000\056\003\uffce\005\uffce\016\uffce\023\uffce\024" +
    "\uffce\026\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\040\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052\uffce\055" +
    "\uffce\057\uffce\060\uffce\061\uffce\063\uffce\001\002\000\056" +
    "\003\037\005\uffb5\016\uffdc\023\025\024\042\026\041\031" +
    "\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030\040\024\045\uffef" +
    "\046\uffdc\047\027\051\014\052\034\055\017\057\045\060" +
    "\046\061\026\063\035\001\002\000\014\016\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\046\uffeb\001\002\000\056\003\037\005" +
    "\uffb5\016\uffdc\023\025\024\042\026\041\031\ufffe\033\uffdc" +
    "\034\uffdc\035\uffdc\036\030\040\024\045\uffef\046\uffdc\047" +
    "\027\051\014\052\034\055\017\057\045\060\046\061\026" +
    "\063\035\001\002\000\014\016\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\046\uffdd\001\002\000\014\016\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\046\uffe1\001\002\000\020\004\205\063\203\064" +
    "\202\073\204\074\206\100\207\104\210\001\002\000\004" +
    "\025\217\001\002\000\004\025\216\001\002\000\004\025" +
    "\215\001\002\000\004\025\214\001\002\000\004\025\213" +
    "\001\002\000\004\025\212\001\002\000\004\025\211\001" +
    "\002\000\056\003\uffc4\005\uffc4\016\uffc4\023\uffc4\024\uffc4" +
    "\026\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4\055\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\063\uffc4\001\002\000\056\003" +
    "\uffc7\005\uffc7\016\uffc7\023\uffc7\024\uffc7\026\uffc7\031\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\051\uffc7\052\uffc7\055\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\063\uffc7\001\002\000\056\003\uffc5\005\uffc5\016" +
    "\uffc5\023\uffc5\024\uffc5\026\uffc5\031\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\040\uffc5\045\uffc5\046\uffc5\047\uffc5\051" +
    "\uffc5\052\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5" +
    "\001\002\000\056\003\uffc9\005\uffc9\016\uffc9\023\uffc9\024" +
    "\uffc9\026\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\040\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\055" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\063\uffc9\001\002\000\056" +
    "\003\uffc6\005\uffc6\016\uffc6\023\uffc6\024\uffc6\026\uffc6\031" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\051\uffc6\052\uffc6\055\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\063\uffc6\001\002\000\056\003\uffc8\005\uffc8" +
    "\016\uffc8\023\uffc8\024\uffc8\026\uffc8\031\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\040\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\051\uffc8\052\uffc8\055\uffc8\057\uffc8\060\uffc8\061\uffc8\063" +
    "\uffc8\001\002\000\056\003\uffca\005\uffca\016\uffca\023\uffca" +
    "\024\uffca\026\uffca\031\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\040\uffca\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca" +
    "\055\uffca\057\uffca\060\uffca\061\uffca\063\uffca\001\002\000" +
    "\006\054\221\063\106\001\002\000\004\063\106\001\002" +
    "\000\004\053\233\001\002\000\004\025\231\001\002\000" +
    "\004\062\225\001\002\000\006\063\226\064\227\001\002" +
    "\000\064\003\uffb9\005\uffb9\016\uffb9\020\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\040\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\055\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9" +
    "\001\002\000\064\003\uffb8\005\uffb8\016\uffb8\020\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\031\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\040\uffb8\045\uffb8\046\uffb8\047\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\063\uffb8\001\002\000\004\025\uff98\001\002\000\014\017" +
    "\uff9b\053\uff9b\056\uff9b\063\106\065\uff9b\001\002\000\012" +
    "\017\uff9c\053\uff9c\056\uff9c\065\uff9c\001\002\000\056\003" +
    "\uff8d\005\uff8d\016\uff8d\023\uff8d\024\uff8d\026\uff8d\031\uff8d" +
    "\033\uff8d\034\uff8d\035\uff8d\036\uff8d\040\uff8d\045\uff8d\046" +
    "\uff8d\047\uff8d\051\uff8d\052\uff8d\055\uff8d\057\uff8d\060\uff8d" +
    "\061\uff8d\063\uff8d\001\002\000\004\030\235\001\002\000" +
    "\006\063\226\064\227\001\002\000\004\053\237\001\002" +
    "\000\056\003\uff8e\005\uff8e\016\uff8e\023\uff8e\024\uff8e\026" +
    "\uff8e\031\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\040\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\055\uff8e\057" +
    "\uff8e\060\uff8e\061\uff8e\063\uff8e\001\002\000\004\002\000" +
    "\001\002\000\056\003\037\005\uffb5\016\uffdc\023\025\024" +
    "\042\026\041\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030" +
    "\040\024\045\uffef\046\uffdc\047\027\051\014\052\034\055" +
    "\017\057\045\060\046\061\026\063\035\001\002\000\014" +
    "\016\ufff6\033\ufff6\034\ufff6\035\ufff6\046\ufff6\001\002\000" +
    "\056\003\037\005\uffb5\016\uffdc\023\025\024\042\026\041" +
    "\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030\040\024\045" +
    "\uffef\046\uffdc\047\027\051\014\052\034\055\017\057\045" +
    "\060\046\061\026\063\035\001\002\000\014\016\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\046\uffe7\001\002\000\006\063\226" +
    "\064\227\001\002\000\004\065\247\001\002\000\056\003" +
    "\uffbc\005\uffbc\016\uffbc\023\uffbc\024\uffbc\026\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\040\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\051\uffbc\052\uffbc\055\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\063\uffbc\001\002\000\004\020\251\001\002\000" +
    "\004\032\252\001\002\000\004\063\106\001\002\000\006" +
    "\017\245\065\uffba\001\002\000\004\065\uffbb\001\002\000" +
    "\004\025\300\001\002\000\006\041\260\063\106\001\002" +
    "\000\004\025\277\001\002\000\016\064\052\073\063\074" +
    "\061\100\060\104\057\107\064\001\002\000\016\075\266" +
    "\076\263\077\270\101\267\102\265\103\264\001\002\000" +
    "\056\003\uff90\005\uff90\016\uff90\023\uff90\024\uff90\026\uff90" +
    "\031\uff90\033\uff90\034\uff90\035\uff90\036\uff90\040\uff90\045" +
    "\uff90\046\uff90\047\uff90\051\uff90\052\uff90\055\uff90\057\uff90" +
    "\060\uff90\061\uff90\063\uff90\001\002\000\016\064\052\073" +
    "\063\074\061\100\060\104\057\107\064\001\002\000\016" +
    "\064\052\073\063\074\061\100\060\104\057\107\064\001" +
    "\002\000\016\064\052\073\063\074\061\100\060\104\057" +
    "\107\064\001\002\000\016\064\052\073\063\074\061\100" +
    "\060\104\057\107\064\001\002\000\016\064\052\073\063" +
    "\074\061\100\060\104\057\107\064\001\002\000\016\064" +
    "\052\073\063\074\061\100\060\104\057\107\064\001\002" +
    "\000\064\003\uffa9\005\uffa9\014\uffa9\016\uffa9\023\uffa9\024" +
    "\uffa9\026\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\045\uffa9\046\uffa9\047\uffa9\051" +
    "\uffa9\052\uffa9\055\uffa9\057\uffa9\060\uffa9\061\uffa9\063\uffa9" +
    "\001\002\000\064\003\uffa7\005\uffa7\014\uffa7\016\uffa7\023" +
    "\uffa7\024\uffa7\026\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\051\uffa7\052\uffa7\055\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\063\uffa7\001\002\000\064\003\uffaa\005\uffaa\014\uffaa\016" +
    "\uffaa\023\uffaa\024\uffaa\026\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\051\uffaa\052\uffaa\055\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\063\uffaa\001\002\000\064\003\uffa8\005\uffa8\014" +
    "\uffa8\016\uffa8\023\uffa8\024\uffa8\026\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\055\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\063\uffa8\001\002\000\064\003\uffa6\005" +
    "\uffa6\014\uffa6\016\uffa6\023\uffa6\024\uffa6\026\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\051\uffa6\052\uffa6\055\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\063\uffa6\001\002\000\064\003" +
    "\uffa5\005\uffa5\014\uffa5\016\uffa5\023\uffa5\024\uffa5\026\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5" +
    "\055\uffa5\057\uffa5\060\uffa5\061\uffa5\063\uffa5\001\002\000" +
    "\010\041\uff9a\042\uff9a\063\uff9a\001\002\000\010\041\uff99" +
    "\042\uff99\063\uff99\001\002\000\016\064\052\073\063\074" +
    "\061\100\060\104\057\107\064\001\002\000\004\025\303" +
    "\001\002\000\056\003\uff84\005\uff84\016\uff84\023\uff84\024" +
    "\uff84\026\uff84\031\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\040\uff84\045\uff84\046\uff84\047\uff84\051\uff84\052\uff84\055" +
    "\uff84\057\uff84\060\uff84\061\uff84\063\uff84\001\002\000\004" +
    "\014\305\001\002\000\004\025\306\001\002\000\056\003" +
    "\uff83\005\uff83\016\uff83\023\uff83\024\uff83\026\uff83\031\uff83" +
    "\033\uff83\034\uff83\035\uff83\036\uff83\040\uff83\045\uff83\046" +
    "\uff83\047\uff83\051\uff83\052\uff83\055\uff83\057\uff83\060\uff83" +
    "\061\uff83\063\uff83\001\002\000\004\005\124\001\002\000" +
    "\004\004\311\001\002\000\004\041\312\001\002\000\004" +
    "\004\313\001\002\000\006\037\314\043\315\001\002\000" +
    "\004\063\106\001\002\000\004\044\316\001\002\000\004" +
    "\004\317\001\002\000\004\037\320\001\002\000\004\063" +
    "\106\001\002\000\006\042\322\063\106\001\002\000\056" +
    "\003\uff95\005\uff95\016\uff95\023\uff95\024\uff95\026\uff95\031" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\040\uff95\045\uff95" +
    "\046\uff95\047\uff95\051\uff95\052\uff95\055\uff95\057\uff95\060" +
    "\uff95\061\uff95\063\uff95\001\002\000\006\042\324\063\106" +
    "\001\002\000\056\003\uff97\005\uff97\016\uff97\023\uff97\024" +
    "\uff97\026\uff97\031\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\040\uff97\045\uff97\046\uff97\047\uff97\051\uff97\052\uff97\055" +
    "\uff97\057\uff97\060\uff97\061\uff97\063\uff97\001\002\000\056" +
    "\003\037\005\uffb5\016\uffdc\023\025\024\042\026\041\031" +
    "\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030\040\024\045\uffef" +
    "\046\uffdc\047\027\051\014\052\034\055\017\057\045\060" +
    "\046\061\026\063\035\001\002\000\014\016\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\046\ufff2\001\002\000\056\003\037\005" +
    "\uffb5\016\uffdc\023\025\024\042\026\041\031\ufffe\033\uffdc" +
    "\034\uffdc\035\uffdc\036\030\040\024\045\uffef\046\uffdc\047" +
    "\027\051\014\052\034\055\017\057\045\060\046\061\026" +
    "\063\035\001\002\000\014\016\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\046\ufff4\001\002\000\056\003\037\005\uffb5\016\uffdc" +
    "\023\025\024\042\026\041\031\ufffe\033\uffdc\034\uffdc\035" +
    "\uffdc\036\030\040\024\045\uffef\046\uffdc\047\027\051\014" +
    "\052\034\055\017\057\045\060\046\061\026\063\035\001" +
    "\002\000\014\016\uffe9\033\uffe9\034\uffe9\035\uffe9\046\uffe9" +
    "\001\002\000\016\064\052\073\063\074\061\100\060\104" +
    "\057\107\064\001\002\000\056\003\ufffd\005\ufffd\016\ufffd" +
    "\023\ufffd\024\ufffd\026\ufffd\031\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\040\ufffd\045\ufffd\046\ufffd\047\ufffd\051\ufffd" +
    "\052\ufffd\055\ufffd\057\ufffd\060\ufffd\061\ufffd\063\ufffd\001" +
    "\002\000\056\003\037\005\uffb5\016\uffdc\023\025\024\042" +
    "\026\041\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030\040" +
    "\024\045\uffef\046\uffdc\047\027\051\014\052\034\055\017" +
    "\057\045\060\046\061\026\063\035\001\002\000\014\016" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\046\ufffc\001\002\000\004" +
    "\032\340\001\002\000\052\003\037\005\uffb5\023\025\024" +
    "\042\026\041\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030" +
    "\040\024\045\uffef\047\027\051\014\052\034\055\017\057" +
    "\045\060\046\061\026\063\035\001\002\000\010\033\345" +
    "\034\346\035\343\001\002\000\004\033\357\001\002\000" +
    "\046\003\037\005\uffb5\023\025\024\042\026\041\031\ufffe" +
    "\033\uffdc\036\030\040\024\045\uffef\047\027\051\014\052" +
    "\034\055\017\057\045\060\046\061\026\063\035\001\002" +
    "\000\006\033\354\035\343\001\002\000\056\003\uffb1\005" +
    "\uffb1\016\uffb1\023\uffb1\024\uffb1\026\uffb1\031\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\040\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\051\uffb1\052\uffb1\055\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\063\uffb1\001\002\000\016\064\052\073\063\074\061\100" +
    "\060\104\057\107\064\001\002\000\004\032\350\001\002" +
    "\000\052\003\037\005\uffb5\023\025\024\042\026\041\031" +
    "\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030\040\024\045\uffef" +
    "\047\027\051\014\052\034\055\017\057\045\060\046\061" +
    "\026\063\035\001\002\000\010\033\uffab\034\346\035\uffab" +
    "\001\002\000\006\033\uffac\035\uffac\001\002\000\004\033" +
    "\355\001\002\000\056\003\uffb0\005\uffb0\016\uffb0\023\uffb0" +
    "\024\uffb0\026\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\040\uffb0\045\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0" +
    "\055\uffb0\057\uffb0\060\uffb0\061\uffb0\063\uffb0\001\002\000" +
    "\056\003\uffae\005\uffae\016\uffae\023\uffae\024\uffae\026\uffae" +
    "\031\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040\uffae\045" +
    "\uffae\046\uffae\047\uffae\051\uffae\052\uffae\055\uffae\057\uffae" +
    "\060\uffae\061\uffae\063\uffae\001\002\000\004\033\uffad\001" +
    "\002\000\056\003\uffaf\005\uffaf\016\uffaf\023\uffaf\024\uffaf" +
    "\026\uffaf\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\040" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\051\uffaf\052\uffaf\055\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\063\uffaf\001\002\000\004\064" +
    "\361\001\002\000\006\054\362\063\106\001\002\000\004" +
    "\063\106\001\002\000\004\056\364\001\002\000\056\003" +
    "\uff89\005\uff89\016\uff89\023\uff89\024\uff89\026\uff89\031\uff89" +
    "\033\uff89\034\uff89\035\uff89\036\uff89\040\uff89\045\uff89\046" +
    "\uff89\047\uff89\051\uff89\052\uff89\055\uff89\057\uff89\060\uff89" +
    "\061\uff89\063\uff89\001\002\000\004\063\106\001\002\000" +
    "\004\056\367\001\002\000\056\003\uff8a\005\uff8a\016\uff8a" +
    "\023\uff8a\024\uff8a\026\uff8a\031\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\040\uff8a\045\uff8a\046\uff8a\047\uff8a\051\uff8a" +
    "\052\uff8a\055\uff8a\057\uff8a\060\uff8a\061\uff8a\063\uff8a\001" +
    "\002\000\056\003\037\005\uffb5\016\uffdc\023\025\024\042" +
    "\026\041\031\ufffe\033\uffdc\034\uffdc\035\uffdc\036\030\040" +
    "\024\045\uffef\046\uffdc\047\027\051\014\052\034\055\017" +
    "\057\045\060\046\061\026\063\035\001\002\000\014\016" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\046\uffe3\001\002\000\014" +
    "\016\uffe2\033\uffe2\034\uffe2\035\uffe2\046\uffe2\001\002\000" +
    "\056\003\uff8f\005\uff8f\016\uff8f\023\uff8f\024\uff8f\026\uff8f" +
    "\031\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\040\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\051\uff8f\052\uff8f\055\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\063\uff8f\001\002\000\014\016\uffff\033" +
    "\uffff\034\uffff\035\uffff\046\uffff\001\002\000\056\003\037" +
    "\005\uffb5\016\uffdc\023\025\024\042\026\041\031\ufffe\033" +
    "\uffdc\034\uffdc\035\uffdc\036\030\040\024\045\uffef\046\uffdc" +
    "\047\027\051\014\052\034\055\017\057\045\060\046\061" +
    "\026\063\035\001\002\000\014\016\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\046\ufff8\001\002\000\056\003\037\005\uffb5\016" +
    "\uffdc\023\025\024\042\026\041\031\ufffe\033\uffdc\034\uffdc" +
    "\035\uffdc\036\030\040\024\045\uffef\046\uffdc\047\027\051" +
    "\014\052\034\055\017\057\045\060\046\061\026\063\035" +
    "\001\002\000\014\016\ufff0\033\ufff0\034\ufff0\035\ufff0\046" +
    "\ufff0\001\002\000\022\013\u0105\064\052\073\063\074\061" +
    "\100\060\104\057\107\064\110\u0106\001\002\000\056\003" +
    "\uffee\005\uffee\016\uffee\023\uffee\024\uffee\026\uffee\031\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\040\uffee\045\uffee\046" +
    "\uffee\047\uffee\051\uffee\052\uffee\055\uffee\057\uffee\060\uffee" +
    "\061\uffee\063\uffee\001\002\000\056\003\037\005\uffb5\016" +
    "\uffdc\023\025\024\042\026\041\031\ufffe\033\uffdc\034\uffdc" +
    "\035\uffdc\036\030\040\024\045\uffef\046\uffdc\047\027\051" +
    "\014\052\034\055\017\057\045\060\046\061\026\063\035" +
    "\001\002\000\014\016\uffed\033\uffed\034\uffed\035\uffed\046" +
    "\uffed\001\002\000\016\064\052\073\063\074\061\100\060" +
    "\104\057\107\064\001\002\000\020\013\u010b\064\052\073" +
    "\063\074\061\100\060\104\057\107\064\001\002\000\004" +
    "\037\u0108\001\002\000\046\003\037\005\uffb5\023\025\024" +
    "\042\026\041\031\ufffe\036\030\040\024\045\uffef\046\uffdc" +
    "\047\027\051\014\052\034\055\017\057\045\060\046\061" +
    "\026\063\035\001\002\000\004\046\u010a\001\002\000\056" +
    "\003\uff94\005\uff94\016\uff94\023\uff94\024\uff94\026\uff94\031" +
    "\uff94\033\uff94\034\uff94\035\uff94\036\uff94\040\uff94\045\uff94" +
    "\046\uff94\047\uff94\051\uff94\052\uff94\055\uff94\057\uff94\060" +
    "\uff94\061\uff94\063\uff94\001\002\000\016\064\052\073\063" +
    "\074\061\100\060\104\057\107\064\001\002\000\004\037" +
    "\u010d\001\002\000\046\003\037\005\uffb5\023\025\024\042" +
    "\026\041\031\ufffe\036\030\040\024\045\uffef\046\uffdc\047" +
    "\027\051\014\052\034\055\017\057\045\060\046\061\026" +
    "\063\035\001\002\000\004\046\u010f\001\002\000\056\003" +
    "\uff93\005\uff93\016\uff93\023\uff93\024\uff93\026\uff93\031\uff93" +
    "\033\uff93\034\uff93\035\uff93\036\uff93\040\uff93\045\uff93\046" +
    "\uff93\047\uff93\051\uff93\052\uff93\055\uff93\057\uff93\060\uff93" +
    "\061\uff93\063\uff93\001\002\000\004\014\u0111\001\002\000" +
    "\004\037\u0112\001\002\000\046\003\037\005\uffb5\023\025" +
    "\024\042\026\041\031\ufffe\036\030\040\024\045\uffef\046" +
    "\uffdc\047\027\051\014\052\034\055\017\057\045\060\046" +
    "\061\026\063\035\001\002\000\004\046\u0114\001\002\000" +
    "\056\003\uff91\005\uff91\016\uff91\023\uff91\024\uff91\026\uff91" +
    "\031\uff91\033\uff91\034\uff91\035\uff91\036\uff91\040\uff91\045" +
    "\uff91\046\uff91\047\uff91\051\uff91\052\uff91\055\uff91\057\uff91" +
    "\060\uff91\061\uff91\063\uff91\001\002\000\004\014\u0116\001" +
    "\002\000\004\037\u0117\001\002\000\046\003\037\005\uffb5" +
    "\023\025\024\042\026\041\031\ufffe\036\030\040\024\045" +
    "\uffef\046\uffdc\047\027\051\014\052\034\055\017\057\045" +
    "\060\046\061\026\063\035\001\002\000\004\046\u0119\001" +
    "\002\000\056\003\uff92\005\uff92\016\uff92\023\uff92\024\uff92" +
    "\026\uff92\031\uff92\033\uff92\034\uff92\035\uff92\036\uff92\040" +
    "\uff92\045\uff92\046\uff92\047\uff92\051\uff92\052\uff92\055\uff92" +
    "\057\uff92\060\uff92\061\uff92\063\uff92\001\002\000\056\003" +
    "\037\005\uffb5\016\uffdc\023\025\024\042\026\041\031\ufffe" +
    "\033\uffdc\034\uffdc\035\uffdc\036\030\040\024\045\uffef\046" +
    "\uffdc\047\027\051\014\052\034\055\017\057\045\060\046" +
    "\061\026\063\035\001\002\000\014\016\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\046\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\004\002\004\001\001\000\050\011\043\014" +
    "\012\015\042\016\011\017\032\020\031\024\021\027\022" +
    "\030\010\032\037\033\020\034\030\036\046\037\015\040" +
    "\014\041\035\043\006\046\017\056\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\u0119\001\001\000" +
    "\004\031\u0101\001\001\000\004\055\376\001\001\000\004" +
    "\051\374\001\001\000\050\011\043\014\012\015\042\016" +
    "\011\017\373\020\031\024\021\027\022\030\010\032\037" +
    "\033\020\034\030\036\046\037\015\040\014\041\035\043" +
    "\006\046\017\056\007\001\001\000\004\010\372\001\001" +
    "\000\050\011\043\014\012\015\042\016\011\017\371\020" +
    "\031\024\021\027\022\030\010\032\037\033\020\034\030" +
    "\036\046\037\015\040\014\041\035\043\006\046\017\056" +
    "\007\001\001\000\004\064\367\001\001\000\004\013\357" +
    "\001\001\000\004\007\333\001\001\000\004\061\330\001" +
    "\001\000\004\053\326\001\001\000\004\054\324\001\001" +
    "\000\004\013\306\001\001\000\002\001\001\000\012\022" +
    "\061\043\052\044\053\045\301\001\001\000\010\005\255" +
    "\006\254\013\223\001\001\000\004\025\245\001\001\000" +
    "\004\062\242\001\001\000\004\052\240\001\001\000\002" +
    "\001\001\000\004\013\217\001\001\000\006\026\200\067" +
    "\161\001\001\000\050\011\043\014\012\015\042\016\011" +
    "\017\177\020\031\024\021\027\022\030\010\032\037\033" +
    "\020\034\030\036\046\037\015\040\014\041\035\043\006" +
    "\046\017\056\007\001\001\000\004\066\175\001\001\000" +
    "\004\060\173\001\001\000\004\011\146\001\001\000\002" +
    "\001\001\000\004\050\143\001\001\000\004\026\122\001" +
    "\001\000\004\013\106\001\001\000\012\022\061\043\052" +
    "\044\053\045\054\001\001\000\004\063\047\001\001\000" +
    "\050\011\043\014\012\015\042\016\011\017\050\020\031" +
    "\024\021\027\022\030\010\032\037\033\020\034\030\036" +
    "\046\037\015\040\014\041\035\043\006\046\017\056\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\061" +
    "\043\052\044\053\045\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\052\044\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\104\001\001\000\004\043" +
    "\103\001\001\000\004\043\102\001\001\000\004\043\101" +
    "\001\001\000\004\043\100\001\001\000\004\043\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\112\035\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\112\035\114\001\001\000\002\001\001" +
    "\000\006\013\112\035\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\011\043\014\012\015\042\016\011\017\144" +
    "\020\031\024\021\027\022\030\010\032\037\033\020\034" +
    "\030\036\046\037\015\040\014\041\035\043\006\046\017" +
    "\056\007\001\001\000\002\001\001\000\004\067\161\001" +
    "\001\000\002\001\001\000\004\042\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\061\043\052\044\053" +
    "\045\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\167\001\001\000\004\012\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\165\001\001\000" +
    "\004\012\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\061\043\052\044\053\045\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\043\014\012" +
    "\015\042\016\011\017\174\020\031\024\021\027\022\030" +
    "\010\032\037\033\020\034\030\036\046\037\015\040\014" +
    "\041\035\043\006\046\017\056\007\001\001\000\002\001" +
    "\001\000\050\011\043\014\012\015\042\016\011\017\176" +
    "\020\031\024\021\027\022\030\010\032\037\033\020\034" +
    "\030\036\046\037\015\040\014\041\035\043\006\046\017" +
    "\056\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\221\006\222" +
    "\013\223\001\001\000\006\013\112\035\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\231\006\222\013\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\043\014\012\015\042\016" +
    "\011\017\241\020\031\024\021\027\022\030\010\032\037" +
    "\033\020\034\030\036\046\037\015\040\014\041\035\043" +
    "\006\046\017\056\007\001\001\000\002\001\001\000\050" +
    "\011\043\014\012\015\042\016\011\017\243\020\031\024" +
    "\021\027\022\030\010\032\037\033\020\034\030\036\046" +
    "\037\015\040\014\041\035\043\006\046\017\056\007\001" +
    "\001\000\002\001\001\000\004\010\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\252\006\222\013\223\001\001\000\004" +
    "\025\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\256\013\223\001\001\000\002\001\001\000\014" +
    "\003\261\022\061\043\052\044\053\045\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\061\043\052" +
    "\044\053\045\275\001\001\000\012\022\061\043\052\044" +
    "\053\045\274\001\001\000\012\022\061\043\052\044\053" +
    "\045\273\001\001\000\012\022\061\043\052\044\053\045" +
    "\272\001\001\000\012\022\061\043\052\044\053\045\271" +
    "\001\001\000\012\022\061\043\052\044\053\045\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\061\043\052" +
    "\044\053\045\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\322" +
    "\006\254\013\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\320\006\254\013\223" +
    "\001\001\000\006\006\256\013\223\001\001\000\002\001" +
    "\001\000\006\006\256\013\223\001\001\000\002\001\001" +
    "\000\050\011\043\014\012\015\042\016\011\017\325\020" +
    "\031\024\021\027\022\030\010\032\037\033\020\034\030" +
    "\036\046\037\015\040\014\041\035\043\006\046\017\056" +
    "\007\001\001\000\002\001\001\000\050\011\043\014\012" +
    "\015\042\016\011\017\327\020\031\024\021\027\022\030" +
    "\010\032\037\033\020\034\030\036\046\037\015\040\014" +
    "\041\035\043\006\046\017\056\007\001\001\000\002\001" +
    "\001\000\050\011\043\014\012\015\042\016\011\017\331" +
    "\020\031\024\021\027\022\030\010\032\037\033\020\034" +
    "\030\036\046\037\015\040\014\041\035\043\006\046\017" +
    "\056\007\001\001\000\002\001\001\000\014\003\336\022" +
    "\061\043\052\044\053\045\260\001\001\000\004\047\334" +
    "\001\001\000\050\011\043\014\012\015\042\016\011\017" +
    "\335\020\031\024\021\027\022\030\010\032\037\033\020" +
    "\034\030\036\046\037\015\040\014\041\035\043\006\046" +
    "\017\056\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\043\014\012\015\042\016\011\017\340\020" +
    "\031\024\021\027\022\030\010\032\037\033\020\034\030" +
    "\036\046\037\015\040\014\041\035\043\006\046\017\056" +
    "\007\001\001\000\006\021\341\023\343\001\001\000\002" +
    "\001\001\000\050\011\043\014\012\015\042\016\011\017" +
    "\355\020\031\024\021\027\022\030\010\032\037\033\020" +
    "\034\030\036\046\037\015\040\014\041\035\043\006\046" +
    "\017\056\007\001\001\000\004\021\352\001\001\000\002" +
    "\001\001\000\014\003\346\022\061\043\052\044\053\045" +
    "\260\001\001\000\002\001\001\000\050\011\043\014\012" +
    "\015\042\016\011\017\350\020\031\024\021\027\022\030" +
    "\010\032\037\033\020\034\030\036\046\037\015\040\014" +
    "\041\035\043\006\046\017\056\007\001\001\000\004\023" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\362\006\222\013\223" +
    "\001\001\000\006\013\112\035\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\365\006\222\013\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\043\014\012\015\042\016\011\017\370\020\031\024\021" +
    "\027\022\030\010\032\037\033\020\034\030\036\046\037" +
    "\015\040\014\041\035\043\006\046\017\056\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\011\043\014\012\015\042\016\011" +
    "\017\375\020\031\024\021\027\022\030\010\032\037\033" +
    "\020\034\030\036\046\037\015\040\014\041\035\043\006" +
    "\046\017\056\007\001\001\000\002\001\001\000\050\011" +
    "\043\014\012\015\042\016\011\017\377\020\031\024\021" +
    "\027\022\030\010\032\037\033\020\034\030\036\046\037" +
    "\015\040\014\041\035\043\006\046\017\056\007\001\001" +
    "\000\002\001\001\000\014\003\u0106\022\061\043\052\044" +
    "\053\045\260\001\001\000\004\057\u0102\001\001\000\050" +
    "\011\043\014\012\015\042\016\011\017\u0103\020\031\024" +
    "\021\027\022\030\010\032\037\033\020\034\030\036\046" +
    "\037\015\040\014\041\035\043\006\046\017\056\007\001" +
    "\001\000\002\001\001\000\014\003\u0114\022\061\043\052" +
    "\044\053\045\260\001\001\000\014\003\u010b\022\061\043" +
    "\052\044\053\045\260\001\001\000\002\001\001\000\050" +
    "\011\043\014\012\015\042\016\011\017\u0108\020\031\024" +
    "\021\027\022\030\010\032\037\033\020\034\030\036\046" +
    "\037\015\040\014\041\035\043\006\046\017\056\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u010f" +
    "\022\061\043\052\044\053\045\260\001\001\000\002\001" +
    "\001\000\050\011\043\014\012\015\042\016\011\017\u010d" +
    "\020\031\024\021\027\022\030\010\032\037\033\020\034" +
    "\030\036\046\037\015\040\014\041\035\043\006\046\017" +
    "\056\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\043\014\012" +
    "\015\042\016\011\017\u0112\020\031\024\021\027\022\030" +
    "\010\032\037\033\020\034\030\036\046\037\015\040\014" +
    "\041\035\043\006\046\017\056\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\043\014\012\015\042\016\011\017\u0117\020" +
    "\031\024\021\027\022\030\010\032\037\033\020\034\030" +
    "\036\046\037\015\040\014\041\035\043\006\046\017\056" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\043\014\012\015\042\016\011\017\u011a\020\031\024" +
    "\021\027\022\030\010\032\037\033\020\034\030\036\046" +
    "\037\015\040\014\041\035\043\006\046\017\056\007\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        boolean cambiar = true;
        int countTab = 0;
        int tmpCountTab = 0;
        int cont = 0;
        public String python = "";
        public String golang = "";
        public int erroresSintacticos = 0;
        String condicion = "";
        String instruccion = "";
        String tmpInstruccion = "";
        String valor = "";
        String tmpPython = "";
        String tmpImprimir = "";
        String tmpImprimirnl = "";
        Boolean osiBool = false;
        ArrayList<String> variables = new ArrayList<String>();
        ArrayList<String> condiciones = new ArrayList<String>();
        ArrayList<String> tmpListaNombres = new ArrayList<String>();
        ArrayList<String> tmpOperacion = new ArrayList<String>();
        ArrayList<String> tmpOperadorLista = new ArrayList<String>();
        ArrayList<String> pythonArray = new ArrayList<String>();
        ArrayList<String> tmpPythonArray = new ArrayList<String>();
        ArrayList<String> tmpPython2 = new ArrayList<String>();
        public void syntax_error(Symbol s){ 
        erroresSintacticos++;
        //Imprimir error
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        } 
        //Repet tab
        public String tab(int n){
                String tab = "";
                for(int i = 0; i < n; i++){
                tab += "\t";
                }
                return tab;
        }
        //ASCII to char
        public String asciiToChar(String ascii){
                ascii = ascii.replace("{", "");
                ascii = ascii.replace("}", "");
                ascii = ascii.replace("$", "");
                ascii = ascii.replace("'", "");
                String[] asciiArray = ascii.split(",");
                String charValue = "";
                for(int i = 0; i < asciiArray.length; i++){
                        charValue += (char)Integer.parseInt(asciiArray[i]);
                }
                return "\"" + charValue + "\"";
        }
        public void agregarTmpListaNombres(String a){


        for(String i: tmpListaNombres){
                python += i + " = " + a + "\n";
                pythonArray.add(i + " = " + a + ";\n");
        }; 


        tmpListaNombres = new ArrayList<String>();
        }

        public void agregarTmpOperacionLista(String a){
        tmpOperacion.add( "(" + a + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

        }

        public void agregarTmpOperacionLista2(){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 2) + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        }

        public void agregarTmpOperacionLista3(String a){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")" +
                tmpOperadorLista.get(tmpOperadorLista.size() - 1) + "(" + a + ")" 
        ); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

        }

        public void agregarTmpOperacion(String a, String b){
        tmpOperacion.add(a + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + b); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        }
        /**
        * Método al que se llama automáticamente ante algún error sintáctico 
        * en el que ya no es posible una recuperación de errores.
        **/ 
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio E prFin 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= DECLARACION E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
 condiciones.add("if");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
System.out.println("Se realizo un if");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= NT$0 IF NT$1 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= COMENTARIO NT$2 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentarioVariasLineas");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= COMENTARIO_VARIAS_LINEAS NT$3 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un asignacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= ASIGNACION NT$4 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un seleccionMultiple");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= SELECCION_MULTIPLE NT$5 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un para");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= PARA NT$6 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un paraSalto");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= PARA_SALTO NT$7 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              String RESULT =null;
condiciones.add("mientras");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
System.out.println("Se realizo un mientras");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= NT$8 MIENTRAS NT$9 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$10 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un repetir");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= REPETIR NT$10 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$11 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un retorno");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= RETORNO NT$11 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$12 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un metodo");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= METODO NT$12 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$13 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un funcion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= FUNCION NT$13 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$14 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un ejecutar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= EJECUTAR NT$14 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= IMPRIMIR E 
            {
              String RESULT =null;
		tmpPythonArray.add(tmpImprimir);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= IMPRIMIR_NL E 
            {
              String RESULT =null;
		tmpPythonArray.add(tmpImprimirnl);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$15 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo una operacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",51, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= OPERACION NT$15 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$16 ::= 
            {
              String RESULT =null;
tmpPython = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",52, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= error NT$16 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION OPERACIONES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= OPERACIONES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACIONES ::= OPERACION 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		System.out.println("=" + e + ";"); RESULT = e;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= OPERACION tsum OPERACION 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = i + "+" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION ::= OPERACION trest OPERACION 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = i + "-" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= OPERACION tmul OPERACION 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = i + "*" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= OPERACION tdiv OPERACION 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = i + "/" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= OPERACION tmod OPERACION 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = i + "+" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= OPERACION tpot OPERACION 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = i + "**" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= prBoolean 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO ::= prCaracter 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO ::= prNumero 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO ::= prCadena 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                python += a + " = " + b + "\n"; 
                pythonArray.add(a + " = " + b + "\n");
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                agregarTmpListaNombres(b);
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMENTARIO ::= tcomentario 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python +=c.replace("//","#")+"\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMENTARIO_VARIAS_LINEAS ::= tcomentariovariaslineas 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python += c.replace("/*","'''").replace("*/","'''") + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO_VARIAS_LINEAS",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= tvariable FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION ::= tvariable FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION ::= tvariable FLECHA tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION ::= tvariable FLECHA prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= tvariable FLECHA prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = True\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION ::= tvariable FLECHA prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = False\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGNACION ::= tvariable FLECHA caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION ::= LISTA_NOMBRES FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNACION ::= LISTA_NOMBRES FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACION ::= LISTA_NOMBRES FLECHA tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION ::= LISTA_NOMBRES FLECHA prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION ::= LISTA_NOMBRES FLECHA prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = True\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION ::= LISTA_NOMBRES FLECHA prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = False\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= LISTA_NOMBRES FLECHA caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SELECCION_MULTIPLE ::= prSegun SEGUN prFinSegun 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES SEGUN 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALOR ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALOR ::= tcadena 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$17 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",53, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTA_NOMBRES ::= tvariable NT$17 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_NOMBRES ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$18 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",54, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_NOMBRES2 ::= tcoma tvariable NT$18 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_NOMBRES2 ::= tcoma tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF ::= prSi CONDICION prEntonces E prFinSi 
            {
              String RESULT =null;
		
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("if") || tmpPythonArray.get(i).contains("elif") || tmpPythonArray.get(i).contains("else") ){
                                        tmpPython += tab(countTab - 1) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= 1;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= prSi CONDICION prEntonces E O_SI prFinSi 
            {
              String RESULT =null;
		

                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                               if( tmpPythonArray.get(i).contains("if") || tmpPythonArray.get(i).contains("elif") || tmpPythonArray.get(i).contains("else") ){
                                        tmpPython += tab(countTab - 1) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                
                python += tmpPython + tmpPython2.get(tmpPython2.size() - 1) + "\n";
                tmpPython = "";
                tmpPython2.remove(tmpPython2.size() - 1);
                tmpPython2 = new ArrayList<String>();
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= 1;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF ::= prSi CONDICION prEntonces E DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;
		

                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                               if( tmpPythonArray.get(i).contains("if") || tmpPythonArray.get(i).contains("elif") || tmpPythonArray.get(i).contains("else") ){
                                        tmpPython += tab(countTab - 1) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                
                python += tmpPython + tmpPython2.get(tmpPython2.size() - 1) + "\n";
                tmpPython = "";
                tmpPython2.remove(tmpPython2.size() - 1);
                tmpPython2 = new ArrayList<String>();
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= 1;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= prSi CONDICION prEntonces E O_SI DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;
		
 
                //Iterate tmpPythonArray from the last to the first element
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("if") || tmpPythonArray.get(i).contains("elif") || tmpPythonArray.get(i).contains("else") ){
                                        tmpPython += tab(countTab - 1) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }

                
                python += tmpPython;
                tmpPython = "";
                //Iterate tmpPython2 from the last element to the first element
                for(int i = tmpPython2.size() - 2; i >= 0; i--){
                        if(tmpPython2.get(i) != ""){
                                if( tmpPython2.get(i).contains("if") || tmpPython2.get(i).contains("elif") || tmpPython2.get(i).contains("else") ){
                                        tmpPython += tab(countTab - 1) + tmpPython2.get(i) + "\n";
                                }else{
                                        tmpPython += tab(countTab) + tmpPython2.get(i) + "\n";
                                }
                        }
                }
                tmpPython += tmpPython2.get(tmpPython2.size() - 1) + "\n";
                tmpPython2 = new ArrayList<String>();
                python += tmpPython;
                tmpPython = "";
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= 1;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DE_LO_CONTRARIO ::= prDeLoContrario E 
            {
              String RESULT =null;
		
                String tmpstr = "else:\n";
                //Iterate tmpPythonArray from the last element to the first and end when found elif
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != "" && !tmpPythonArray.get(i).equals("elif")){
                                tmpstr += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                tmpPythonArray.remove(i);
                                i--;
                        }
                        if( i >= 0 && tmpPythonArray.get(i).equals("elif")){
                                tmpPythonArray.remove(i);
                                break;
                        }
                }
                tmpPython2.add(tmpstr);
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // O_SI ::= prO_Si CONDICION prEntonces E O_SI 
            {
              String RESULT =null;
		
                String tmpstr = "elif " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first and end when found elif
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != "" && !tmpPythonArray.get(i).equals("elif")){
                                tmpstr += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                tmpPythonArray.remove(i);
                                i--;
                        }
                        if(tmpPythonArray.get(i).equals("elif")){
                                tmpPythonArray.remove(i);
                                break;
                        }
                }
                tmpPython2.add(tmpstr);
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // O_SI ::= prO_Si CONDICION prEntonces E 
            {
              String RESULT =null;
		
                String tmpstr = "elif " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first and end when found elif
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != "" && !tmpPythonArray.get(i).equals("elif")){
                                tmpstr += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                tmpPythonArray.remove(i);
                                i--;
                        }
                        if(tmpPythonArray.get(i).equals("elif")){
                                tmpPythonArray.remove(i);
                                break;
                        }
                }
                tmpPython2.add(tmpstr);
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= VARIABLES prEsIgual VARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "==" + b); 
                        
                        tmpPython += tab(countTab) + "if " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add("if2");
                        countTab += 1;

                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "==" + b); 
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "==" + b); 
                        tmpPython += tab(countTab) + "while " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        countTab += 1;
                }else{
                        condiciones.add(a + "==" + b); 
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION ::= VARIABLES prMayor VARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + ">" + b); 
                        
                        
                        tmpPython += tab(countTab) + "if " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add("if2");
                        countTab += 1;
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + ">" + b);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + ">" + b);
                        tmpPython += tab(countTab) + "while " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        countTab += 1;
                }else{
                        condiciones.add(a + ">" + b);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICION ::= VARIABLES prMayorOIgual VARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + ">=" + b);
                        
                        
                        tmpPython += tab(countTab) + "if " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add("if2");
                        countTab += 1;
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + ">=" + b);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + ">=" + b);
                        tmpPython += tab(countTab) + "while " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        countTab += 1;
                }else{
                        condiciones.add(a + ">=" + b);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= VARIABLES prMenor VARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "<" + b); 
                        
                        tmpPython += tab(countTab) + "if " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add("if2");
                        countTab += 1;
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "<" + b); 
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "<" + b); 
                        tmpPython += tab(countTab) + "while " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        countTab += 1;
                }else{
                        condiciones.add(a + "<" + b); 
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= VARIABLES prMenorOIgual VARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "<=" + b);
                        
                        
                        tmpPython += tab(countTab) + "if " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add("if2");
                        countTab += 1;
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "<=" + b);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "<=" + b);
                        tmpPython += tab(countTab) + "while " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        countTab += 1;
                }else{
                        condiciones.add(a + "<=" + b);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= VARIABLES prEsDiferente VARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "!=" + b);
                        
                        
                        tmpPython += tab(countTab) + "if " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add("if2");
                        countTab += 1;
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "!=" + b);
                }else if(condiciones.get(condiciones.size() -1).equals("mientras")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(a + "!=" + b); 
                        tmpPython += tab(countTab) + "while " + "(" + condiciones.get(condiciones.size() - 1) + ")" + ":\n";
                        condiciones.remove(condiciones.size() - 1);
                        countTab += 1;
                }else{
                        condiciones.add(a + "!=" + b); 

                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VARIABLE ::= tvariable 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARIABLES ::= tcadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARIABLES ::= prFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VARIABLES ::= prVerdadero 
            {
              String RESULT =null;
		RESULT = "True";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VARIABLES ::= prFalso 
            {
              String RESULT =null;
		RESULT = "False";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VARIABLES ::= caracter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VARIABLES ::= ascii 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = (asciiToChar(a));
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VARIABLES ::= EXPRESION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCCIONES_CICLO ::= INSTRUCCIONES_CICLO INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCCIONES_CICLO ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSTRUCCION ::= VARIABLE tigual VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARA ::= prPara VARIABLE FLECHA tnum prHasta tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FLECHA ::= trest tmayor 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FLECHA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARA_SALTO ::= prPara VARIABLE FLECHA tnum prHasta tnum prCon prIncremental tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA_SALTO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MIENTRAS ::= prMientras CONDICION prHacer E prFinMientras 
            {
              String RESULT =null;
		
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("mientras")){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= 1;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MIENTRAS ::= prMientras prNot CONDICION prHacer E prFinMientras 
            {
              String RESULT =null;
		


                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("mientras")){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= 1;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MIENTRAS ::= prMientras pare1 CONDICION pare2 prHacer E prFinMientras 
            {
              String RESULT =null;
		


                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("mientras")){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= 1;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MIENTRAS ::= prMientras prNot pare1 CONDICION pare2 prHacer E prFinMientras 
            {
              String RESULT =null;
		


                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                if( tmpPythonArray.get(i).contains("mientras")){
                                        tmpPython += tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }else{
                                        tmpPython += tab(countTab) + tmpPythonArray.get(i) + "\n";
                                        tmpPythonArray.remove(i);
                                        i--;
                                }
                        }
                }
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= 1;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // REPETIR ::= prRepetir INSTRUCCIONES_CICLO prHasta CONDICION 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RETORNO ::= prRetornar VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // METODO ::= prMetodo VARIABLE prConParametros LISTA_PARAMETROS prConValor VALOR prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // METODO ::= prMetodo VARIABLE INSTRUCCIONES prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LISTA_PARAMETROS ::= VARIABLE tcadena LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LISTA_PARAMETROS ::= VARIABLE tcadena tcoma LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUNCION ::= prFuncion VARIABLE tcadena prConParametros LISTA_PARAMETROS INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUNCION ::= prFuncion VARIABLE tcadena INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EJECUTAR ::= prEjecutar VARIABLE pare1 pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EJECUTAR ::= prEjecutar VARIABLE pare1 LISTA_PARAMETROS pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IMPRIMIR ::= prImprimir VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimir = "print(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IMPRIMIR ::= prImprimir pare1 VARIABLES pare2 tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimir = "print(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IMPRIMIR_NL ::= prImprimirNl VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		

                tmpImprimirnl = "print(" + variables.get(variables.size() - 1) + " + '\\n' )";
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IMPRIMIR_NL ::= prImprimirNl pare1 VARIABLES pare2 tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimirnl = "print(" + variables.get(variables.size() - 1) + " + '\\n' )";
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
