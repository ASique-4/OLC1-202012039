
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\005\000\002\017" +
    "\004\000\002\051\002\000\002\052\002\000\002\017\006" +
    "\000\002\053\002\000\002\017\005\000\002\054\002\000" +
    "\002\017\005\000\002\055\002\000\002\017\005\000\002" +
    "\056\002\000\002\017\005\000\002\057\002\000\002\017" +
    "\005\000\002\060\002\000\002\017\005\000\002\061\002" +
    "\000\002\017\005\000\002\062\002\000\002\017\005\000" +
    "\002\063\002\000\002\017\005\000\002\064\002\000\002" +
    "\017\005\000\002\065\002\000\002\017\005\000\002\066" +
    "\002\000\002\017\005\000\002\017\004\000\002\017\004" +
    "\000\002\067\002\000\002\017\005\000\002\070\002\000" +
    "\002\017\005\000\002\017\002\000\002\044\004\000\002" +
    "\044\003\000\002\044\004\000\002\044\003\000\002\047" +
    "\003\000\002\047\003\000\002\043\005\000\002\043\007" +
    "\000\002\043\007\000\002\043\007\000\002\043\007\000" +
    "\002\043\011\000\002\043\012\000\002\045\005\000\002" +
    "\045\004\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\014\011\000\002\014\011\000\002\014\011\000\002" +
    "\014\011\000\002\015\003\000\002\016\003\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\024\005\000\002\025\010\000\002\025\007" +
    "\000\002\010\003\000\002\010\003\000\002\071\002\000" +
    "\002\011\005\000\002\011\002\000\002\072\002\000\002" +
    "\012\006\000\002\012\004\000\002\007\007\000\002\007" +
    "\010\000\002\007\010\000\002\007\011\000\002\021\004" +
    "\000\002\023\007\000\002\023\006\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\013" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\004\005\000\002" +
    "\004\004\000\002\005\005\000\002\005\004\000\002\006" +
    "\005\000\002\027\013\000\002\026\004\000\002\030\016" +
    "\000\002\031\007\000\002\032\006\000\002\033\004\000" +
    "\002\034\011\000\002\034\006\000\002\035\005\000\002" +
    "\035\006\000\002\036\011\000\002\036\007\000\002\037" +
    "\007\000\002\037\010\000\002\040\005\000\002\040\007" +
    "\000\002\041\005\000\002\041\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\004\015\004\001\002\000\052\003\035\004" +
    "\036\005\uffa9\013\032\016\uffdd\023\034\024\025\026\010" +
    "\031\ufffe\036\040\040\053\045\043\047\050\051\021\052" +
    "\013\055\020\057\022\060\027\061\030\063\016\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\004\031\u0112\001\002\000\006\027\uffa9\063\374\001\002" +
    "\000\060\003\uffe1\004\uffe1\005\uffe1\013\uffe1\016\uffe1\023" +
    "\uffe1\024\uffe1\026\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\040\uffe1\045\uffe1\047\uffe1\051\uffe1\052\uffe1\055" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\063\uffe1\001\002\000\016" +
    "\005\220\006\221\007\227\010\217\011\234\012\225\001" +
    "\002\000\004\063\054\001\002\000\060\003\035\004\036" +
    "\005\uffa9\013\032\016\uffdd\023\034\024\025\026\010\031" +
    "\ufffe\033\uffdd\034\uffdd\035\uffdd\036\040\040\053\045\043" +
    "\047\050\051\021\052\013\055\020\057\022\060\027\061" +
    "\030\063\016\001\002\000\060\003\uffe7\004\uffe7\005\uffe7" +
    "\013\uffe7\016\uffe7\023\uffe7\024\uffe7\026\uffe7\031\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7\045\uffe7\047\uffe7" +
    "\051\uffe7\052\uffe7\055\uffe7\057\uffe7\060\uffe7\061\uffe7\063" +
    "\uffe7\001\002\000\020\005\057\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\021\uffab\001\002\000\060\003\uffe9\004" +
    "\uffe9\005\uffe9\013\uffe9\016\uffe9\023\uffe9\024\uffe9\026\uffe9" +
    "\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9\045" +
    "\uffe9\047\uffe9\051\uffe9\052\uffe9\055\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\063\uffe9\001\002\000\004\063\054\001\002\000" +
    "\006\063\075\064\076\001\002\000\004\063\054\001\002" +
    "\000\004\016\302\001\002\000\060\003\ufff9\004\ufff9\005" +
    "\ufff9\013\ufff9\016\ufff9\023\ufff9\024\ufff9\026\ufff9\031\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\036\ufff9\040\ufff9\045\ufff9\047" +
    "\ufff9\051\ufff9\052\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\063\ufff9\001\002\000\060\003\uffbf\004\uffbf\005\uffbf\013" +
    "\uffbf\016\uffbf\023\uffbf\024\uffbf\026\uffbf\031\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\040\uffbf\045\uffbf\047\uffbf\051" +
    "\uffbf\052\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\063\uffbf" +
    "\001\002\000\060\003\uffef\004\uffef\005\uffef\013\uffef\016" +
    "\uffef\023\uffef\024\uffef\026\uffef\031\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\040\uffef\045\uffef\047\uffef\051\uffef\052" +
    "\uffef\055\uffef\057\uffef\060\uffef\061\uffef\063\uffef\001\002" +
    "\000\024\004\114\013\270\063\134\064\115\073\123\074" +
    "\122\100\121\104\120\107\125\001\002\000\024\004\114" +
    "\013\263\063\134\064\115\073\123\074\122\100\121\104" +
    "\120\107\125\001\002\000\060\003\uffeb\004\uffeb\005\uffeb" +
    "\013\uffeb\016\uffeb\023\uffeb\024\uffeb\026\uffeb\031\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb\045\uffeb\047\uffeb" +
    "\051\uffeb\052\uffeb\055\uffeb\057\uffeb\060\uffeb\061\uffeb\063" +
    "\uffeb\001\002\000\022\004\036\005\220\006\221\007\227" +
    "\010\217\012\225\013\032\063\224\001\002\000\004\005" +
    "\057\001\002\000\060\003\uffc0\004\uffc0\005\uffc0\013\uffc0" +
    "\016\uffc0\023\uffc0\024\uffc0\026\uffc0\031\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\040\uffc0\045\uffc0\047\uffc0\051\uffc0" +
    "\052\uffc0\055\uffc0\057\uffc0\060\uffc0\061\uffc0\063\uffc0\001" +
    "\002\000\060\003\uffdf\004\uffdf\005\uffdf\013\uffdf\016\uffdf" +
    "\023\uffdf\024\uffdf\026\uffdf\031\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\040\uffdf\045\uffdf\047\uffdf\051\uffdf\052\uffdf" +
    "\055\uffdf\057\uffdf\060\uffdf\061\uffdf\063\uffdf\001\002\000" +
    "\100\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\040\uffd8\045\uffd8\047\uffd8\051\uffd8\052\uffd8\055" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\063\uffd8\106\uffd8\001\002" +
    "\000\060\003\ufffb\004\ufffb\005\ufffb\013\ufffb\016\ufffb\023" +
    "\ufffb\024\ufffb\026\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\040\ufffb\045\ufffb\047\ufffb\051\ufffb\052\ufffb\055" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\063\ufffb\001\002\000\004" +
    "\017\161\001\002\000\060\003\ufff7\004\ufff7\005\ufff7\013" +
    "\ufff7\016\ufff7\023\ufff7\024\ufff7\026\ufff7\031\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\040\ufff7\045\ufff7\047\ufff7\051" +
    "\ufff7\052\ufff7\055\ufff7\057\ufff7\060\ufff7\061\ufff7\063\ufff7" +
    "\001\002\000\060\003\035\004\036\005\uffa9\013\032\016" +
    "\uffdd\023\034\024\025\026\010\031\ufffe\033\uffdd\034\uffdd" +
    "\035\uffdd\036\040\040\053\045\043\047\050\051\021\052" +
    "\013\055\020\057\022\060\027\061\030\063\016\001\002" +
    "\000\022\004\114\063\116\064\115\073\123\074\122\100" +
    "\121\104\120\107\125\001\002\000\060\003\035\004\036" +
    "\005\uffa9\013\032\016\uffdd\023\034\024\025\026\010\031" +
    "\ufffe\033\uffdd\034\uffdd\035\uffdd\036\040\040\053\045\043" +
    "\047\050\051\021\052\013\055\020\057\022\060\027\061" +
    "\030\063\016\001\002\000\060\003\uffed\004\uffed\005\uffed" +
    "\013\uffed\016\uffed\023\uffed\024\uffed\026\uffed\031\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\040\uffed\045\uffed\047\uffed" +
    "\051\uffed\052\uffed\055\uffed\057\uffed\060\uffed\061\uffed\063" +
    "\uffed\001\002\000\060\003\ufff1\004\ufff1\005\ufff1\013\ufff1" +
    "\016\ufff1\023\ufff1\024\ufff1\026\ufff1\031\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\040\ufff1\045\ufff1\047\ufff1\051\ufff1" +
    "\052\ufff1\055\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1\001" +
    "\002\000\060\003\ufff3\004\ufff3\005\ufff3\013\ufff3\016\ufff3" +
    "\023\ufff3\024\ufff3\026\ufff3\031\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\040\ufff3\045\ufff3\047\ufff3\051\ufff3\052\ufff3" +
    "\055\ufff3\057\ufff3\060\ufff3\061\ufff3\063\ufff3\001\002\000" +
    "\004\063\054\001\002\000\060\003\uffe5\004\uffe5\005\uffe5" +
    "\013\uffe5\016\uffe5\023\uffe5\024\uffe5\026\uffe5\031\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\045\uffe5\047\uffe5" +
    "\051\uffe5\052\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\063" +
    "\uffe5\001\002\000\060\003\ufff5\004\ufff5\005\ufff5\013\ufff5" +
    "\016\ufff5\023\ufff5\024\ufff5\026\ufff5\031\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\040\ufff5\045\ufff5\047\ufff5\051\ufff5" +
    "\052\ufff5\055\ufff5\057\ufff5\060\ufff5\061\ufff5\063\ufff5\001" +
    "\002\000\004\063\054\001\002\000\016\005\uff97\013\uff97" +
    "\054\uff97\062\uff97\063\uff97\064\uff97\001\002\000\004\005" +
    "\057\001\002\000\004\004\061\001\002\000\004\022\060" +
    "\001\002\000\020\004\uff88\063\uff88\064\uff88\073\uff88\074" +
    "\uff88\100\uff88\104\uff88\001\002\000\004\041\062\001\002" +
    "\000\004\004\063\001\002\000\006\037\064\043\065\001" +
    "\002\000\004\063\054\001\002\000\004\044\066\001\002" +
    "\000\004\004\067\001\002\000\004\037\070\001\002\000" +
    "\004\063\054\001\002\000\004\025\103\001\002\000\006" +
    "\042\101\063\054\001\002\000\004\062\074\001\002\000" +
    "\006\063\075\064\076\001\002\000\066\003\uffad\004\uffad" +
    "\005\uffad\013\uffad\016\uffad\020\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\031\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\040\uffad\045\uffad\047\uffad\051\uffad\052\uffad\053\uffad\055" +
    "\uffad\057\uffad\060\uffad\061\uffad\063\uffad\001\002\000\066" +
    "\003\uffac\004\uffac\005\uffac\013\uffac\016\uffac\020\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\031\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\040\uffac\045\uffac\047\uffac\051\uffac\052" +
    "\uffac\053\uffac\055\uffac\057\uffac\060\uffac\061\uffac\063\uffac" +
    "\001\002\000\004\025\uff8a\001\002\000\004\025\102\001" +
    "\002\000\060\003\uff87\004\uff87\005\uff87\013\uff87\016\uff87" +
    "\023\uff87\024\uff87\026\uff87\031\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\040\uff87\045\uff87\047\uff87\051\uff87\052\uff87" +
    "\055\uff87\057\uff87\060\uff87\061\uff87\063\uff87\001\002\000" +
    "\012\041\uff8c\042\uff8c\046\uff8c\063\uff8c\001\002\000\012" +
    "\041\uff8b\042\uff8b\046\uff8b\063\uff8b\001\002\000\006\042" +
    "\105\063\054\001\002\000\060\003\uff89\004\uff89\005\uff89" +
    "\013\uff89\016\uff89\023\uff89\024\uff89\026\uff89\031\uff89\033" +
    "\uff89\034\uff89\035\uff89\036\uff89\040\uff89\045\uff89\047\uff89" +
    "\051\uff89\052\uff89\055\uff89\057\uff89\060\uff89\061\uff89\063" +
    "\uff89\001\002\000\060\003\035\004\036\005\uffa9\013\032" +
    "\016\uffdd\023\034\024\025\026\010\031\ufffe\033\uffdd\034" +
    "\uffdd\035\uffdd\036\040\040\053\045\043\047\050\051\021" +
    "\052\013\055\020\057\022\060\027\061\030\063\016\001" +
    "\002\000\012\016\ufff4\033\ufff4\034\ufff4\035\ufff4\001\002" +
    "\000\060\003\035\004\036\005\uffa9\013\032\016\uffdd\023" +
    "\034\024\025\026\010\031\ufffe\033\uffdd\034\uffdd\035\uffdd" +
    "\036\040\040\053\045\043\047\050\051\021\052\013\055" +
    "\020\057\022\060\027\061\030\063\016\001\002\000\012" +
    "\016\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000\006\041" +
    "\113\063\054\001\002\000\022\004\114\063\116\064\115" +
    "\073\123\074\122\100\121\104\120\107\125\001\002\000" +
    "\104\003\uff95\004\uff95\005\uff95\013\uff95\014\uff95\016\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\045\uff95" +
    "\047\uff95\051\uff95\052\uff95\055\uff95\057\uff95\060\uff95\061" +
    "\uff95\063\uff95\075\uff95\076\uff95\077\uff95\101\uff95\102\uff95" +
    "\103\uff95\001\002\000\104\003\uff94\004\uff94\005\uff94\013" +
    "\uff94\014\uff94\016\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\045\uff94\047\uff94\051\uff94\052\uff94\055\uff94" +
    "\057\uff94\060\uff94\061\uff94\063\uff94\075\uff94\076\uff94\077" +
    "\uff94\101\uff94\102\uff94\103\uff94\001\002\000\100\003\uff98" +
    "\004\uff98\005\uff98\013\uff98\016\uff98\023\uff98\024\uff98\026" +
    "\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\045\uff98\047\uff98\051\uff98\052\uff98\055" +
    "\uff98\057\uff98\060\uff98\061\uff98\063\uff98\075\uff96\076\uff96" +
    "\077\uff96\101\uff96\102\uff96\103\uff96\001\002\000\016\075" +
    "\131\076\126\077\133\101\132\102\130\103\127\001\002" +
    "\000\104\003\uff90\004\uff90\005\uff90\013\uff90\014\uff90\016" +
    "\uff90\023\uff90\024\uff90\025\uff90\026\uff90\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\045" +
    "\uff90\047\uff90\051\uff90\052\uff90\055\uff90\057\uff90\060\uff90" +
    "\061\uff90\063\uff90\075\uff90\076\uff90\077\uff90\101\uff90\102" +
    "\uff90\103\uff90\001\002\000\104\003\uff93\004\uff93\005\uff93" +
    "\013\uff93\014\uff93\016\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\045\uff93\047\uff93\051\uff93\052\uff93\055" +
    "\uff93\057\uff93\060\uff93\061\uff93\063\uff93\075\uff93\076\uff93" +
    "\077\uff93\101\uff93\102\uff93\103\uff93\001\002\000\104\003" +
    "\uff91\004\uff91\005\uff91\013\uff91\014\uff91\016\uff91\023\uff91" +
    "\024\uff91\025\uff91\026\uff91\031\uff91\032\uff91\033\uff91\034" +
    "\uff91\035\uff91\036\uff91\037\uff91\040\uff91\045\uff91\047\uff91" +
    "\051\uff91\052\uff91\055\uff91\057\uff91\060\uff91\061\uff91\063" +
    "\uff91\075\uff91\076\uff91\077\uff91\101\uff91\102\uff91\103\uff91" +
    "\001\002\000\104\003\uff92\004\uff92\005\uff92\013\uff92\014" +
    "\uff92\016\uff92\023\uff92\024\uff92\025\uff92\026\uff92\031\uff92" +
    "\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040" +
    "\uff92\045\uff92\047\uff92\051\uff92\052\uff92\055\uff92\057\uff92" +
    "\060\uff92\061\uff92\063\uff92\075\uff92\076\uff92\077\uff92\101" +
    "\uff92\102\uff92\103\uff92\001\002\000\060\003\uff85\004\uff85" +
    "\005\uff85\013\uff85\016\uff85\023\uff85\024\uff85\026\uff85\031" +
    "\uff85\033\uff85\034\uff85\035\uff85\036\uff85\040\uff85\045\uff85" +
    "\047\uff85\051\uff85\052\uff85\055\uff85\057\uff85\060\uff85\061" +
    "\uff85\063\uff85\001\002\000\104\003\uff8f\004\uff8f\005\uff8f" +
    "\013\uff8f\014\uff8f\016\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\040\uff8f\045\uff8f\047\uff8f\051\uff8f\052\uff8f\055" +
    "\uff8f\057\uff8f\060\uff8f\061\uff8f\063\uff8f\075\uff8f\076\uff8f" +
    "\077\uff8f\101\uff8f\102\uff8f\103\uff8f\001\002\000\022\004" +
    "\114\063\134\064\115\073\123\074\122\100\121\104\120" +
    "\107\125\001\002\000\022\004\114\063\134\064\115\073" +
    "\123\074\122\100\121\104\120\107\125\001\002\000\022" +
    "\004\114\063\134\064\115\073\123\074\122\100\121\104" +
    "\120\107\125\001\002\000\022\004\114\063\134\064\115" +
    "\073\123\074\122\100\121\104\120\107\125\001\002\000" +
    "\022\004\114\063\134\064\115\073\123\074\122\100\121" +
    "\104\120\107\125\001\002\000\022\004\114\063\134\064" +
    "\115\073\123\074\122\100\121\104\120\107\125\001\002" +
    "\000\070\003\uff96\004\uff96\005\uff96\013\uff96\014\uff96\016" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\031\uff96\032\uff96" +
    "\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\045" +
    "\uff96\047\uff96\051\uff96\052\uff96\055\uff96\057\uff96\060\uff96" +
    "\061\uff96\063\uff96\001\002\000\064\003\uff9d\004\uff9d\005" +
    "\uff9d\013\uff9d\016\uff9d\023\uff9d\024\uff9d\026\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\045\uff9d\047\uff9d\051\uff9d\052\uff9d\055\uff9d\057\uff9d" +
    "\060\uff9d\061\uff9d\063\uff9d\001\002\000\064\003\uff9b\004" +
    "\uff9b\005\uff9b\013\uff9b\016\uff9b\023\uff9b\024\uff9b\026\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\045\uff9b\047\uff9b\051\uff9b\052\uff9b\055\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\063\uff9b\001\002\000\064\003" +
    "\uff9e\004\uff9e\005\uff9e\013\uff9e\016\uff9e\023\uff9e\024\uff9e" +
    "\026\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\045\uff9e\047\uff9e\051\uff9e\052\uff9e" +
    "\055\uff9e\057\uff9e\060\uff9e\061\uff9e\063\uff9e\001\002\000" +
    "\064\003\uff9c\004\uff9c\005\uff9c\013\uff9c\016\uff9c\023\uff9c" +
    "\024\uff9c\026\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\045\uff9c\047\uff9c\051\uff9c" +
    "\052\uff9c\055\uff9c\057\uff9c\060\uff9c\061\uff9c\063\uff9c\001" +
    "\002\000\064\003\uff9a\004\uff9a\005\uff9a\013\uff9a\016\uff9a" +
    "\023\uff9a\024\uff9a\026\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\045\uff9a\047\uff9a" +
    "\051\uff9a\052\uff9a\055\uff9a\057\uff9a\060\uff9a\061\uff9a\063" +
    "\uff9a\001\002\000\064\003\uff99\004\uff99\005\uff99\013\uff99" +
    "\016\uff99\023\uff99\024\uff99\026\uff99\031\uff99\032\uff99\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\045\uff99" +
    "\047\uff99\051\uff99\052\uff99\055\uff99\057\uff99\060\uff99\061" +
    "\uff99\063\uff99\001\002\000\060\003\035\004\036\005\uffa9" +
    "\013\032\016\uffdd\023\034\024\025\026\010\031\ufffe\033" +
    "\uffdd\034\uffdd\035\uffdd\036\040\040\053\045\043\047\050" +
    "\051\021\052\013\055\020\057\022\060\027\061\030\063" +
    "\016\001\002\000\012\016\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\001\002\000\060\003\035\004\036\005\uffa9\013\032\016" +
    "\uffdd\023\034\024\025\026\010\031\ufffe\033\uffdd\034\uffdd" +
    "\035\uffdd\036\040\040\053\045\043\047\050\051\021\052" +
    "\013\055\020\057\022\060\027\061\030\063\016\001\002" +
    "\000\012\016\ufff0\033\ufff0\034\ufff0\035\ufff0\001\002\000" +
    "\060\003\035\004\036\005\uffa9\013\032\016\uffdd\023\034" +
    "\024\025\026\010\031\ufffe\033\uffdd\034\uffdd\035\uffdd\036" +
    "\040\040\053\045\043\047\050\051\021\052\013\055\020" +
    "\057\022\060\027\061\030\063\016\001\002\000\012\016" +
    "\uffec\033\uffec\034\uffec\035\uffec\001\002\000\012\016\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\001\002\000\004\037\153\001" +
    "\002\000\004\063\054\001\002\000\006\046\155\063\054" +
    "\001\002\000\060\003\uff86\004\uff86\005\uff86\013\uff86\016" +
    "\uff86\023\uff86\024\uff86\026\uff86\031\uff86\033\uff86\034\uff86" +
    "\035\uff86\036\uff86\040\uff86\045\uff86\047\uff86\051\uff86\052" +
    "\uff86\055\uff86\057\uff86\060\uff86\061\uff86\063\uff86\001\002" +
    "\000\012\016\uffff\033\uffff\034\uffff\035\uffff\001\002\000" +
    "\060\003\035\004\036\005\uffa9\013\032\016\uffdd\023\034" +
    "\024\025\026\010\031\ufffe\033\uffdd\034\uffdd\035\uffdd\036" +
    "\040\040\053\045\043\047\050\051\021\052\013\055\020" +
    "\057\022\060\027\061\030\063\016\001\002\000\012\016" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\001\002\000\006\063\075" +
    "\064\076\001\002\000\004\065\163\001\002\000\060\003" +
    "\uffb0\004\uffb0\005\uffb0\013\uffb0\016\uffb0\023\uffb0\024\uffb0" +
    "\026\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040" +
    "\uffb0\045\uffb0\047\uffb0\051\uffb0\052\uffb0\055\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\063\uffb0\001\002\000\004\020\165\001" +
    "\002\000\004\032\166\001\002\000\004\063\054\001\002" +
    "\000\006\017\161\065\uffae\001\002\000\004\025\171\001" +
    "\002\000\014\017\uff8d\053\uff8d\056\uff8d\063\054\065\uff8d" +
    "\001\002\000\012\017\uff8e\053\uff8e\056\uff8e\065\uff8e\001" +
    "\002\000\004\065\uffaf\001\002\000\060\003\035\004\036" +
    "\005\uffa9\013\032\016\uffdd\023\034\024\025\026\010\031" +
    "\ufffe\033\uffdd\034\uffdd\035\uffdd\036\040\040\053\045\043" +
    "\047\050\051\021\052\013\055\020\057\022\060\027\061" +
    "\030\063\016\001\002\000\012\016\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\001\002\000\060\003\035\004\036\005\uffa9\013" +
    "\032\016\uffdd\023\034\024\025\026\010\031\ufffe\033\uffdd" +
    "\034\uffdd\035\uffdd\036\040\040\053\045\043\047\050\051" +
    "\021\052\013\055\020\057\022\060\027\061\030\063\016" +
    "\001\002\000\012\016\uffde\033\uffde\034\uffde\035\uffde\001" +
    "\002\000\020\004\204\063\202\064\201\073\203\074\205" +
    "\100\206\104\207\001\002\000\004\025\216\001\002\000" +
    "\004\025\215\001\002\000\004\025\214\001\002\000\004" +
    "\025\213\001\002\000\004\025\212\001\002\000\004\025" +
    "\211\001\002\000\004\025\210\001\002\000\060\003\uffb1" +
    "\004\uffb1\005\uffb1\013\uffb1\016\uffb1\023\uffb1\024\uffb1\026" +
    "\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\040\uffb1" +
    "\045\uffb1\047\uffb1\051\uffb1\052\uffb1\055\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\063\uffb1\001\002\000\060\003\uffb4\004\uffb4" +
    "\005\uffb4\013\uffb4\016\uffb4\023\uffb4\024\uffb4\026\uffb4\031" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\045\uffb4" +
    "\047\uffb4\051\uffb4\052\uffb4\055\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\063\uffb4\001\002\000\060\003\uffb2\004\uffb2\005\uffb2" +
    "\013\uffb2\016\uffb2\023\uffb2\024\uffb2\026\uffb2\031\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\045\uffb2\047\uffb2" +
    "\051\uffb2\052\uffb2\055\uffb2\057\uffb2\060\uffb2\061\uffb2\063" +
    "\uffb2\001\002\000\060\003\uffb6\004\uffb6\005\uffb6\013\uffb6" +
    "\016\uffb6\023\uffb6\024\uffb6\026\uffb6\031\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\040\uffb6\045\uffb6\047\uffb6\051\uffb6" +
    "\052\uffb6\055\uffb6\057\uffb6\060\uffb6\061\uffb6\063\uffb6\001" +
    "\002\000\060\003\uffb3\004\uffb3\005\uffb3\013\uffb3\016\uffb3" +
    "\023\uffb3\024\uffb3\026\uffb3\031\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\040\uffb3\045\uffb3\047\uffb3\051\uffb3\052\uffb3" +
    "\055\uffb3\057\uffb3\060\uffb3\061\uffb3\063\uffb3\001\002\000" +
    "\060\003\uffb5\004\uffb5\005\uffb5\013\uffb5\016\uffb5\023\uffb5" +
    "\024\uffb5\026\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\040\uffb5\045\uffb5\047\uffb5\051\uffb5\052\uffb5\055\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\063\uffb5\001\002\000\060\003" +
    "\uffb7\004\uffb7\005\uffb7\013\uffb7\016\uffb7\023\uffb7\024\uffb7" +
    "\026\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040" +
    "\uffb7\045\uffb7\047\uffb7\051\uffb7\052\uffb7\055\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\063\uffb7\001\002\000\010\004\uffca\013" +
    "\uffca\063\uffca\001\002\000\010\004\uffcc\013\uffcc\063\uffcc" +
    "\001\002\000\010\004\uffcd\013\uffcd\063\uffcd\001\002\000" +
    "\024\004\036\005\220\006\221\007\227\010\217\012\225" +
    "\013\032\014\uffd9\063\224\001\002\000\004\014\250\001" +
    "\002\000\100\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\031\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\040\uffd7\045\uffd7\047\uffd7\051\uffd7\052" +
    "\uffd7\055\uffd7\057\uffd7\060\uffd7\061\uffd7\063\uffd7\106\uffd7" +
    "\001\002\000\010\004\uffc9\013\uffc9\063\uffc9\001\002\000" +
    "\024\004\036\005\220\006\221\007\227\010\217\012\225" +
    "\013\032\014\uffdb\063\224\001\002\000\010\004\uffcb\013" +
    "\uffcb\063\uffcb\001\002\000\010\004\036\013\032\063\224" +
    "\001\002\000\076\003\uffce\004\uffce\005\220\006\221\007" +
    "\227\010\217\011\234\012\225\013\uffce\014\uffce\016\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\031\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\040\uffce\045\uffce\047\uffce\051\uffce" +
    "\052\uffce\055\uffce\057\uffce\060\uffce\061\uffce\063\uffce\001" +
    "\002\000\014\005\220\006\221\007\227\010\217\012\225" +
    "\001\002\000\074\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\031\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\040\uffcf\045\uffcf\047\uffcf\051\uffcf\052\uffcf" +
    "\055\uffcf\057\uffcf\060\uffcf\061\uffcf\063\uffcf\001\002\000" +
    "\004\105\244\001\002\000\010\004\036\013\237\063\224" +
    "\001\002\000\074\003\uffd6\004\uffd6\005\220\006\221\007" +
    "\227\010\217\012\225\013\uffd6\014\uffd6\016\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\031\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\040\uffd6\045\uffd6\047\uffd6\051\uffd6\052\uffd6" +
    "\055\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6\001\002\000" +
    "\022\004\036\005\220\006\221\007\227\010\217\012\225" +
    "\013\032\063\224\001\002\000\004\014\241\001\002\000" +
    "\074\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\016\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\040\uffd3\045\uffd3\047\uffd3\051\uffd3\052\uffd3\055\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\063\uffd3\001\002\000\010\004\036" +
    "\013\032\063\224\001\002\000\074\003\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\016\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\031\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\045\uffd5\047\uffd5" +
    "\051\uffd5\052\uffd5\055\uffd5\057\uffd5\060\uffd5\061\uffd5\063" +
    "\uffd5\001\002\000\006\004\036\063\224\001\002\000\004" +
    "\106\246\001\002\000\074\003\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\031\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\040\uffd4\045\uffd4\047\uffd4\051\uffd4" +
    "\052\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4\001" +
    "\002\000\004\014\uffdc\001\002\000\014\005\220\006\221" +
    "\007\227\010\217\012\225\001\002\000\010\004\036\013" +
    "\253\063\224\001\002\000\074\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\016" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\031\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\040\uffd2\045\uffd2\047\uffd2\051" +
    "\uffd2\052\uffd2\055\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2" +
    "\001\002\000\022\004\036\005\220\006\221\007\227\010" +
    "\217\012\225\013\032\063\224\001\002\000\004\014\255" +
    "\001\002\000\074\003\uffd1\004\uffd1\005\220\006\221\007" +
    "\227\010\217\012\225\013\uffd1\014\uffd1\016\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\031\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\040\uffd1\045\uffd1\047\uffd1\051\uffd1\052\uffd1" +
    "\055\uffd1\057\uffd1\060\uffd1\061\uffd1\063\uffd1\001\002\000" +
    "\074\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\016\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\040\uffd0\045\uffd0\047\uffd0\051\uffd0\052\uffd0\055\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\063\uffd0\001\002\000\004\014\uffda" +
    "\001\002\000\060\003\035\004\036\005\uffa9\013\032\016" +
    "\uffdd\023\034\024\025\026\010\031\ufffe\033\uffdd\034\uffdd" +
    "\035\uffdd\036\040\040\053\045\043\047\050\051\021\052" +
    "\013\055\020\057\022\060\027\061\030\063\016\001\002" +
    "\000\012\016\uffea\033\uffea\034\uffea\035\uffea\001\002\000" +
    "\004\025\267\001\002\000\022\004\114\063\134\064\115" +
    "\073\123\074\122\100\121\104\120\107\125\001\002\000" +
    "\004\014\265\001\002\000\004\025\266\001\002\000\060" +
    "\003\uff78\004\uff78\005\uff78\013\uff78\016\uff78\023\uff78\024" +
    "\uff78\026\uff78\031\uff78\033\uff78\034\uff78\035\uff78\036\uff78" +
    "\040\uff78\045\uff78\047\uff78\051\uff78\052\uff78\055\uff78\057" +
    "\uff78\060\uff78\061\uff78\063\uff78\001\002\000\060\003\uff79" +
    "\004\uff79\005\uff79\013\uff79\016\uff79\023\uff79\024\uff79\026" +
    "\uff79\031\uff79\033\uff79\034\uff79\035\uff79\036\uff79\040\uff79" +
    "\045\uff79\047\uff79\051\uff79\052\uff79\055\uff79\057\uff79\060" +
    "\uff79\061\uff79\063\uff79\001\002\000\022\004\114\063\134" +
    "\064\115\073\123\074\122\100\121\104\120\107\125\001" +
    "\002\000\004\025\272\001\002\000\060\003\uff7b\004\uff7b" +
    "\005\uff7b\013\uff7b\016\uff7b\023\uff7b\024\uff7b\026\uff7b\031" +
    "\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\040\uff7b\045\uff7b" +
    "\047\uff7b\051\uff7b\052\uff7b\055\uff7b\057\uff7b\060\uff7b\061" +
    "\uff7b\063\uff7b\001\002\000\004\014\274\001\002\000\004" +
    "\025\275\001\002\000\060\003\uff7a\004\uff7a\005\uff7a\013" +
    "\uff7a\016\uff7a\023\uff7a\024\uff7a\026\uff7a\031\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\040\uff7a\045\uff7a\047\uff7a\051" +
    "\uff7a\052\uff7a\055\uff7a\057\uff7a\060\uff7a\061\uff7a\063\uff7a" +
    "\001\002\000\060\003\035\004\036\005\uffa9\013\032\016" +
    "\uffdd\023\034\024\025\026\010\031\ufffe\033\uffdd\034\uffdd" +
    "\035\uffdd\036\040\040\053\045\043\047\050\051\021\052" +
    "\013\055\020\057\022\060\027\061\030\063\016\001\002" +
    "\000\012\016\uffee\033\uffee\034\uffee\035\uffee\001\002\000" +
    "\060\003\035\004\036\005\uffa9\013\032\016\uffdd\023\034" +
    "\024\025\026\010\031\ufffe\033\uffdd\034\uffdd\035\uffdd\036" +
    "\040\040\053\045\043\047\050\051\021\052\013\055\020" +
    "\057\022\060\027\061\030\063\016\001\002\000\012\016" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\001\002\000\004\002\000" +
    "\001\002\000\004\013\304\001\002\000\006\014\306\063" +
    "\054\001\002\000\004\014\315\001\002\000\004\025\314" +
    "\001\002\000\004\064\310\001\002\000\006\021\312\063" +
    "\054\001\002\000\010\014\uff81\030\uff81\063\uff81\001\002" +
    "\000\004\063\054\001\002\000\010\014\uff80\030\uff80\063" +
    "\uff80\001\002\000\060\003\uff7d\004\uff7d\005\uff7d\013\uff7d" +
    "\016\uff7d\023\uff7d\024\uff7d\026\uff7d\031\uff7d\033\uff7d\034" +
    "\uff7d\035\uff7d\036\uff7d\040\uff7d\045\uff7d\047\uff7d\051\uff7d" +
    "\052\uff7d\055\uff7d\057\uff7d\060\uff7d\061\uff7d\063\uff7d\001" +
    "\002\000\004\025\316\001\002\000\060\003\uff7c\004\uff7c" +
    "\005\uff7c\013\uff7c\016\uff7c\023\uff7c\024\uff7c\026\uff7c\031" +
    "\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\040\uff7c\045\uff7c" +
    "\047\uff7c\051\uff7c\052\uff7c\055\uff7c\057\uff7c\060\uff7c\061" +
    "\uff7c\063\uff7c\001\002\000\060\003\uff84\004\uff84\005\uff84" +
    "\013\uff84\016\uff84\023\uff84\024\uff84\026\uff84\031\uff84\033" +
    "\uff84\034\uff84\035\uff84\036\uff84\040\uff84\045\uff84\047\uff84" +
    "\051\uff84\052\uff84\055\uff84\057\uff84\060\uff84\061\uff84\063" +
    "\uff84\001\002\000\004\064\321\001\002\000\006\054\322" +
    "\063\054\001\002\000\004\063\054\001\002\000\004\056" +
    "\324\001\002\000\060\003\uff7e\004\uff7e\005\uff7e\013\uff7e" +
    "\016\uff7e\023\uff7e\024\uff7e\026\uff7e\031\uff7e\033\uff7e\034" +
    "\uff7e\035\uff7e\036\uff7e\040\uff7e\045\uff7e\047\uff7e\051\uff7e" +
    "\052\uff7e\055\uff7e\057\uff7e\060\uff7e\061\uff7e\063\uff7e\001" +
    "\002\000\004\063\054\001\002\000\004\056\327\001\002" +
    "\000\060\003\uff7f\004\uff7f\005\uff7f\013\uff7f\016\uff7f\023" +
    "\uff7f\024\uff7f\026\uff7f\031\uff7f\033\uff7f\034\uff7f\035\uff7f" +
    "\036\uff7f\040\uff7f\045\uff7f\047\uff7f\051\uff7f\052\uff7f\055" +
    "\uff7f\057\uff7f\060\uff7f\061\uff7f\063\uff7f\001\002\000\060" +
    "\003\035\004\036\005\uffa9\013\032\016\uffdd\023\034\024" +
    "\025\026\010\031\ufffe\033\uffdd\034\uffdd\035\uffdd\036\040" +
    "\040\053\045\043\047\050\051\021\052\013\055\020\057" +
    "\022\060\027\061\030\063\016\001\002\000\012\016\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\001\002\000\020\004\344\063" +
    "\341\064\342\073\343\074\345\100\346\104\347\001\002" +
    "\000\004\021\335\001\002\000\006\005\uffaa\027\uffaa\001" +
    "\002\000\004\063\336\001\002\000\010\005\uffa6\021\uffa8" +
    "\027\uffa6\001\002\000\004\021\335\001\002\000\006\005" +
    "\uffa7\027\uffa7\001\002\000\004\025\356\001\002\000\004" +
    "\025\355\001\002\000\004\025\354\001\002\000\004\025" +
    "\353\001\002\000\004\025\352\001\002\000\004\025\351" +
    "\001\002\000\004\025\350\001\002\000\060\003\uffb8\004" +
    "\uffb8\005\uffb8\013\uffb8\016\uffb8\023\uffb8\024\uffb8\026\uffb8" +
    "\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\045" +
    "\uffb8\047\uffb8\051\uffb8\052\uffb8\055\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\063\uffb8\001\002\000\060\003\uffbb\004\uffbb\005" +
    "\uffbb\013\uffbb\016\uffbb\023\uffbb\024\uffbb\026\uffbb\031\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\045\uffbb\047" +
    "\uffbb\051\uffbb\052\uffbb\055\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\063\uffbb\001\002\000\060\003\uffb9\004\uffb9\005\uffb9\013" +
    "\uffb9\016\uffb9\023\uffb9\024\uffb9\026\uffb9\031\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\040\uffb9\045\uffb9\047\uffb9\051" +
    "\uffb9\052\uffb9\055\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9" +
    "\001\002\000\060\003\uffbd\004\uffbd\005\uffbd\013\uffbd\016" +
    "\uffbd\023\uffbd\024\uffbd\026\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\040\uffbd\045\uffbd\047\uffbd\051\uffbd\052" +
    "\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd\063\uffbd\001\002" +
    "\000\060\003\uffba\004\uffba\005\uffba\013\uffba\016\uffba\023" +
    "\uffba\024\uffba\026\uffba\031\uffba\033\uffba\034\uffba\035\uffba" +
    "\036\uffba\040\uffba\045\uffba\047\uffba\051\uffba\052\uffba\055" +
    "\uffba\057\uffba\060\uffba\061\uffba\063\uffba\001\002\000\060" +
    "\003\uffbe\004\uffbe\005\uffbe\013\uffbe\016\uffbe\023\uffbe\024" +
    "\uffbe\026\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\040\uffbe\045\uffbe\047\uffbe\051\uffbe\052\uffbe\055\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\063\uffbe\001\002\000\060\003\uffbc" +
    "\004\uffbc\005\uffbc\013\uffbc\016\uffbc\023\uffbc\024\uffbc\026" +
    "\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\040\uffbc" +
    "\045\uffbc\047\uffbc\051\uffbc\052\uffbc\055\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\063\uffbc\001\002\000\060\003\035\004\036" +
    "\005\uffa9\013\032\016\uffdd\023\034\024\025\026\010\031" +
    "\ufffe\033\uffdd\034\uffdd\035\uffdd\036\040\040\053\045\043" +
    "\047\050\051\021\052\013\055\020\057\022\060\027\061" +
    "\030\063\016\001\002\000\012\016\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\001\002\000\012\016\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\001\002\000\006\054\363\063\054\001\002\000\004" +
    "\063\054\001\002\000\004\053\365\001\002\000\060\003" +
    "\uff82\004\uff82\005\uff82\013\uff82\016\uff82\023\uff82\024\uff82" +
    "\026\uff82\031\uff82\033\uff82\034\uff82\035\uff82\036\uff82\040" +
    "\uff82\045\uff82\047\uff82\051\uff82\052\uff82\055\uff82\057\uff82" +
    "\060\uff82\061\uff82\063\uff82\001\002\000\004\030\367\001" +
    "\002\000\006\063\075\064\076\001\002\000\004\053\371" +
    "\001\002\000\060\003\uff83\004\uff83\005\uff83\013\uff83\016" +
    "\uff83\023\uff83\024\uff83\026\uff83\031\uff83\033\uff83\034\uff83" +
    "\035\uff83\036\uff83\040\uff83\045\uff83\047\uff83\051\uff83\052" +
    "\uff83\055\uff83\057\uff83\060\uff83\061\uff83\063\uff83\001\002" +
    "\000\060\003\035\004\036\005\uffa9\013\032\016\uffdd\023" +
    "\034\024\025\026\010\031\ufffe\033\uffdd\034\uffdd\035\uffdd" +
    "\036\040\040\053\045\043\047\050\051\021\052\013\055" +
    "\020\057\022\060\027\061\030\063\016\001\002\000\012" +
    "\016\uffe0\033\uffe0\034\uffe0\035\uffe0\001\002\000\006\021" +
    "\uffab\027\u010b\001\002\000\004\027\376\001\002\000\012" +
    "\067\377\070\u0100\071\u0102\072\u0101\001\002\000\004\030" +
    "\uffc8\001\002\000\004\030\uffc7\001\002\000\004\030\uffc5" +
    "\001\002\000\004\030\uffc6\001\002\000\004\030\u0104\001" +
    "\002\000\024\004\u0105\013\032\063\u0107\064\115\073\123" +
    "\074\122\100\121\104\120\107\125\001\002\000\020\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\025\uff95" +
    "\001\002\000\004\025\u010a\001\002\000\020\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\025\uff96\001\002" +
    "\000\004\025\u0109\001\002\000\060\003\uffc2\004\uffc2\005" +
    "\uffc2\013\uffc2\016\uffc2\023\uffc2\024\uffc2\026\uffc2\031\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\040\uffc2\045\uffc2\047" +
    "\uffc2\051\uffc2\052\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\063\uffc2\001\002\000\060\003\uffc1\004\uffc1\005\uffc1\013" +
    "\uffc1\016\uffc1\023\uffc1\024\uffc1\026\uffc1\031\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\040\uffc1\045\uffc1\047\uffc1\051" +
    "\uffc1\052\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1\063\uffc1" +
    "\001\002\000\012\067\377\070\u0100\071\u0102\072\u0101\001" +
    "\002\000\004\030\u010d\001\002\000\024\004\u0105\013\032" +
    "\063\u0107\064\115\073\123\074\122\100\121\104\120\107" +
    "\125\001\002\000\004\025\u0111\001\002\000\004\025\u0110" +
    "\001\002\000\060\003\uffc4\004\uffc4\005\uffc4\013\uffc4\016" +
    "\uffc4\023\uffc4\024\uffc4\026\uffc4\031\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\040\uffc4\045\uffc4\047\uffc4\051\uffc4\052" +
    "\uffc4\055\uffc4\057\uffc4\060\uffc4\061\uffc4\063\uffc4\001\002" +
    "\000\060\003\uffc3\004\uffc3\005\uffc3\013\uffc3\016\uffc3\023" +
    "\uffc3\024\uffc3\026\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\040\uffc3\045\uffc3\047\uffc3\051\uffc3\052\uffc3\055" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\063\uffc3\001\002\000\022" +
    "\004\114\063\116\064\115\073\123\074\122\100\121\104" +
    "\120\107\125\001\002\000\060\003\ufffd\004\ufffd\005\ufffd" +
    "\013\ufffd\016\ufffd\023\ufffd\024\ufffd\026\ufffd\031\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd\045\ufffd\047\ufffd" +
    "\051\ufffd\052\ufffd\055\ufffd\057\ufffd\060\ufffd\061\ufffd\063" +
    "\ufffd\001\002\000\060\003\035\004\036\005\uffa9\013\032" +
    "\016\uffdd\023\034\024\025\026\010\031\ufffe\033\uffdd\034" +
    "\uffdd\035\uffdd\036\040\040\053\045\043\047\050\051\021" +
    "\052\013\055\020\057\022\060\027\061\030\063\016\001" +
    "\002\000\012\016\ufffc\033\ufffc\034\ufffc\035\ufffc\001\002" +
    "\000\004\032\u0117\001\002\000\056\003\035\004\036\005" +
    "\uffa9\013\032\023\034\024\025\026\010\031\ufffe\033\uffdd" +
    "\034\uffdd\035\uffdd\036\040\040\053\045\043\047\050\051" +
    "\021\052\013\055\020\057\022\060\027\061\030\063\016" +
    "\001\002\000\010\033\u011d\034\u011c\035\u011b\001\002\000" +
    "\004\033\u0126\001\002\000\006\033\u0124\035\u011b\001\002" +
    "\000\052\003\035\004\036\005\uffa9\013\032\023\034\024" +
    "\025\026\010\031\ufffe\033\uffdd\036\040\040\053\045\043" +
    "\047\050\051\021\052\013\055\020\057\022\060\027\061" +
    "\030\063\016\001\002\000\022\004\114\063\116\064\115" +
    "\073\123\074\122\100\121\104\120\107\125\001\002\000" +
    "\060\003\uffa5\004\uffa5\005\uffa5\013\uffa5\016\uffa5\023\uffa5" +
    "\024\uffa5\026\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\040\uffa5\045\uffa5\047\uffa5\051\uffa5\052\uffa5\055\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\063\uffa5\001\002\000\004\032" +
    "\u011f\001\002\000\056\003\035\004\036\005\uffa9\013\032" +
    "\023\034\024\025\026\010\031\ufffe\033\uffdd\034\uffdd\035" +
    "\uffdd\036\040\040\053\045\043\047\050\051\021\052\013" +
    "\055\020\057\022\060\027\061\030\063\016\001\002\000" +
    "\010\033\uff9f\034\u011c\035\uff9f\001\002\000\006\033\uffa0" +
    "\035\uffa0\001\002\000\004\033\uffa1\001\002\000\004\033" +
    "\u0125\001\002\000\060\003\uffa4\004\uffa4\005\uffa4\013\uffa4" +
    "\016\uffa4\023\uffa4\024\uffa4\026\uffa4\031\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\040\uffa4\045\uffa4\047\uffa4\051\uffa4" +
    "\052\uffa4\055\uffa4\057\uffa4\060\uffa4\061\uffa4\063\uffa4\001" +
    "\002\000\060\003\uffa2\004\uffa2\005\uffa2\013\uffa2\016\uffa2" +
    "\023\uffa2\024\uffa2\026\uffa2\031\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\040\uffa2\045\uffa2\047\uffa2\051\uffa2\052\uffa2" +
    "\055\uffa2\057\uffa2\060\uffa2\061\uffa2\063\uffa2\001\002\000" +
    "\060\003\uffa3\004\uffa3\005\uffa3\013\uffa3\016\uffa3\023\uffa3" +
    "\024\uffa3\026\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\040\uffa3\045\uffa3\047\uffa3\051\uffa3\052\uffa3\055\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\063\uffa3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\004\002\004\001\001\000\052\011\032\014" +
    "\041\015\036\016\023\017\022\020\040\024\051\027\046" +
    "\030\045\031\025\032\044\033\030\034\016\036\014\037" +
    "\050\040\013\041\043\043\010\047\011\051\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0112\001" +
    "\001\000\004\011\374\001\001\000\004\067\371\001\001" +
    "\000\004\046\234\001\001\000\004\013\361\001\001\000" +
    "\052\011\032\014\041\015\036\016\023\017\360\020\040" +
    "\024\051\027\046\030\045\031\025\032\044\033\030\034" +
    "\016\036\014\037\050\040\013\041\043\043\010\047\011" +
    "\051\006\001\001\000\004\065\356\001\001\000\006\026" +
    "\331\071\332\001\001\000\004\064\327\001\001\000\004" +
    "\013\317\001\001\000\004\010\316\001\001\000\004\013" +
    "\302\001\001\000\002\001\001\000\004\054\277\001\001" +
    "\000\002\001\001\000\004\061\275\001\001\000\004\050" +
    "\270\001\001\000\004\050\261\001\001\000\004\063\257" +
    "\001\001\000\014\043\221\044\222\045\225\046\227\047" +
    "\011\001\001\000\004\026\177\001\001\000\002\001\001" +
    "\000\004\070\175\001\001\000\002\001\001\000\004\053" +
    "\173\001\001\000\004\025\161\001\001\000\004\055\156" +
    "\001\001\000\052\011\032\014\041\015\036\016\023\017" +
    "\155\020\040\024\051\027\046\030\045\031\025\032\044" +
    "\033\030\034\016\036\014\037\050\040\013\041\043\043" +
    "\010\047\011\051\006\001\001\000\006\003\151\050\116" +
    "\001\001\000\052\011\032\014\041\015\036\016\023\017" +
    "\150\020\040\024\051\027\046\030\045\031\025\032\044" +
    "\033\030\034\016\036\014\037\050\040\013\041\043\043" +
    "\010\047\011\051\006\001\001\000\004\062\146\001\001" +
    "\000\004\060\144\001\001\000\004\057\142\001\001\000" +
    "\010\005\111\006\070\013\072\001\001\000\004\066\107" +
    "\001\001\000\004\056\105\001\001\000\004\013\054\001" +
    "\001\000\002\001\001\000\004\026\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\103" +
    "\006\070\013\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\071\006\070\013\072" +
    "\001\001\000\002\001\001\000\006\006\077\013\072\001" +
    "\001\000\002\001\001\000\004\010\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\077\013\072\001\001\000\002\001\001\000" +
    "\052\011\032\014\041\015\036\016\023\017\106\020\040" +
    "\024\051\027\046\030\045\031\025\032\044\033\030\034" +
    "\016\036\014\037\050\040\013\041\043\043\010\047\011" +
    "\051\006\001\001\000\002\001\001\000\052\011\032\014" +
    "\041\015\036\016\023\017\110\020\040\024\051\027\046" +
    "\030\045\031\025\032\044\033\030\034\016\036\014\037" +
    "\050\040\013\041\043\043\010\047\011\051\006\001\001" +
    "\000\002\001\001\000\006\006\077\013\072\001\001\000" +
    "\006\003\123\050\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\141\001" +
    "\001\000\004\050\140\001\001\000\004\050\137\001\001" +
    "\000\004\050\136\001\001\000\004\050\135\001\001\000" +
    "\004\050\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\011\032\014\041" +
    "\015\036\016\023\017\143\020\040\024\051\027\046\030" +
    "\045\031\025\032\044\033\030\034\016\036\014\037\050" +
    "\040\013\041\043\043\010\047\011\051\006\001\001\000" +
    "\002\001\001\000\052\011\032\014\041\015\036\016\023" +
    "\017\145\020\040\024\051\027\046\030\045\031\025\032" +
    "\044\033\030\034\016\036\014\037\050\040\013\041\043" +
    "\043\010\047\011\051\006\001\001\000\002\001\001\000" +
    "\052\011\032\014\041\015\036\016\023\017\147\020\040" +
    "\024\051\027\046\030\045\031\025\032\044\033\030\034" +
    "\016\036\014\037\050\040\013\041\043\043\010\047\011" +
    "\051\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\153\006\070\013\072\001\001" +
    "\000\006\006\077\013\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\011\032\014\041\015\036\016\023" +
    "\017\157\020\040\024\051\027\046\030\045\031\025\032" +
    "\044\033\030\034\016\036\014\037\050\040\013\041\043" +
    "\043\010\047\011\051\006\001\001\000\002\001\001\000" +
    "\004\010\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\166\006" +
    "\167\013\072\001\001\000\004\025\172\001\001\000\002" +
    "\001\001\000\010\004\171\006\167\013\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\011\032\014\041" +
    "\015\036\016\023\017\174\020\040\024\051\027\046\030" +
    "\045\031\025\032\044\033\030\034\016\036\014\037\050" +
    "\040\013\041\043\043\010\047\011\051\006\001\001\000" +
    "\002\001\001\000\052\011\032\014\041\015\036\016\023" +
    "\017\176\020\040\024\051\027\046\030\045\031\025\032" +
    "\044\033\030\034\016\036\014\037\050\040\013\041\043" +
    "\043\010\047\011\051\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\043\221\044\256\045" +
    "\225\046\227\047\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\043\221\044\246\045" +
    "\225\046\227\047\011\001\001\000\002\001\001\000\006" +
    "\043\231\047\230\001\001\000\004\046\234\001\001\000" +
    "\006\045\232\046\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\235\001\001\000\004\046\241\001" +
    "\001\000\014\043\221\044\237\045\225\046\227\047\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\242\047\011\001\001\000\002\001\001\000\004\047\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\250\001\001\000\004\047\251\001\001" +
    "\000\002\001\001\000\014\043\221\044\253\045\225\046" +
    "\227\047\011\001\001\000\002\001\001\000\006\045\255" +
    "\046\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\011\032\014\041\015\036\016\023\017\260\020\040" +
    "\024\051\027\046\030\045\031\025\032\044\033\030\034" +
    "\016\036\014\037\050\040\013\041\043\043\010\047\011" +
    "\051\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\011\032\014" +
    "\041\015\036\016\023\017\276\020\040\024\051\027\046" +
    "\030\045\031\025\032\044\033\030\034\016\036\014\037" +
    "\050\040\013\041\043\043\010\047\011\051\006\001\001" +
    "\000\002\001\001\000\052\011\032\014\041\015\036\016" +
    "\023\017\300\020\040\024\051\027\046\030\045\031\025" +
    "\032\044\033\030\034\016\036\014\037\050\040\013\041" +
    "\043\043\010\047\011\051\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\306\035" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\306\035\310\001\001\000\002\001" +
    "\001\000\006\013\306\035\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\322\006\167" +
    "\013\072\001\001\000\006\013\306\035\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\325\006\167" +
    "\013\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\011\032\014\041\015\036\016\023\017\330\020\040" +
    "\024\051\027\046\030\045\031\025\032\044\033\030\034" +
    "\016\036\014\037\050\040\013\041\043\043\010\047\011" +
    "\051\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\336\001\001\000\004\012\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\011\032\014\041" +
    "\015\036\016\023\017\357\020\040\024\051\027\046\030" +
    "\045\031\025\032\044\033\030\034\016\036\014\037\050" +
    "\040\013\041\043\043\010\047\011\051\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\363\006\167" +
    "\013\072\001\001\000\006\013\306\035\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\011\032\014\041\015\036\016\023\017\372\020\040" +
    "\024\051\027\046\030\045\031\025\032\044\033\030\034" +
    "\016\036\014\037\050\040\013\041\043\043\010\047\011" +
    "\051\006\001\001\000\002\001\001\000\004\071\332\001" +
    "\001\000\002\001\001\000\004\042\u0102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\043\u0105\047\011\050\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u010b\001\001\000\002\001\001\000\010\043" +
    "\u010d\047\011\050\u010e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\u0115\050\116\001\001\000\004\052\u0113\001\001\000\052" +
    "\011\032\014\041\015\036\016\023\017\u0114\020\040\024" +
    "\051\027\046\030\045\031\025\032\044\033\030\034\016" +
    "\036\014\037\050\040\013\041\043\043\010\047\011\051" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\011\032\014\041\015\036\016\023\017\u0117\020\040\024" +
    "\051\027\046\030\045\031\025\032\044\033\030\034\016" +
    "\036\014\037\050\040\013\041\043\043\010\047\011\051" +
    "\006\001\001\000\006\021\u0118\023\u0119\001\001\000\002" +
    "\001\001\000\004\021\u0122\001\001\000\052\011\032\014" +
    "\041\015\036\016\023\017\u0121\020\040\024\051\027\046" +
    "\030\045\031\025\032\044\033\030\034\016\036\014\037" +
    "\050\040\013\041\043\043\010\047\011\051\006\001\001" +
    "\000\006\003\u011d\050\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\011\032\014\041\015\036\016\023" +
    "\017\u011f\020\040\024\051\027\046\030\045\031\025\032" +
    "\044\033\030\034\016\036\014\037\050\040\013\041\043" +
    "\043\010\047\011\051\006\001\001\000\004\023\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean cambiar = true;
    int countTab = 1;
    int tmpCountTab = 0;
    int cont = 0;
    public String python = "";
    public String golang = "";
    public int erroresSintacticos = 0;
    String condicion = "";
    String instruccion = "";
    String tmpInstruccion = "";
    String valor = "";
    String tmpPython = "";
    String tmpImprimir = "";
    String tmpImprimirnl = "";
    ArrayList<String> variables = new ArrayList<String>();
    ArrayList<String> condiciones = new ArrayList<String>();
    ArrayList<String> tmpListaNombres = new ArrayList<String>();
    ArrayList<String> tmpOperacion = new ArrayList<String>();
    ArrayList<String> tmpOperadorLista = new ArrayList<String>();
    ArrayList<String> pythonArray = new ArrayList<String>();
    ArrayList<String> tmpPythonArray = new ArrayList<String>();
    ArrayList<String> tmpPython2 = new ArrayList<String>();
    public void syntax_error(Symbol s){ 
        erroresSintacticos++;
        //Imprimir error
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    //Repet tab
        public String tab(int n){
                String tab = "";
                for(int i = 0; i < n; i++){
                tab += "\t";
                }
                return tab;
        }
    //ASCII to char
        public String asciiToChar(String ascii){
                ascii = ascii.replace("{", "");
                ascii = ascii.replace("}", "");
                ascii = ascii.replace("$", "");
                ascii = ascii.replace("'", "");
                System.out.println(ascii);
                String[] asciiArray = ascii.split(",");
                String charValue = "";
                for(int i = 0; i < asciiArray.length; i++){
                charValue += (char)Integer.parseInt(asciiArray[i]);
                }
                return "'" + charValue + "'";
        }
    public void agregarTmpListaNombres(String a){


        for(String i: tmpListaNombres){
                python += i + " = " + a + ";\n";
                pythonArray.add(i + " = " + a + ";\n");
        }; 
        
        
        tmpListaNombres = new ArrayList<String>();
    }

    public void agregarTmpOperacionLista(String a){
        tmpOperacion.add( "(" + a + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

    }

    public void agregarTmpOperacionLista2(){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 2) + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        tmpOperacion.remove(tmpOperacion.size() - 2);
    }

    public void agregarTmpOperacionLista3(String a){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")" +
         tmpOperadorLista.get(tmpOperadorLista.size() - 1) + "(" + a + ")" 
        ); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

    }

    public void agregarTmpOperacion(String a, String b){
        tmpOperacion.add(a + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + b); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
    }
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio E prFin 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= DECLARACION E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
tmpPythonArray = new ArrayList<String>(); tmpCountTab += 1; condiciones.add("if");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
System.out.println("Se realizo un if");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= NT$0 IF NT$1 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= COMENTARIO NT$2 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentarioVariasLineas");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= COMENTARIO_VARIAS_LINEAS NT$3 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un asignacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= ASIGNACION NT$4 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un seleccionMultiple");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= SELECCION_MULTIPLE NT$5 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un para");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= PARA NT$6 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un paraSalto");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= PARA_SALTO NT$7 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un mientras");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= MIENTRAS NT$8 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un repetir");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= REPETIR NT$9 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un retorno");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= RETORNO NT$10 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un metodo");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= METODO NT$11 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$12 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un funcion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= FUNCION NT$12 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$13 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un ejecutar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= EJECUTAR NT$13 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= IMPRIMIR E 
            {
              String RESULT =null;
		tmpPythonArray.add(tmpImprimir);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= IMPRIMIR_NL E 
            {
              String RESULT =null;
		tmpPythonArray.add(tmpImprimirnl);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$14 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo una operacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",53, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= OPERACION NT$14 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$15 ::= 
            {
              String RESULT =null;
tmpPython = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",54, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= error NT$15 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACIONES ::= OPERACIONES2 OPERACIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACIONES ::= OPERACIONES2 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACIONES ::= OPERACION OPERACIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACIONES ::= OPERACION 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERANDOS ::= tnum 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERANDOS ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= OPERANDOS OPERADORES OPERANDOS 
            {
              String RESULT =null;
		agregarTmpOperacion(variables.get(variables.size() - 2),variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= OPERANDOS OPERADORES OPERANDOS OPERADORES OPERACION 
            {
              String RESULT =null;
		agregarTmpOperacion(variables.get(variables.size() - 2),variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= OPERANDOS tpot cor1 OPERANDOS cor2 
            {
              String RESULT =null;
		tmpOperacion.add(variables.get(variables.size() - 2) + "**" +variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= OPERANDOS OPERADORES pare1 OPERACIONES pare2 
            {
              String RESULT =null;
		agregarTmpOperacionLista(variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION ::= pare1 OPERACIONES pare2 OPERADORES OPERANDOS 
            {
              String RESULT =null;
		agregarTmpOperacionLista3(variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION ::= pare1 OPERACIONES pare2 OPERADORES pare1 OPERACIONES pare2 
            {
              String RESULT =null;
		agregarTmpOperacionLista2();
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION ::= pare1 OPERACIONES pare2 OPERADORES pare1 OPERACIONES pare2 OPERACIONES2 
            {
              String RESULT =null;
		agregarTmpOperacionLista2();
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACIONES2 ::= OPERADORES OPERACION OPERACIONES2 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES2",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACIONES2 ::= OPERADORES OPERANDOS 
            {
              String RESULT =null;
		
                        agregarTmpOperacionLista3(variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES2",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADORES ::= tsum 
            {
              String RESULT =null;
		 tmpOperadorLista.add("+");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADORES ::= trest 
            {
              String RESULT =null;
		 tmpOperadorLista.add("-");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADORES ::= tdiv 
            {
              String RESULT =null;
		 tmpOperadorLista.add("/");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADORES ::= tmul 
            {
              String RESULT =null;
		tmpOperadorLista.add("*");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADORES ::= tmod 
            {
              String RESULT =null;
		tmpOperadorLista.add("%");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= prBoolean 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= prCaracter 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= prNumero 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= prCadena 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		
                python += a + " = " + variables.get(variables.size() - 1) + "\n"; 
                pythonArray.add(a + " = " + variables.get(variables.size() - 1) + "\n");
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor OPERACION tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		
                        
                        python += a + " = " + tmpOperacion.get(tmpOperacion.size() - 1) + "\n";
                        
                        tmpOperacion = new ArrayList<String>();
                        tmpListaNombres = new ArrayList<String>();
                        cambiar = true; 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		agregarTmpListaNombres(variables.get(variables.size() - 1));variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor OPERACION tpuntoycoma 
            {
              String RESULT =null;
		agregarTmpListaNombres(tmpOperacion.get(tmpOperacion.size() - 1));
                        tmpOperacion = new ArrayList<String>();
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMENTARIO ::= tcomentario 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python +=c.replace("//","#")+"\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMENTARIO_VARIAS_LINEAS ::= tcomentariovariaslineas 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python += c.replace("/*","'''").replace("*/","'''") + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO_VARIAS_LINEAS",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION ::= tvariable FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= tvariable FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION ::= tvariable FLECHA tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION ::= tvariable FLECHA prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION ::= tvariable FLECHA prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = True;\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION ::= tvariable FLECHA prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = False;\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= tvariable FLECHA caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION ::= LISTA_NOMBRES FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= LISTA_NOMBRES FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACION ::= LISTA_NOMBRES FLECHA tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION ::= LISTA_NOMBRES FLECHA prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIGNACION ::= LISTA_NOMBRES FLECHA prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = True;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ASIGNACION ::= LISTA_NOMBRES FLECHA prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = False;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIGNACION ::= LISTA_NOMBRES FLECHA caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SELECCION_MULTIPLE ::= prSegun SEGUN prFinSegun 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES SEGUN 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALOR ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALOR ::= tcadena 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$16 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",55, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTA_NOMBRES ::= tvariable NT$16 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_NOMBRES ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$17 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",56, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTA_NOMBRES2 ::= tcoma tvariable NT$17 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LISTA_NOMBRES2 ::= tcoma tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF ::= prSi CONDICION prEntonces E prFinSi 
            {
              String RESULT =null;
		
                if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        condiciones.remove(condiciones.size() - 1);
                }
                tmpPython += "if " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                        }
                }
                tmpPythonArray = new ArrayList<String>();
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF ::= prSi CONDICION prEntonces E O_SI prFinSi 
            {
              String RESULT =null;
		
                python += "if " + condiciones.get(condiciones.size() - 1)+ ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                        }
                }
                tmpPythonArray = new ArrayList<String>();
                python += tmpPython + tmpPython2.get(tmpPython2.size() - 1) + "\n";
                tmpPython = "";
                tmpPython2.remove(tmpPython2.size() - 1);
                tmpPython2 = new ArrayList<String>();
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IF ::= prSi CONDICION prEntonces E DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;
		
                if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        condiciones.remove(condiciones.size() - 1);
                }
                python += "if " + condiciones.get(condiciones.size() - 1)+ ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                        }
                }
                tmpPythonArray = new ArrayList<String>();
                python += tmpPython + tmpPython2.get(tmpPython2.size() - 1) + "\n";
                tmpPython = "";
                tmpPython2.remove(tmpPython2.size() - 1);
                tmpPython2 = new ArrayList<String>();
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IF ::= prSi CONDICION prEntonces E O_SI DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;
		
                if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        condiciones.remove(condiciones.size() - 1);
                }
                python += "if " + condiciones.get(condiciones.size() - 1)+ ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPython2 from the last element to the first
                for(int i = tmpPython2.size() - 1; i >= 0; i--){
                        if(tmpPython2.get(i) != ""){
                                tmpPython += "\t" + tmpPython2.get(i) + "\n";
                        }
                }
                //Iterate tmpPythonArray from the last element to the first
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                tmpPython += "\t" + tmpPythonArray.get(i) + "\n";
                        }
                }
                tmpPythonArray = new ArrayList<String>();
                
                tmpPython2 = new ArrayList<String>();
                python += tmpPython;
                tmpPython = "";
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DE_LO_CONTRARIO ::= prDeLoContrario E 
            {
              String RESULT =null;
		
                String tmpstr = "else:\n";
                //Iterate tmpPythonArray from the last element to the first and end when found elif
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                tmpstr += "\t" + tmpPythonArray.get(i) + "\n";
                                tmpPythonArray.remove(i);
                                i--;
                        }
                        if(tmpPythonArray.get(i).equals("elif")){
                                tmpPythonArray.remove(i);
                                break;
                        }
                }
                tmpPython2.add(tmpstr);
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // O_SI ::= prO_Si CONDICION prEntonces E O_SI 
            {
              String RESULT =null;
		
                String tmpstr = "elif " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first and end when found elif
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                tmpstr += "\t" + tmpPythonArray.get(i) + "\n";
                                tmpPythonArray.remove(i);
                                i--;
                        }
                        if(tmpPythonArray.get(i).equals("elif")){
                                tmpPythonArray.remove(i);
                                break;
                        }
                }
                tmpPython2.add(tmpstr);
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // O_SI ::= prO_Si CONDICION prEntonces E 
            {
              String RESULT =null;
		
                String tmpstr = "elif " + condiciones.get(condiciones.size() - 1) + ":\n";
                condiciones.remove(condiciones.size() - 1);
                //Iterate tmpPythonArray from the last element to the first and end when found elif
                for(int i = tmpPythonArray.size() - 1; i >= 0; i--){
                        if(tmpPythonArray.get(i) != ""){
                                tmpstr += "\t" + tmpPythonArray.get(i) + "\n";
                                tmpPythonArray.remove(i);
                                i--;
                        }
                        if(tmpPythonArray.get(i).equals("elif")){
                                tmpPythonArray.remove(i);
                                break;
                        }
                }
                tmpPython2.add(tmpstr);
                countTab -= tmpCountTab;
                tmpCountTab = 0;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= VARIABLES prEsIgual VARIABLES 
            {
              String RESULT =null;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= VARIABLES prMayor VARIABLES 
            {
              String RESULT =null;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICION ::= VARIABLES prMayorOIgual VARIABLES 
            {
              String RESULT =null;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICION ::= VARIABLES prMenor VARIABLES 
            {
              String RESULT =null;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICION ::= VARIABLES prMenorOIgual VARIABLES 
            {
              String RESULT =null;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICION ::= VARIABLES prEsDiferente VARIABLES 
            {
              String RESULT =null;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDICION ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                if(condiciones.get(condiciones.size() - 1).equals("if")){
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                        condiciones.add("if2");
                }else if(condiciones.get(condiciones.size() - 1).equals("if2")){
                        tmpPythonArray.add("elif");
                        condiciones.remove(condiciones.size() - 1);
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }else{
                        condiciones.add(variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1)); 
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VARIABLE ::= tvariable 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VARIABLES ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VARIABLES ::= tnum 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VARIABLES ::= tcadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VARIABLES ::= prFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VARIABLES ::= prVerdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add("True");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VARIABLES ::= prFalso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add("False");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VARIABLES ::= caracter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VARIABLES ::= ascii 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(asciiToChar(a));
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INSTRUCCIONES_CICLO ::= INSTRUCCIONES_CICLO INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INSTRUCCIONES_CICLO ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INSTRUCCION ::= VARIABLE tigual VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARA ::= prPara VARIABLE FLECHA tnum prHasta tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FLECHA ::= trest tmayor 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FLECHA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARA_SALTO ::= prPara VARIABLE FLECHA tnum prHasta tnum prCon prIncremental tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA_SALTO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MIENTRAS ::= prMientras CONDICION prHacer INSTRUCCIONES_CICLO prFinMientras 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // REPETIR ::= prRepetir INSTRUCCIONES_CICLO prHasta CONDICION 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // RETORNO ::= prRetornar VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // METODO ::= prMetodo VARIABLE prConParametros LISTA_PARAMETROS prConValor VALOR prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // METODO ::= prMetodo VARIABLE INSTRUCCIONES prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LISTA_PARAMETROS ::= VARIABLE tcadena LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LISTA_PARAMETROS ::= VARIABLE tcadena tcoma LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUNCION ::= prFuncion VARIABLE tcadena prConParametros LISTA_PARAMETROS INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUNCION ::= prFuncion VARIABLE tcadena INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EJECUTAR ::= prEjecutar VARIABLE pare1 pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EJECUTAR ::= prEjecutar VARIABLE pare1 LISTA_PARAMETROS pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IMPRIMIR ::= prImprimir VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimir = "print(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IMPRIMIR ::= prImprimir pare1 VARIABLES pare2 tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimir = "print(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IMPRIMIR_NL ::= prImprimirNl VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimirnl = "println(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IMPRIMIR_NL ::= prImprimirNl pare1 VARIABLES pare2 tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimirnl = "println(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
