
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import proyecto1.Errors;
import proyecto1.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\005\000\002\004" +
    "\004\000\002\004\003\000\002\017\003\000\002\047\002" +
    "\000\002\017\004\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\050\002\000\002\017\004\000\002" +
    "\051\002\000\002\017\004\000\002\052\002\000\002\017" +
    "\004\000\002\053\002\000\002\017\004\000\002\017\003" +
    "\000\002\054\002\000\002\017\004\000\002\055\002\000" +
    "\002\017\004\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\022\004\000\002\022" +
    "\003\000\002\045\003\000\002\044\003\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\003\000\002\044\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\014\011\000\002\014\011\000\002\014\011\000" +
    "\002\014\011\000\002\014\011\000\002\014\011\000\002" +
    "\015\003\000\002\016\003\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\024\007" +
    "\000\002\026\004\000\002\026\003\000\002\025\007\000" +
    "\002\056\002\000\002\011\005\000\002\057\002\000\002" +
    "\012\006\000\002\012\004\000\002\007\007\000\002\007" +
    "\010\000\002\007\010\000\002\007\011\000\002\021\004" +
    "\000\002\023\007\000\002\023\006\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\006\000\002\003\005\000\002\013\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\030\013\000\002\030\012" +
    "\000\002\030\003\000\002\027\004\000\002\031\016\000" +
    "\002\032\007\000\002\033\006\000\002\033\005\000\002" +
    "\034\005\000\002\034\005\000\002\035\012\000\002\035" +
    "\006\000\002\036\005\000\002\036\005\000\002\037\013" +
    "\000\002\037\007\000\002\040\007\000\002\040\010\000" +
    "\002\041\005\000\002\041\007\000\002\041\005\000\002" +
    "\041\007\000\002\041\005\000\002\041\007\000\002\042" +
    "\005\000\002\042\007\000\002\042\005\000\002\042\007" +
    "\000\002\042\005\000\002\042\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\004\015\004\001\002\000\042\003\033\023" +
    "\025\024\037\026\034\031\ufffc\036\ufff7\040\ufff5\045\ufff3" +
    "\047\ufff1\051\014\052\uffee\055\uffec\057\040\060\041\061" +
    "\026\063\031\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\055\u010a\001\002\000\004\052" +
    "\377\001\002\000\066\003\ufff9\016\ufff9\017\ufff9\023\ufff9" +
    "\024\ufff9\026\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\040\ufff9\042\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061" +
    "\ufff9\063\ufff9\065\ufff9\001\002\000\004\047\367\001\002" +
    "\000\066\003\ufffd\016\ufffd\017\ufffd\023\ufffd\024\ufffd\026" +
    "\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd" +
    "\042\ufffd\045\ufffd\046\ufffd\047\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\063\ufffd" +
    "\065\ufffd\001\002\000\030\004\042\013\125\063\046\064" +
    "\043\073\057\074\055\100\053\104\052\105\051\107\061" +
    "\110\054\001\002\000\004\045\355\001\002\000\004\040" +
    "\335\001\002\000\004\016\332\001\002\000\004\036\315" +
    "\001\002\000\066\003\uffea\016\uffea\017\uffea\023\uffea\024" +
    "\uffea\026\uffea\031\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\040\uffea\042\uffea\045\uffea\046\uffea\047\uffea\051\uffea\052" +
    "\uffea\053\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea" +
    "\063\uffea\065\uffea\001\002\000\066\003\uffe9\016\uffe9\017" +
    "\uffe9\023\uffe9\024\uffe9\026\uffe9\031\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\040\uffe9\042\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\063\uffe9\065\uffe9\001\002\000\004\031" +
    "\272\001\002\000\066\003\uffef\016\uffef\017\uffef\023\uffef" +
    "\024\uffef\026\uffef\031\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\040\uffef\042\uffef\045\uffef\046\uffef\047\uffef\051\uffef" +
    "\052\uffef\053\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061" +
    "\uffef\063\uffef\065\uffef\001\002\000\066\003\uffce\016\uffce" +
    "\017\uffce\023\uffce\024\uffce\026\uffce\031\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\040\uffce\042\uffce\045\uffce\046\uffce" +
    "\047\uffce\051\uffce\052\uffce\053\uffce\055\uffce\056\uffce\057" +
    "\uffce\060\uffce\061\uffce\063\uffce\065\uffce\001\002\000\030" +
    "\004\042\013\253\063\046\064\043\073\057\074\055\100" +
    "\053\104\052\105\051\107\061\110\054\001\002\000\066" +
    "\003\ufff8\016\ufff8\017\ufff8\023\ufff8\024\ufff8\026\ufff8\031" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\040\ufff8\042\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\051\ufff8\052\ufff8\053\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\063\ufff8\065\ufff8" +
    "\001\002\000\066\003\033\016\ufffe\017\ufffe\023\025\024" +
    "\037\026\034\031\ufffc\033\ufffe\034\ufffe\035\ufffe\036\ufff7" +
    "\040\ufff5\042\ufffe\045\ufff3\046\ufffe\047\ufff1\051\014\052" +
    "\uffee\053\ufffe\055\uffec\056\ufffe\057\040\060\041\061\026" +
    "\063\031\065\ufffe\001\002\000\006\005\204\021\uffc4\001" +
    "\002\000\066\003\uffe8\016\uffe8\017\uffe8\023\uffe8\024\uffe8" +
    "\026\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040" +
    "\uffe8\042\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\063" +
    "\uffe8\065\uffe8\001\002\000\066\003\uffe7\016\uffe7\017\uffe7" +
    "\023\uffe7\024\uffe7\026\uffe7\031\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\040\uffe7\042\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\063\uffe7\065\uffe7\001\002\000\004\063\212" +
    "\001\002\000\066\003\ufffa\016\ufffa\017\ufffa\023\ufffa\024" +
    "\ufffa\026\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\040\ufffa\042\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\063\ufffa\065\ufffa\001\002\000\004\005\204\001\002\000" +
    "\066\003\uffcd\016\uffcd\017\uffcd\023\uffcd\024\uffcd\026\uffcd" +
    "\031\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\042" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\063\uffcd\065" +
    "\uffcd\001\002\000\004\063\163\001\002\000\030\004\042" +
    "\013\050\063\046\064\043\073\057\074\055\100\053\104" +
    "\052\105\051\107\061\110\054\001\002\000\146\003\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\063\uffe3" +
    "\065\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102" +
    "\uffe3\103\uffe3\105\uffe3\106\uffe3\001\002\000\112\003\uffa7" +
    "\014\uffa7\016\uffa7\017\uffa7\023\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\040\uffa7\042\uffa7\045\uffa7\046\uffa7\047\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\063\uffa7\065\uffa7\075\uffa7\076\uffa7\077\uffa7\101" +
    "\uffa7\102\uffa7\103\uffa7\001\002\000\144\003\uffe4\004\uffe4" +
    "\005\102\006\104\007\101\010\077\011\100\012\103\013" +
    "\uffe4\014\uffe4\016\uffe4\017\uffe4\020\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\063\uffe4\065\uffe4" +
    "\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103" +
    "\uffe4\105\uffe4\001\002\000\130\003\uffe5\004\uffe5\013\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\020\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\063\uffe5\065\uffe5\075" +
    "\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5" +
    "\105\uffe5\001\002\000\146\003\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\016\uffda\017\uffda\020\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\045\uffda\046" +
    "\uffda\047\uffda\051\uffda\052\uffda\053\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\063\uffda\065\uffda\075\uffda\076" +
    "\uffda\077\uffda\100\uffda\101\uffda\102\uffda\103\uffda\105\uffda" +
    "\106\uffda\001\002\000\020\025\162\075\136\076\133\077" +
    "\140\101\137\102\135\103\134\001\002\000\030\004\042" +
    "\013\125\063\046\064\043\073\057\074\055\100\053\104" +
    "\052\105\051\107\061\110\054\001\002\000\014\004\042" +
    "\013\071\063\046\100\053\105\051\001\002\000\112\003" +
    "\uffa4\014\uffa4\016\uffa4\017\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\042\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\063\uffa4\065\uffa4\075\uffa4\076\uffa4\077\uffa4" +
    "\101\uffa4\102\uffa4\103\uffa4\001\002\000\146\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\063\uffd9\065" +
    "\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9" +
    "\103\uffd9\105\uffd9\106\uffd9\001\002\000\026\004\042\013" +
    "\121\063\046\064\043\073\057\074\055\100\053\104\052" +
    "\105\051\107\061\001\002\000\112\003\uffa5\014\uffa5\016" +
    "\uffa5\017\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\042\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\063" +
    "\uffa5\065\uffa5\075\uffa5\076\uffa5\077\uffa5\101\uffa5\102\uffa5" +
    "\103\uffa5\001\002\000\032\004\042\013\071\025\063\063" +
    "\046\075\072\076\065\077\070\100\053\101\073\102\067" +
    "\103\064\105\051\001\002\000\112\003\uffa6\014\uffa6\016" +
    "\uffa6\017\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\042\uffa6\045\uffa6\046\uffa6\047\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\063" +
    "\uffa6\065\uffa6\075\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6" +
    "\103\uffa6\001\002\000\004\025\062\001\002\000\112\003" +
    "\uffa3\014\uffa3\016\uffa3\017\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\042\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\061\uffa3\063\uffa3\065\uffa3\075\uffa3\076\uffa3\077\uffa3" +
    "\101\uffa3\102\uffa3\103\uffa3\001\002\000\066\003\uff8c\016" +
    "\uff8c\017\uff8c\023\uff8c\024\uff8c\026\uff8c\031\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\036\uff8c\040\uff8c\042\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\051\uff8c\052\uff8c\053\uff8c\055\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\061\uff8c\063\uff8c\065\uff8c\001\002\000" +
    "\066\003\uff8e\016\uff8e\017\uff8e\023\uff8e\024\uff8e\026\uff8e" +
    "\031\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\040\uff8e\042" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\063\uff8e\065" +
    "\uff8e\001\002\000\014\004\042\013\071\063\046\100\053" +
    "\105\051\001\002\000\014\004\042\013\071\063\046\100" +
    "\053\105\051\001\002\000\130\003\uffe6\004\uffe6\013\uffe6" +
    "\014\uffe6\016\uffe6\017\uffe6\020\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6\065\uffe6\075" +
    "\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6" +
    "\105\uffe6\001\002\000\014\004\042\013\071\063\046\100" +
    "\053\105\051\001\002\000\014\004\042\013\071\063\046" +
    "\100\053\105\051\001\002\000\014\004\042\013\071\063" +
    "\046\100\053\105\051\001\002\000\014\004\042\013\071" +
    "\063\046\100\053\105\051\001\002\000\014\004\042\013" +
    "\071\063\046\100\053\105\051\001\002\000\106\003\uffaf" +
    "\004\042\013\071\014\uffaf\016\uffaf\017\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\042\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\063\046\065\uffaf\100\053\105" +
    "\051\001\002\000\106\003\uffb2\004\042\013\071\014\uffb2" +
    "\016\uffb2\017\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\042\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\063\046\065\uffb2\100\053\105\051\001\002\000\020\005" +
    "\102\006\104\007\101\010\077\011\100\012\103\014\105" +
    "\001\002\000\014\004\042\013\071\063\046\100\053\105" +
    "\051\001\002\000\014\004\042\013\071\063\046\100\053" +
    "\105\051\001\002\000\014\004\042\013\071\063\046\100" +
    "\053\105\051\001\002\000\014\004\042\013\071\063\046" +
    "\100\053\105\051\001\002\000\014\004\042\013\071\063" +
    "\046\100\053\105\051\001\002\000\014\004\042\013\071" +
    "\063\046\100\053\105\051\001\002\000\146\003\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\063\uffdc\065" +
    "\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc" +
    "\103\uffdc\105\uffdc\106\uffdc\001\002\000\146\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\101\010\077\011\100\012\103" +
    "\013\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\063\uffe2\065" +
    "\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2" +
    "\103\uffe2\105\uffe2\106\uffe2\001\002\000\146\003\uffde\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\016\uffde\017\uffde\020\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde\053\uffde" +
    "\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\063\uffde\065" +
    "\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde" +
    "\103\uffde\105\uffde\106\uffde\001\002\000\146\003\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\007\101\010\077\011\100\012\103" +
    "\013\uffe1\014\uffe1\016\uffe1\017\uffe1\020\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\063\uffe1\065" +
    "\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1" +
    "\103\uffe1\105\uffe1\106\uffe1\001\002\000\146\003\uffdf\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\100\012\103" +
    "\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\063\uffdf\065" +
    "\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf" +
    "\103\uffdf\105\uffdf\106\uffdf\001\002\000\146\003\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\063\uffdd\065" +
    "\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd" +
    "\103\uffdd\105\uffdd\106\uffdd\001\002\000\146\003\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\100\012\103" +
    "\013\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\063\uffe0\065" +
    "\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0" +
    "\103\uffe0\105\uffe0\106\uffe0\001\002\000\106\003\uffb1\004" +
    "\042\013\071\014\uffb1\016\uffb1\017\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\042\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\063\046\065\uffb1\100\053\105\051" +
    "\001\002\000\106\003\uffb0\004\042\013\071\014\uffb0\016" +
    "\uffb0\017\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\042\uffb0\045\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\063" +
    "\046\065\uffb0\100\053\105\051\001\002\000\106\003\uffad" +
    "\004\042\013\071\014\uffad\016\uffad\017\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\042\uffad\045\uffad\046" +
    "\uffad\047\uffad\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\063\046\065\uffad\100\053\105" +
    "\051\001\002\000\106\003\uffae\004\042\013\071\014\uffae" +
    "\016\uffae\017\uffae\023\uffae\024\uffae\025\uffae\026\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\042\uffae\045\uffae\046\uffae\047\uffae\051\uffae\052" +
    "\uffae\053\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\063\046\065\uffae\100\053\105\051\001\002\000\076\003" +
    "\uffac\014\uffac\016\uffac\017\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\042\uffac\045\uffac\046\uffac\047\uffac" +
    "\051\uffac\052\uffac\053\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\063\uffac\065\uffac\001\002\000\030\004\042" +
    "\013\125\063\046\064\043\073\057\074\055\100\053\104" +
    "\052\105\051\107\061\110\054\001\002\000\106\003\uffab" +
    "\004\042\013\071\014\uffab\016\uffab\017\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\042\uffab\045\uffab\046" +
    "\uffab\047\uffab\051\uffab\052\uffab\053\uffab\055\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\063\046\065\uffab\100\053\105" +
    "\051\001\002\000\046\004\uffe4\005\102\006\104\007\101" +
    "\010\077\011\100\012\103\013\uffe4\014\105\063\uffe4\075" +
    "\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4" +
    "\105\uffe4\001\002\000\016\075\136\076\133\077\140\101" +
    "\137\102\135\103\134\001\002\000\030\004\042\013\125" +
    "\063\046\064\043\073\057\074\055\100\053\104\052\105" +
    "\051\107\061\110\054\001\002\000\030\004\042\013\071" +
    "\063\046\075\072\076\065\077\070\100\053\101\073\102" +
    "\067\103\064\105\051\001\002\000\004\014\130\001\002" +
    "\000\076\003\uffaa\014\uffaa\016\uffaa\017\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\063\uffaa\065\uffaa\001\002\000" +
    "\004\014\132\001\002\000\076\003\uffa9\014\uffa9\016\uffa9" +
    "\017\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\042\uffa9\045\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\063\uffa9" +
    "\065\uffa9\001\002\000\014\064\043\073\057\074\055\104" +
    "\052\107\061\001\002\000\014\064\043\073\057\074\055" +
    "\104\052\107\061\001\002\000\014\064\043\073\057\074" +
    "\055\104\052\107\061\001\002\000\014\064\043\073\057" +
    "\074\055\104\052\107\061\001\002\000\014\064\043\073" +
    "\057\074\055\104\052\107\061\001\002\000\014\064\043" +
    "\073\057\074\055\104\052\107\061\001\002\000\076\003" +
    "\uffb7\014\uffb7\016\uffb7\017\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\042\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\063\uffb7\065\uffb7\001\002\000\076\003\uffb5" +
    "\014\uffb5\016\uffb5\017\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\042\uffb5\045\uffb5\046\uffb5\047\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\063\uffb5\065\uffb5\001\002\000\076\003\uffb8\014" +
    "\uffb8\016\uffb8\017\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\042\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\063\uffb8\065\uffb8\001\002\000\076\003\uffb6\014\uffb6" +
    "\016\uffb6\017\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\042\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\063\uffb6\065\uffb6\001\002\000\076\003\uffb4\014\uffb4\016" +
    "\uffb4\017\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\042\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\063" +
    "\uffb4\065\uffb4\001\002\000\076\003\uffb3\014\uffb3\016\uffb3" +
    "\017\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\042\uffb3\045\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\063\uffb3" +
    "\065\uffb3\001\002\000\020\005\102\006\104\007\101\010" +
    "\077\011\100\012\103\106\150\001\002\000\146\003\uffdb" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\063\uffdb" +
    "\065\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102" +
    "\uffdb\103\uffdb\105\uffdb\106\uffdb\001\002\000\020\014\160" +
    "\075\136\076\133\077\140\101\137\102\135\103\134\001" +
    "\002\000\032\004\042\013\071\014\156\063\046\075\072" +
    "\076\065\077\070\100\053\101\073\102\067\103\064\105" +
    "\051\001\002\000\004\014\154\001\002\000\004\025\uffa9" +
    "\001\002\000\066\003\uff8b\016\uff8b\017\uff8b\023\uff8b\024" +
    "\uff8b\026\uff8b\031\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\040\uff8b\042\uff8b\045\uff8b\046\uff8b\047\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\063\uff8b\065\uff8b\001\002\000\004\025\157\001\002\000" +
    "\066\003\uff8d\016\uff8d\017\uff8d\023\uff8d\024\uff8d\026\uff8d" +
    "\031\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\040\uff8d\042" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\063\uff8d\065" +
    "\uff8d\001\002\000\004\025\161\001\002\000\066\003\uff8f" +
    "\016\uff8f\017\uff8f\023\uff8f\024\uff8f\026\uff8f\031\uff8f\033" +
    "\uff8f\034\uff8f\035\uff8f\036\uff8f\040\uff8f\042\uff8f\045\uff8f" +
    "\046\uff8f\047\uff8f\051\uff8f\052\uff8f\053\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\060\uff8f\061\uff8f\063\uff8f\065\uff8f\001\002" +
    "\000\066\003\uff90\016\uff90\017\uff90\023\uff90\024\uff90\026" +
    "\uff90\031\uff90\033\uff90\034\uff90\035\uff90\036\uff90\040\uff90" +
    "\042\uff90\045\uff90\046\uff90\047\uff90\051\uff90\052\uff90\053" +
    "\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\063\uff90" +
    "\065\uff90\001\002\000\004\013\164\001\002\000\006\014" +
    "\167\063\165\001\002\000\012\067\174\070\175\071\177" +
    "\072\176\001\002\000\006\014\172\063\171\001\002\000" +
    "\004\025\170\001\002\000\066\003\uff92\016\uff92\017\uff92" +
    "\023\uff92\024\uff92\026\uff92\031\uff92\033\uff92\034\uff92\035" +
    "\uff92\036\uff92\040\uff92\042\uff92\045\uff92\046\uff92\047\uff92" +
    "\051\uff92\052\uff92\053\uff92\055\uff92\056\uff92\057\uff92\060" +
    "\uff92\061\uff92\063\uff92\065\uff92\001\002\000\012\067\174" +
    "\070\175\071\177\072\176\001\002\000\004\025\173\001" +
    "\002\000\066\003\uff91\016\uff91\017\uff91\023\uff91\024\uff91" +
    "\026\uff91\031\uff91\033\uff91\034\uff91\035\uff91\036\uff91\040" +
    "\uff91\042\uff91\045\uff91\046\uff91\047\uff91\051\uff91\052\uff91" +
    "\053\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\063" +
    "\uff91\065\uff91\001\002\000\052\003\uffd8\014\uffd8\021\uffd8" +
    "\023\uffd8\024\uffd8\026\uffd8\030\uffd8\031\uffd8\036\uffd8\040" +
    "\uffd8\045\uffd8\047\uffd8\051\uffd8\052\uffd8\054\uffd8\055\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\063\uffd8\001\002\000\052\003" +
    "\uffd7\014\uffd7\021\uffd7\023\uffd7\024\uffd7\026\uffd7\030\uffd7" +
    "\031\uffd7\036\uffd7\040\uffd7\045\uffd7\047\uffd7\051\uffd7\052" +
    "\uffd7\054\uffd7\055\uffd7\057\uffd7\060\uffd7\061\uffd7\063\uffd7" +
    "\001\002\000\052\003\uffd5\014\uffd5\021\uffd5\023\uffd5\024" +
    "\uffd5\026\uffd5\030\uffd5\031\uffd5\036\uffd5\040\uffd5\045\uffd5" +
    "\047\uffd5\051\uffd5\052\uffd5\054\uffd5\055\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\063\uffd5\001\002\000\052\003\uffd6\014\uffd6" +
    "\021\uffd6\023\uffd6\024\uffd6\026\uffd6\030\uffd6\031\uffd6\036" +
    "\uffd6\040\uffd6\045\uffd6\047\uffd6\051\uffd6\052\uffd6\054\uffd6" +
    "\055\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6\001\002\000" +
    "\006\014\uff96\063\uff96\001\002\000\004\021\202\001\002" +
    "\000\006\014\uff95\063\uff95\001\002\000\026\004\042\013" +
    "\071\063\046\064\043\073\057\074\055\100\053\104\052" +
    "\105\051\107\061\001\002\000\004\022\205\001\002\000" +
    "\026\004\uff9f\013\uff9f\063\uff9f\064\uff9f\073\uff9f\074\uff9f" +
    "\100\uff9f\104\uff9f\105\uff9f\107\uff9f\001\002\000\004\025" +
    "\211\001\002\000\016\004\042\013\071\025\210\063\046" +
    "\100\053\105\051\001\002\000\066\003\uffc9\016\uffc9\017" +
    "\uffc9\023\uffc9\024\uffc9\026\uffc9\031\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\040\uffc9\042\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\063\uffc9\065\uffc9\001\002\000\066\003" +
    "\uffcb\016\uffcb\017\uffcb\023\uffcb\024\uffcb\026\uffcb\031\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\042\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\063\uffcb\065\uffcb\001" +
    "\002\000\006\021\uffc4\027\225\001\002\000\004\027\214" +
    "\001\002\000\012\067\174\070\175\071\177\072\176\001" +
    "\002\000\004\030\216\001\002\000\030\004\042\013\125" +
    "\063\046\064\043\073\057\074\055\100\053\104\052\105" +
    "\051\107\061\110\054\001\002\000\020\025\224\075\136" +
    "\076\133\077\140\101\137\102\135\103\134\001\002\000" +
    "\032\004\042\013\071\025\223\063\046\075\072\076\065" +
    "\077\070\100\053\101\073\102\067\103\064\105\051\001" +
    "\002\000\004\025\222\001\002\000\066\003\uffcf\016\uffcf" +
    "\017\uffcf\023\uffcf\024\uffcf\026\uffcf\031\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\040\uffcf\042\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\063\uffcf\065\uffcf\001\002\000\066" +
    "\003\uffd1\016\uffd1\017\uffd1\023\uffd1\024\uffd1\026\uffd1\031" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\042\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\063\uffd1\065\uffd1" +
    "\001\002\000\066\003\uffd3\016\uffd3\017\uffd3\023\uffd3\024" +
    "\uffd3\026\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\040\uffd3\042\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\063\uffd3\065\uffd3\001\002\000\012\067\174\070\175\071" +
    "\177\072\176\001\002\000\004\021\230\001\002\000\006" +
    "\005\uffc3\027\uffc3\001\002\000\004\063\231\001\002\000" +
    "\010\005\uffc0\021\uffc2\027\uffc0\001\002\000\004\021\230" +
    "\001\002\000\006\005\uffc1\027\uffc1\001\002\000\004\030" +
    "\235\001\002\000\030\004\042\013\125\063\046\064\043" +
    "\073\057\074\055\100\053\104\052\105\051\107\061\110" +
    "\054\001\002\000\020\025\243\075\136\076\133\077\140" +
    "\101\137\102\135\103\134\001\002\000\032\004\042\013" +
    "\071\025\242\063\046\075\072\076\065\077\070\100\053" +
    "\101\073\102\067\103\064\105\051\001\002\000\004\025" +
    "\241\001\002\000\066\003\uffd0\016\uffd0\017\uffd0\023\uffd0" +
    "\024\uffd0\026\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\042\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\063\uffd0\065\uffd0\001\002\000\066\003\uffd2\016\uffd2" +
    "\017\uffd2\023\uffd2\024\uffd2\026\uffd2\031\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\040\uffd2\042\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\063\uffd2\065\uffd2\001\002\000\066" +
    "\003\uffd4\016\uffd4\017\uffd4\023\uffd4\024\uffd4\026\uffd4\031" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\040\uffd4\042\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4\065\uffd4" +
    "\001\002\000\026\004\042\013\071\063\046\064\043\073" +
    "\057\074\055\100\053\104\052\105\051\107\061\001\002" +
    "\000\004\025\250\001\002\000\016\004\042\013\071\025" +
    "\247\063\046\100\053\105\051\001\002\000\066\003\uffca" +
    "\016\uffca\017\uffca\023\uffca\024\uffca\026\uffca\031\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\040\uffca\042\uffca\045\uffca" +
    "\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\061\uffca\063\uffca\065\uffca\001\002" +
    "\000\066\003\uffcc\016\uffcc\017\uffcc\023\uffcc\024\uffcc\026" +
    "\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc" +
    "\042\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\063\uffcc" +
    "\065\uffcc\001\002\000\026\016\uffff\017\uffff\033\uffff\034" +
    "\uffff\035\uffff\042\uffff\046\uffff\053\uffff\056\uffff\065\uffff" +
    "\001\002\000\020\025\271\075\136\076\133\077\140\101" +
    "\137\102\135\103\134\001\002\000\030\004\042\013\125" +
    "\063\046\064\043\073\057\074\055\100\053\104\052\105" +
    "\051\107\061\110\054\001\002\000\032\004\042\013\071" +
    "\025\257\063\046\075\072\076\065\077\070\100\053\101" +
    "\073\102\067\103\064\105\051\001\002\000\004\025\256" +
    "\001\002\000\066\003\uff86\016\uff86\017\uff86\023\uff86\024" +
    "\uff86\026\uff86\031\uff86\033\uff86\034\uff86\035\uff86\036\uff86" +
    "\040\uff86\042\uff86\045\uff86\046\uff86\047\uff86\051\uff86\052" +
    "\uff86\053\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86" +
    "\063\uff86\065\uff86\001\002\000\066\003\uff88\016\uff88\017" +
    "\uff88\023\uff88\024\uff88\026\uff88\031\uff88\033\uff88\034\uff88" +
    "\035\uff88\036\uff88\040\uff88\042\uff88\045\uff88\046\uff88\047" +
    "\uff88\051\uff88\052\uff88\053\uff88\055\uff88\056\uff88\057\uff88" +
    "\060\uff88\061\uff88\063\uff88\065\uff88\001\002\000\020\014" +
    "\267\075\136\076\133\077\140\101\137\102\135\103\134" +
    "\001\002\000\032\004\042\013\071\014\265\063\046\075" +
    "\072\076\065\077\070\100\053\101\073\102\067\103\064" +
    "\105\051\001\002\000\004\014\263\001\002\000\004\025" +
    "\uffa9\001\002\000\066\003\uff85\016\uff85\017\uff85\023\uff85" +
    "\024\uff85\026\uff85\031\uff85\033\uff85\034\uff85\035\uff85\036" +
    "\uff85\040\uff85\042\uff85\045\uff85\046\uff85\047\uff85\051\uff85" +
    "\052\uff85\053\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061" +
    "\uff85\063\uff85\065\uff85\001\002\000\004\025\266\001\002" +
    "\000\066\003\uff87\016\uff87\017\uff87\023\uff87\024\uff87\026" +
    "\uff87\031\uff87\033\uff87\034\uff87\035\uff87\036\uff87\040\uff87" +
    "\042\uff87\045\uff87\046\uff87\047\uff87\051\uff87\052\uff87\053" +
    "\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\063\uff87" +
    "\065\uff87\001\002\000\004\025\270\001\002\000\066\003" +
    "\uff89\016\uff89\017\uff89\023\uff89\024\uff89\026\uff89\031\uff89" +
    "\033\uff89\034\uff89\035\uff89\036\uff89\040\uff89\042\uff89\045" +
    "\uff89\046\uff89\047\uff89\051\uff89\052\uff89\053\uff89\055\uff89" +
    "\056\uff89\057\uff89\060\uff89\061\uff89\063\uff89\065\uff89\001" +
    "\002\000\066\003\uff8a\016\uff8a\017\uff8a\023\uff8a\024\uff8a" +
    "\026\uff8a\031\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\040" +
    "\uff8a\042\uff8a\045\uff8a\046\uff8a\047\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\063" +
    "\uff8a\065\uff8a\001\002\000\030\004\042\013\125\063\046" +
    "\064\043\073\057\074\055\100\053\104\052\105\051\107" +
    "\061\110\054\001\002\000\066\003\ufffb\016\ufffb\017\ufffb" +
    "\023\ufffb\024\ufffb\026\ufffb\031\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\040\ufffb\042\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\063\ufffb\065\ufffb\001\002\000\004\032\275" +
    "\001\002\000\042\003\033\023\025\024\037\026\034\031" +
    "\ufffc\036\ufff7\040\ufff5\045\ufff3\047\ufff1\051\014\052\uffee" +
    "\055\uffec\057\040\060\041\061\026\063\031\001\002\000" +
    "\010\033\302\034\303\035\300\001\002\000\004\033\314" +
    "\001\002\000\042\003\033\023\025\024\037\026\034\031" +
    "\ufffc\036\ufff7\040\ufff5\045\ufff3\047\ufff1\051\014\052\uffee" +
    "\055\uffec\057\040\060\041\061\026\063\031\001\002\000" +
    "\006\033\311\035\300\001\002\000\066\003\uffbf\016\uffbf" +
    "\017\uffbf\023\uffbf\024\uffbf\026\uffbf\031\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\040\uffbf\042\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\063\uffbf\065\uffbf\001\002\000\030" +
    "\004\042\013\125\063\046\064\043\073\057\074\055\100" +
    "\053\104\052\105\051\107\061\110\054\001\002\000\004" +
    "\032\305\001\002\000\042\003\033\023\025\024\037\026" +
    "\034\031\ufffc\036\ufff7\040\ufff5\045\ufff3\047\ufff1\051\014" +
    "\052\uffee\055\uffec\057\040\060\041\061\026\063\031\001" +
    "\002\000\010\033\uffb9\034\303\035\uffb9\001\002\000\006" +
    "\033\uffba\035\uffba\001\002\000\004\033\312\001\002\000" +
    "\066\003\uffbe\016\uffbe\017\uffbe\023\uffbe\024\uffbe\026\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\040\uffbe\042" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\063\uffbe\065" +
    "\uffbe\001\002\000\066\003\uffbc\016\uffbc\017\uffbc\023\uffbc" +
    "\024\uffbc\026\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\040\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\063\uffbc\065\uffbc\001\002\000\004\033\uffbb\001\002" +
    "\000\066\003\uffbd\016\uffbd\017\uffbd\023\uffbd\024\uffbd\026" +
    "\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\040\uffbd" +
    "\042\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\063\uffbd" +
    "\065\uffbd\001\002\000\014\004\042\013\071\063\046\100" +
    "\053\105\051\001\002\000\066\003\ufff6\016\ufff6\017\ufff6" +
    "\023\ufff6\024\ufff6\026\ufff6\031\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\040\ufff6\042\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\063\ufff6\065\ufff6\001\002\000\016\004\042" +
    "\013\071\037\320\063\046\100\053\105\051\001\002\000" +
    "\004\017\322\001\002\000\004\065\331\001\002\000\014" +
    "\004\042\013\071\063\046\100\053\105\051\001\002\000" +
    "\006\017\322\065\uffc6\001\002\000\004\065\uffc7\001\002" +
    "\000\016\004\042\013\071\020\326\063\046\100\053\105" +
    "\051\001\002\000\004\032\327\001\002\000\042\003\033" +
    "\023\025\024\037\026\034\031\ufffc\036\ufff7\040\ufff5\045" +
    "\ufff3\047\ufff1\051\014\052\uffee\055\uffec\057\040\060\041" +
    "\061\026\063\031\001\002\000\006\017\uffc5\065\uffc5\001" +
    "\002\000\066\003\uffc8\016\uffc8\017\uffc8\023\uffc8\024\uffc8" +
    "\026\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\040" +
    "\uffc8\042\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\063" +
    "\uffc8\065\uffc8\001\002\000\004\002\000\001\002\000\066" +
    "\003\uffa0\016\uffa0\017\uffa0\023\uffa0\024\uffa0\026\uffa0\031" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\040\uffa0\042\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\053\uffa0\055" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\063\uffa0\065\uffa0" +
    "\001\002\000\066\003\ufff4\016\ufff4\017\ufff4\023\ufff4\024" +
    "\ufff4\026\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\040\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\063\ufff4\065\ufff4\001\002\000\004\063\336\001\002\000" +
    "\004\005\204\001\002\000\014\004\042\013\071\063\046" +
    "\100\053\105\051\001\002\000\016\004\042\013\071\041" +
    "\341\063\046\100\053\105\051\001\002\000\014\004\042" +
    "\013\071\063\046\100\053\105\051\001\002\000\020\004" +
    "\042\013\071\037\343\043\344\063\046\100\053\105\051" +
    "\001\002\000\044\003\033\023\025\024\037\026\034\031" +
    "\ufffc\036\ufff7\040\ufff5\042\353\045\ufff3\047\ufff1\051\014" +
    "\052\uffee\055\uffec\057\040\060\041\061\026\063\031\001" +
    "\002\000\004\044\345\001\002\000\014\004\042\013\071" +
    "\063\046\100\053\105\051\001\002\000\016\004\042\013" +
    "\071\037\347\063\046\100\053\105\051\001\002\000\042" +
    "\003\033\023\025\024\037\026\034\031\ufffc\036\ufff7\040" +
    "\ufff5\045\ufff3\047\ufff1\051\014\052\uffee\055\uffec\057\040" +
    "\060\041\061\026\063\031\001\002\000\004\042\351\001" +
    "\002\000\066\003\uff9e\016\uff9e\017\uff9e\023\uff9e\024\uff9e" +
    "\026\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\040" +
    "\uff9e\042\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\063" +
    "\uff9e\065\uff9e\001\002\000\004\042\354\001\002\000\066" +
    "\003\uffa1\016\uffa1\017\uffa1\023\uffa1\024\uffa1\026\uffa1\031" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\040\uffa1\042\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\051\uffa1\052\uffa1\053\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\063\uffa1\065\uffa1" +
    "\001\002\000\066\003\uffa2\016\uffa2\017\uffa2\023\uffa2\024" +
    "\uffa2\026\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\040\uffa2\042\uffa2\045\uffa2\046\uffa2\047\uffa2\051\uffa2\052" +
    "\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\063\uffa2\065\uffa2\001\002\000\030\004\042\013\125\063" +
    "\046\064\043\073\057\074\055\100\053\104\052\105\051" +
    "\107\061\110\054\001\002\000\066\003\ufff2\016\ufff2\017" +
    "\ufff2\023\ufff2\024\ufff2\026\ufff2\031\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\040\ufff2\042\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\060\ufff2\061\ufff2\063\ufff2\065\ufff2\001\002\000\004\037" +
    "\360\001\002\000\042\003\033\023\025\024\037\026\034" +
    "\031\ufffc\036\ufff7\040\ufff5\045\ufff3\047\ufff1\051\014\052" +
    "\uffee\055\uffec\057\040\060\041\061\026\063\031\001\002" +
    "\000\004\046\362\001\002\000\066\003\uff9d\016\uff9d\017" +
    "\uff9d\023\uff9d\024\uff9d\026\uff9d\031\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\040\uff9d\042\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\061\uff9d\063\uff9d\065\uff9d\001\002\000\032\004" +
    "\042\013\071\025\366\063\046\075\072\076\065\077\070" +
    "\100\053\101\073\102\067\103\064\105\051\001\002\000" +
    "\004\025\365\001\002\000\066\003\uff9a\016\uff9a\017\uff9a" +
    "\023\uff9a\024\uff9a\026\uff9a\031\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\040\uff9a\042\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\061\uff9a\063\uff9a\065\uff9a\001\002\000\066\003\uff99" +
    "\016\uff99\017\uff99\023\uff99\024\uff99\026\uff99\031\uff99\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\040\uff99\042\uff99\045\uff99" +
    "\046\uff99\047\uff99\051\uff99\052\uff99\053\uff99\055\uff99\056" +
    "\uff99\057\uff99\060\uff99\061\uff99\063\uff99\065\uff99\001\002" +
    "\000\004\050\372\001\002\000\066\003\ufff0\016\ufff0\017" +
    "\ufff0\023\ufff0\024\ufff0\026\ufff0\031\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\040\ufff0\042\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\063\ufff0\065\ufff0\001\002\000\004\050" +
    "\374\001\002\000\030\004\042\013\125\063\046\064\043" +
    "\073\057\074\055\100\053\104\052\105\051\107\061\110" +
    "\054\001\002\000\066\003\uff9b\016\uff9b\017\uff9b\023\uff9b" +
    "\024\uff9b\026\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\040\uff9b\042\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\063\uff9b\065\uff9b\001\002\000\030\004\042\013\125" +
    "\063\046\064\043\073\057\074\055\100\053\104\052\105" +
    "\051\107\061\110\054\001\002\000\066\003\uff9c\016\uff9c" +
    "\017\uff9c\023\uff9c\024\uff9c\026\uff9c\031\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\040\uff9c\042\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\063\uff9c\065\uff9c\001\002\000\066" +
    "\003\uffed\016\uffed\017\uffed\023\uffed\024\uffed\026\uffed\031" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040\uffed\042\uffed" +
    "\045\uffed\046\uffed\047\uffed\051\uffed\052\uffed\053\uffed\055" +
    "\uffed\056\uffed\057\uffed\060\uffed\061\uffed\063\uffed\065\uffed" +
    "\001\002\000\004\063\u0100\001\002\000\044\003\033\023" +
    "\025\024\037\026\034\031\ufffc\036\ufff7\040\ufff5\045\ufff3" +
    "\047\ufff1\051\014\052\uffee\054\u0102\055\uffec\057\040\060" +
    "\041\061\026\063\031\001\002\000\004\053\u0108\001\002" +
    "\000\004\013\u0103\001\002\000\004\063\165\001\002\000" +
    "\006\014\u0105\063\171\001\002\000\042\003\033\023\025" +
    "\024\037\026\034\031\ufffc\036\ufff7\040\ufff5\045\ufff3\047" +
    "\ufff1\051\014\052\uffee\055\uffec\057\040\060\041\061\026" +
    "\063\031\001\002\000\004\053\u0107\001\002\000\066\003" +
    "\uff98\016\uff98\017\uff98\023\uff98\024\uff98\026\uff98\031\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\040\uff98\042\uff98\045" +
    "\uff98\046\uff98\047\uff98\051\uff98\052\uff98\053\uff98\055\uff98" +
    "\056\uff98\057\uff98\060\uff98\061\uff98\063\uff98\065\uff98\001" +
    "\002\000\066\003\uff97\016\uff97\017\uff97\023\uff97\024\uff97" +
    "\026\uff97\031\uff97\033\uff97\034\uff97\035\uff97\036\uff97\040" +
    "\uff97\042\uff97\045\uff97\046\uff97\047\uff97\051\uff97\052\uff97" +
    "\053\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\063" +
    "\uff97\065\uff97\001\002\000\066\003\uffeb\016\uffeb\017\uffeb" +
    "\023\uffeb\024\uffeb\026\uffeb\031\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\040\uffeb\042\uffeb\045\uffeb\046\uffeb\047\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\063\uffeb\065\uffeb\001\002\000\004\063\u010b" +
    "\001\002\000\012\067\174\070\175\071\177\072\176\001" +
    "\002\000\044\003\033\023\025\024\037\026\034\031\ufffc" +
    "\036\ufff7\040\ufff5\045\ufff3\047\ufff1\051\014\052\uffee\054" +
    "\u010e\055\uffec\057\040\060\041\061\026\063\031\001\002" +
    "\000\004\056\u0114\001\002\000\004\013\u010f\001\002\000" +
    "\004\063\165\001\002\000\006\014\u0111\063\171\001\002" +
    "\000\042\003\033\023\025\024\037\026\034\031\ufffc\036" +
    "\ufff7\040\ufff5\045\ufff3\047\ufff1\051\014\052\uffee\055\uffec" +
    "\057\040\060\041\061\026\063\031\001\002\000\004\056" +
    "\u0113\001\002\000\066\003\uff94\016\uff94\017\uff94\023\uff94" +
    "\024\uff94\026\uff94\031\uff94\033\uff94\034\uff94\035\uff94\036" +
    "\uff94\040\uff94\042\uff94\045\uff94\046\uff94\047\uff94\051\uff94" +
    "\052\uff94\053\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061" +
    "\uff94\063\uff94\065\uff94\001\002\000\066\003\uff93\016\uff93" +
    "\017\uff93\023\uff93\024\uff93\026\uff93\031\uff93\033\uff93\034" +
    "\uff93\035\uff93\036\uff93\040\uff93\042\uff93\045\uff93\046\uff93" +
    "\047\uff93\051\uff93\052\uff93\053\uff93\055\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\063\uff93\065\uff93\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\004\002\004\001\001\000\046\004\016\011" +
    "\035\014\012\015\034\016\010\017\027\020\026\034\023" +
    "\040\020\041\021\042\031\047\022\050\017\051\015\052" +
    "\014\053\011\054\007\055\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0108\001\001\000\004\035" +
    "\375\001\001\000\002\001\001\000\004\033\367\001\001" +
    "\000\002\001\001\000\014\003\363\022\362\044\043\045" +
    "\044\046\123\001\001\000\004\032\355\001\001\000\006" +
    "\030\333\031\332\001\001\000\002\001\001\000\004\024" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\254\022\253\044\043\045\044\046\251\001\001" +
    "\000\002\001\001\000\046\004\250\011\035\014\012\015" +
    "\034\016\010\017\027\020\026\034\023\040\020\041\021" +
    "\042\031\047\022\050\017\051\015\052\014\053\011\054" +
    "\007\055\006\001\001\000\006\027\243\056\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\212\001" +
    "\001\000\002\001\001\000\004\027\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\057\022\055\044" +
    "\043\045\044\046\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\152\022\151\044\122" +
    "\045\044\046\150\001\001\000\004\044\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\121\044\043" +
    "\045\044\046\117\001\001\000\002\001\001\000\006\044" +
    "\043\045\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\116\044\043\045\044\001\001\000\010\022\115" +
    "\044\043\045\044\001\001\000\002\001\001\000\010\022" +
    "\114\044\043\045\044\001\001\000\010\022\113\044\043" +
    "\045\044\001\001\000\004\044\075\001\001\000\010\022" +
    "\074\044\043\045\044\001\001\000\010\022\073\044\043" +
    "\045\044\001\001\000\006\044\043\045\065\001\001\000" +
    "\006\044\043\045\065\001\001\000\002\001\001\000\004" +
    "\044\112\001\001\000\004\044\111\001\001\000\004\044" +
    "\110\001\001\000\004\044\107\001\001\000\004\044\106" +
    "\001\001\000\004\044\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\043\045\065\001\001\000\006\044\043\045\065\001\001" +
    "\000\006\044\043\045\065\001\001\000\006\044\043\045" +
    "\065\001\001\000\002\001\001\000\014\003\126\022\125" +
    "\044\122\045\044\046\123\001\001\000\006\044\043\045" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\130\022\125\044\122\045\044\046\123\001\001\000" +
    "\006\044\043\045\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\145\001\001\000\004\046\144\001\001\000\004\046\143" +
    "\001\001\000\004\046\142\001\001\000\004\046\141\001" +
    "\001\000\004\046\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\043\045\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\165" +
    "\001\001\000\004\043\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\206\044\043\045\044\046\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\043\045" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\225\001\001\000\002\001\001\000\004\043\214\001" +
    "\001\000\002\001\001\000\014\003\220\022\217\044\043" +
    "\045\044\046\216\001\001\000\002\001\001\000\006\044" +
    "\043\045\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\233\001" +
    "\001\000\004\012\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\231\001\001\000\004\012\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\237" +
    "\022\236\044\043\045\044\046\235\001\001\000\002\001" +
    "\001\000\006\044\043\045\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\245\044\043\045\044\046\244\001\001\000\002" +
    "\001\001\000\006\044\043\045\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\261\022\260\044\122\045\044\046\257\001" +
    "\001\000\006\044\043\045\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\043\045\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\273\022\125\044\043\045\044\046\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\004\275" +
    "\011\035\014\012\015\034\016\010\017\027\020\026\034" +
    "\023\040\020\041\021\042\031\047\022\050\017\051\015" +
    "\052\014\053\011\054\007\055\006\001\001\000\006\021" +
    "\276\023\300\001\001\000\002\001\001\000\046\004\312" +
    "\011\035\014\012\015\034\016\010\017\027\020\026\034" +
    "\023\040\020\041\021\042\031\047\022\050\017\051\015" +
    "\052\014\053\011\054\007\055\006\001\001\000\004\021" +
    "\307\001\001\000\002\001\001\000\014\003\303\022\125" +
    "\044\043\045\044\046\123\001\001\000\002\001\001\000" +
    "\046\004\305\011\035\014\012\015\034\016\010\017\027" +
    "\020\026\034\023\040\020\041\021\042\031\047\022\050" +
    "\017\051\015\052\014\053\011\054\007\055\006\001\001" +
    "\000\004\023\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\316\044\043\045\044\001" +
    "\001\000\002\001\001\000\006\044\043\045\065\001\001" +
    "\000\006\025\322\026\320\001\001\000\002\001\001\000" +
    "\010\022\324\044\043\045\044\001\001\000\006\025\322" +
    "\026\323\001\001\000\002\001\001\000\006\044\043\045" +
    "\065\001\001\000\002\001\001\000\046\004\327\011\035" +
    "\014\012\015\034\016\010\017\027\020\026\034\023\040" +
    "\020\041\021\042\031\047\022\050\017\051\015\052\014" +
    "\053\011\054\007\055\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\336\001\001\000" +
    "\010\022\337\044\043\045\044\001\001\000\006\044\043" +
    "\045\065\001\001\000\010\022\341\044\043\045\044\001" +
    "\001\000\006\044\043\045\065\001\001\000\046\004\351" +
    "\011\035\014\012\015\034\016\010\017\027\020\026\034" +
    "\023\040\020\041\021\042\031\047\022\050\017\051\015" +
    "\052\014\053\011\054\007\055\006\001\001\000\002\001" +
    "\001\000\010\022\345\044\043\045\044\001\001\000\006" +
    "\044\043\045\065\001\001\000\046\004\347\011\035\014" +
    "\012\015\034\016\010\017\027\020\026\034\023\040\020" +
    "\041\021\042\031\047\022\050\017\051\015\052\014\053" +
    "\011\054\007\055\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\356\022\125\044\043\045\044\046\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\360\011\035\014\012\015\034\016\010\017\027\020\026" +
    "\034\023\040\020\041\021\042\031\047\022\050\017\051" +
    "\015\052\014\053\011\054\007\055\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\043\045\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\372\022\125\044\043\045\044\046\123" +
    "\001\001\000\002\001\001\000\014\003\374\022\125\044" +
    "\043\045\044\046\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\u0100\011\035\014" +
    "\012\015\034\016\010\017\027\020\026\034\023\040\020" +
    "\041\021\042\031\047\022\050\017\051\015\052\014\053" +
    "\011\054\007\055\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\u0103\001\001\000\002\001\001\000" +
    "\046\004\u0105\011\035\014\012\015\034\016\010\017\027" +
    "\020\026\034\023\040\020\041\021\042\031\047\022\050" +
    "\017\051\015\052\014\053\011\054\007\055\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u010b\001\001" +
    "\000\046\004\u010c\011\035\014\012\015\034\016\010\017" +
    "\027\020\026\034\023\040\020\041\021\042\031\047\022" +
    "\050\017\051\015\052\014\053\011\054\007\055\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\u010f" +
    "\001\001\000\002\001\001\000\046\004\u0111\011\035\014" +
    "\012\015\034\016\010\017\027\020\026\034\023\040\020" +
    "\041\021\042\031\047\022\050\017\051\015\052\014\053" +
    "\011\054\007\055\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static Nodo padre;
        boolean cambiar = true;
        int countTab = 0;
        int tmpCountTab = 0;
        int cont = 0;
        public String python = "";
        public String golang = "";
        public int erroresSintacticos = 0;
        String condicion = "";
        String instruccion = "";
        String tmpInstruccion = "";
        String valor = "";
        String tmpPython = "";
        String tmpImprimir = "";
        String tmpImprimirnl = "";
        Nodo nodoError = new Nodo();
        Boolean osiBool = false;
        ArrayList<String> variables = new ArrayList<String>();
        public ArrayList<Errors> errorsSint = new ArrayList<Errors>();
        ArrayList<String> condiciones = new ArrayList<String>();
        ArrayList<String> tmpListaNombres = new ArrayList<String>();
        ArrayList<String> tmpOperacion = new ArrayList<String>();
        ArrayList<String> tmpOperadorLista = new ArrayList<String>();
        ArrayList<String> pythonArray = new ArrayList<String>();
        ArrayList<String> tmpPythonArray = new ArrayList<String>();
        ArrayList<String> tmpPython2 = new ArrayList<String>();
        public void syntax_error(Symbol s){ 
                if(s.value != null){
                        erroresSintacticos++;
                        //Imprimir error
                        System.out.println("Error Sintáctico en la Línea " + (s.left) +
                        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

                        Errors tmp = new Errors("Sitactico", s.left , s.right,"No se esperaba este componente: " +s.value);
                        nodoError = new Nodo();
                        nodoError.setEtiqueta("ERROR");
                        nodoError.setIdNodo(cont); 
                        nodoError.setValor("No se esperaba este componente: " +s.value);
                        cont++;
                        errorsSint.add(tmp);
                }
        
        } 
        //Repet tab
        public String tab(int n){
                String tab = "";
                for(int i = 0; i < n; i++){
                tab += "\t";
                }
                return tab;
        }
        //ASCII to char
        public String asciiToChar(String ascii){
                ascii = ascii.replace("{", "");
                ascii = ascii.replace("}", "");
                ascii = ascii.replace("$", "");
                ascii = ascii.replace("'", "");
                String[] asciiArray = ascii.split(",");
                String charValue = "";
                for(int i = 0; i < asciiArray.length; i++){
                        charValue += (char)Integer.parseInt(asciiArray[i]);
                }
                return charValue;
        }
        public void agregarTmpListaNombres(String a, Nodo b){
    
                for(String i: tmpListaNombres){
                        b.pythonCode += i + " = " + a + "\n";
                }; 

                tmpListaNombres = new ArrayList<String>();
        }

        public void agregarTmpOperacionLista(String a){
        tmpOperacion.add( "(" + a + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

        }

        public void agregarTmpOperacionLista2(){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 2) + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        }

        public void agregarTmpOperacionLista3(String a){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")" +
                tmpOperadorLista.get(tmpOperadorLista.size() - 1) + "(" + a + ")" 
        ); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

        }

        public void agregarTmpOperacion(String a, String b){
        tmpOperacion.add(a + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + b); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        }
        
        public String recorrido(Nodo raiz){

                String ast = "";
                for(Nodo hijos : raiz.Hijos){
                        if(hijos != null){
                                //If hijos is null then eliminate
                                if(!(hijos.Etiqueta.equals(""))){
                                        if(hijos.pythonCode.equals("")){
                                                ast += recorrido(hijos);
                                        }else{
                                                ast += hijos.pythonCode;
                                        }
                                } else {
                                        System.out.println(raiz.Etiqueta);
                                }
                        }else{
                                Nodo tmp = new Nodo();
                                tmp.Etiqueta = "null";
                                raiz.Hijos.add(tmp);
                                ast += "Error" + "\n";
                        }
                                
                        
                        
                
                
                }
                return ast;
        }
        /**
        * Método al que se llama automáticamente ante algún error sintáctico 
        * en el que ya no es posible una recuperación de errores.
        **/ 
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
                if(s.value != null){
                        System.out.println("Error síntactico irrecuperable en la Línea " + 
                        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
                        " no reconocido."); 
                        Errors tmp = new Errors("Sitactico", s.left , s.right,"Componente " + s.value + " no reconocido.");
                        
                        errorsSint.add(tmp);
                }
        }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio INSTRUCCIONES prFin 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("INICIO");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            nd.AddHijo((Nodo) n1);
            parser.padre = (Nodo) nd;
            python += "def main():\n";
            python = recorrido(nd);
            python += "if __name__ == '__main__':\n";
            python += "\tmain()\n";
            RESULT = nd;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= E INSTRUCCIONES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("INSTRUCCIONES");
                nd.setIdNodo(parser.cont); 
                parser.cont++;

                nd.AddHijo((Nodo) n1);
                nd.AddHijo((Nodo) n2);
                nd.pythonCode = tab(countTab) + ((Nodo) n1).pythonCode + "\n" + ((Nodo) n2).pythonCode; 
                RESULT = nd; 
                
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= E 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("INSTRUCCION");
                nd.setIdNodo(parser.cont); 
                parser.cont++;

                nd.AddHijo((Nodo) n1);
                RESULT = nd;  
                
                
                if(((Nodo) n1).Etiqueta.equals("DE_LO_CONTRARIO") || ((Nodo) n1).Etiqueta.equals("O_SI") 
                || ((Nodo) n1).Etiqueta.equals("SEGUN")){
                        nd.pythonCode = tab(countTab-1) + ((Nodo) n1).pythonCode + "\n";
                }else{
                        nd.pythonCode = tab(countTab) + ((Nodo) n1).pythonCode + "\n";
                }
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= DECLARACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
countTab++;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= NT$0 IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 countTab--; RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= COMENTARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= COMENTARIO_VARIAS_LINEAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= ASIGNACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
countTab++;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= NT$1 SELECCION_MULTIPLE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 countTab--; RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
countTab++;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= NT$2 PARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 countTab--; RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
countTab++;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= NT$3 MIENTRAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 countTab--; RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$4 ::= 
            {
              Object RESULT =null;
countTab++;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= NT$4 REPETIR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 countTab--; RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= RETORNO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
countTab++;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= NT$5 METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 countTab--; RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              Object RESULT =null;
countTab++;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= NT$6 FUNCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 countTab--; RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= EJECUTAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= IMPRIMIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= IMPRIMIR_NL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = a;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= error 
            {
              Object RESULT =null;
		 RESULT = nodoError;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION OPERACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("OPERACIONES");
                nd.setIdNodo(parser.cont);
                parser.cont++;
                nd.AddHijo((Nodo) a);

                RESULT = nd; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= OPERACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACIONES ::= OPERACION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION ::= tnum 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("NUMERO");
                nd.setIdNodo(parser.cont);
                parser.cont++;
                nd.setValor(n);
                nd.pythonCode = n;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= OPERACION tsum OPERACION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("SUMA");
                nd.setIdNodo(parser.cont); 
                nd.setValor("+");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "+" + ( (Nodo) r).pythonCode  ;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= OPERACION trest OPERACION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("RESTA");
                nd.setIdNodo(parser.cont); 
                nd.setValor("-");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "-" + ( (Nodo) r).pythonCode ;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= OPERACION tmul OPERACION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("MULTIPLICACION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("*");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "*" + ( (Nodo) r).pythonCode ;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= OPERACION tdiv OPERACION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("DIVICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("/");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "/" + ( (Nodo) r).pythonCode ;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= OPERACION tmod OPERACION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("MODULO");
                nd.setIdNodo(parser.cont); 
                nd.setValor("%");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "%" + ( (Nodo) r).pythonCode ;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= OPERACION tpot OPERACION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("POTENCIA");
                nd.setIdNodo(parser.cont); 
                nd.setValor("**");
                parser.cont++;
                nd.AddHijo((Nodo) i);
                nd.AddHijo((Nodo) r);
                nd.pythonCode = ( (Nodo) i).pythonCode + "**" + ( (Nodo) r).pythonCode ;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= pare1 OPERACION pare2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                ((Nodo) e).pythonCode = "(" + ((Nodo) e).pythonCode + ")";
                RESULT = e;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= cor1 OPERACION cor2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                ((Nodo) e).pythonCode = "[" + ((Nodo) e).pythonCode + "]";
                RESULT = e;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= tvariable 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("VARIABLE");
                nd.setIdNodo(parser.cont);
                parser.cont++;
                nd.setValor(n);
                nd.pythonCode = n;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= prFloat 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("FLOAT");
                nd.setIdNodo(parser.cont);
                parser.cont++;
                nd.setValor(n);
                nd.pythonCode = n;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= prBoolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("BOOLEAN");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            RESULT = nd;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= prCaracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("CARACTER");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            RESULT = nd;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= prNumero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("ENTERO");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            RESULT = nd;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= prCadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
            Nodo nd = new Nodo(); 
            nd.setEtiqueta("CADENA");
            nd.setIdNodo(parser.cont); 
            parser.cont++;
            RESULT = nd;     
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor VARIABLES tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Variable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Variables
                Nodo nd6 = (Nodo)  b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                parser.cont++;
                 
                nd.pythonCode += a.toString() + " = " + nd6.pythonCode  ; 
                System.out.println("Python: " + nd.pythonCode);
                
                RESULT = nd;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor VARIABLES tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Lista de nombres
                Nodo nd2 = (Nodo) a;
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Variables
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                parser.cont++;

                RESULT = nd;
                agregarTmpListaNombres(nd6.Valor,nd);
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor EXPRESION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Variable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Expresion
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = a + "= " + nd6.pythonCode  ;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor EXPRESION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Lista de nombres
                Nodo nd2 = (Nodo) a;
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Variables
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                parser.cont++;

                agregarTmpListaNombres(nd6.Valor,nd);
                RESULT = nd;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor CONDICION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Variable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Expresion
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                RESULT = nd;
                parser.cont++;
                
                nd.pythonCode = a.toString() + " = " + ((Nodo) b).pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor CONDICION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("DECLARACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Ingresar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("INGRESAR");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prIngresar");
                //Lista de nombres
                Nodo nd2 = (Nodo) a;
                //prComo
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("COMO");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prComo");
                //Tipo
                Nodo nd4 = (Nodo) c;
                //prConValor
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("CONVALOR");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prConValor");
                //Variables
                Nodo nd6 = (Nodo) b;
                //puntoycoma
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("PUNTOYCOMA");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                nd.AddHijo(nd7);
                parser.cont++;
                RESULT = nd;
                agregarTmpListaNombres(nd2.Valor,nd);
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMENTARIO ::= tcomentario 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("COMENTARIO");
                nd.setIdNodo(parser.cont);
                nd.setValor(c);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = c.toString();
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COMENTARIO_VARIAS_LINEAS ::= tcomentariovariaslineas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("COMENTARIO_VARIAS_LINEAS");
                nd.setIdNodo(parser.cont);
                nd.setValor(c);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = c.toString();
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO_VARIAS_LINEAS",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= tvariable FLECHA VARIABLES tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("ASIGNACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Variable
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("VARIABLE");
                nd1.setIdNodo(parser.cont);
                nd1.setValor(a);
                //Flecha
                Nodo nd2 = (Nodo) c;
                //Variables
                Nodo nd3 = (Nodo) b;
                //puntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("PUNTOYCOMA");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                
                nd.pythonCode = a.toString() + " = " + nd3.pythonCode ;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= LISTA_NOMBRES FLECHA VARIABLES tpuntoycoma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("ASIGNACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Lista de nombres
                Nodo nd1 = (Nodo) b;
                //Flecha
                Nodo nd2 = (Nodo) c;
                //Variables
                Nodo nd3 = (Nodo) a;
                //puntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("PUNTOYCOMA");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                agregarTmpListaNombres(nd3.Valor,nd);
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= tvariable FLECHA EXPRESION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("ASIGNACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Variable
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("VARIABLE");
                nd1.setIdNodo(parser.cont);
                nd1.setValor(a);
                //Flecha
                Nodo nd2 = (Nodo) c;
                //Expresion
                Nodo nd3 = (Nodo) b;
                //puntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("PUNTOYCOMA");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = a.toString() + " = " + nd3.pythonCode ;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION ::= LISTA_NOMBRES FLECHA EXPRESION tpuntoycoma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("ASIGNACION");
                nd.setIdNodo(parser.cont);
                nd.setValor("=");
                //Lista de nombres
                Nodo nd1 = (Nodo) b;
                //Flecha
                Nodo nd2 = (Nodo) c;
                //Expresion
                Nodo nd3 = (Nodo) a;
                //puntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("PUNTOYCOMA");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("tpuntoycoma");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                agregarTmpListaNombres(nd3.Valor,nd);
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SELECCION_MULTIPLE ::= prSegun EXPRESION prHacer LISTA_SEGUN prFinSegun 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("SELECCION_MULTIPLE");
                nd.setIdNodo(parser.cont);
                nd.setValor("SELECCION_MULTIPLE");
                //prSegun 
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prSegun");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prSegun");
                //Exprersión
                Nodo nd2 = (Nodo) a;
                //prHacer
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("prHacer");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prHacer");
                //Lista de casos
                Nodo nd4 = (Nodo) b;
                //prFinSegun
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("prFinSegun");
                nd5.setIdNodo(parser.cont);
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = "if " + nd2.pythonCode + ":\n" + nd4.pythonCode ;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_SEGUN ::= SEGUN LISTA_SEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("LISTA_SEGUN");
                nd.setIdNodo(parser.cont);
                nd.setValor("SEGUN");
                //Segun
                Nodo nd1 = (Nodo) a;
                //Lista Segun
                Nodo nd2 = (Nodo) b;
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = nd1.pythonCode + nd2.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SEGUN",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_SEGUN ::= SEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SEGUN",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SEGUN ::= tinterrogacioninicio EXPRESION tinterrogacionfin prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("SEGUN");
        nd.setIdNodo(parser.cont);
        nd.setValor("SEGUN");
        //Interrogacion inicio
        Nodo nd1 = new Nodo();
        nd1.setEtiqueta("INTERROGACION_INICIO");
        nd1.setIdNodo(parser.cont);
        nd1.setValor("tinterrogacioninicio");
        //Expresión
        Nodo nd2 = (Nodo) a;
        //Interrogacion fin
        Nodo nd3 = new Nodo();
        nd3.setEtiqueta("INTERROGACION_FIN");
        nd3.setIdNodo(parser.cont);
        nd3.setValor("tinterrogacionfin");
        //Entonces
        Nodo nd4 = new Nodo();
        nd4.setEtiqueta("ENTONCES");
        nd4.setIdNodo(parser.cont);
        nd4.setValor("prEntonces");
        //Instrucciones
        Nodo nd5 = (Nodo) b;
        //Agregando hijos
        nd.AddHijo(nd1);
        nd.AddHijo(nd2);
        nd.AddHijo(nd3);
        nd.AddHijo(nd4);
        nd.AddHijo(nd5);
        RESULT = nd;
        parser.cont++;
        nd.pythonCode = "elif " + nd2.pythonCode + ":\n" + "\t" + nd5.pythonCode + "\n";
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;

                Nodo nd = new Nodo();
                nd.setEtiqueta("VARIABLE");
                nd.setIdNodo(parser.cont);
                nd.setValor(a);
                parser.cont++;
                nd.pythonCode = a;
                RESULT = nd;
                tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA_NOMBRES ::= tvariable NT$7 LISTA_NOMBRES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("LISTA_NOMBRES");
                nd.setIdNodo(parser.cont);
                nd.setValor("LISTA_NOMBRES");
                parser.cont++;
                for (int i = 0; i < tmpListaNombres.size(); i++) {
                    Nodo nd2 = new Nodo();
                    nd2.setEtiqueta("VARIABLE");
                    nd2.setIdNodo(parser.cont);
                    nd2.setValor(tmpListaNombres.get(i));
                    parser.cont++;
                    nd.AddHijo(nd2);
                }
                RESULT = nd;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;

                Nodo nd = new Nodo();
                nd.setEtiqueta("VARIABLE");
                nd.setIdNodo(parser.cont);
                nd.setValor(a);
                parser.cont++;
                tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTA_NOMBRES2 ::= tcoma tvariable NT$8 LISTA_NOMBRES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTA_NOMBRES2 ::= tcoma tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("VARIABLE");
                nd.setIdNodo(parser.cont);
                nd.setValor(a);
                parser.cont++;
                tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //Fin si
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("FIN_SI");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.pythonCode + ":\n" + nd3.pythonCode ;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES O_SI prFinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) c;
                //O si
                Nodo nd4 = (Nodo) b;
                //Fin si
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("FIN_SI");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.pythonCode + ":\n" + nd3.pythonCode + "\n" + nd4.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES DE_LO_CONTRARIO prFinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) c;
                //De lo contrario
                Nodo nd4 = (Nodo) b;
                //Fin si
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("FIN_SI");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.pythonCode + ":\n" + nd3.pythonCode + "\n" + tab(countTab - 1) + "else:\n" + nd4.pythonCode ;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES O_SI DE_LO_CONTRARIO prFinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("IF");
                nd.setIdNodo(parser.cont);
                nd.setValor("IF");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //O si
                Nodo nd4 = (Nodo) c;
                //De lo contrario
                Nodo nd5 = (Nodo) d;
                //Fin si
                Nodo nd6 = new Nodo();
                nd6.setEtiqueta("FIN_SI");
                nd6.setIdNodo(parser.cont);
                nd6.setValor("FIN_SI");
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                nd.AddHijo(nd5);
                nd.AddHijo(nd6);
                RESULT = nd;
                parser.cont++;

                nd.pythonCode = "if " + nd1.pythonCode + ":\n" + nd3.pythonCode + "\n" + nd4.pythonCode + tab(countTab - 1) + "else:\n" + nd5.pythonCode ;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DE_LO_CONTRARIO ::= prDeLoContrario INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("DE_LO_CONTRARIO");
                nd.setIdNodo(parser.cont);
                nd.setValor("DE_LO_CONTRARIO");
                //Instrucciones
                Nodo nd1 = (Nodo) a;
                //Agregando hijos
                nd.AddHijo(nd1);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = nd1.pythonCode ;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // O_SI ::= prO_Si CONDICION prEntonces INSTRUCCIONES O_SI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("O_SI");
                nd.setIdNodo(parser.cont);
                nd.setValor("O_SI");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //O si
                Nodo nd4 = (Nodo) c;
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                nd.AddHijo(nd4);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = "elif " + nd1.pythonCode + ":\n" + "\t" + nd3.pythonCode + "\n" + nd4.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // O_SI ::= prO_Si CONDICION prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("O_SI");
                nd.setIdNodo(parser.cont);
                nd.setValor("O_SI");
                //Condicion
                Nodo nd1 = (Nodo) a;
                //Entonces
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("ENTONCES");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("ENTONCES");
                //Instrucciones
                Nodo nd3 = (Nodo) b;
                //Agregando hijos
                nd.AddHijo(nd1);
                nd.AddHijo(nd2);
                nd.AddHijo(nd3);
                RESULT = nd;
                parser.cont++;
                nd.pythonCode = tab(countTab - 1) + "elif " + nd1.pythonCode + ":\n" + "\t" + nd3.pythonCode ;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= VARIABLES prEsIgual VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("==");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " == " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= VARIABLES prMayor VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor(">");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " > " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICION ::= VARIABLES prMayorOIgual VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor(">=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " >= " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICION ::= VARIABLES prMenor VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("<");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " < " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICION ::= VARIABLES prMenorOIgual VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("<=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " <= " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICION ::= VARIABLES prEsDiferente VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " != " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDICION ::= EXPRESION prEsIgual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("==");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " == " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= EXPRESION prMayor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor(">");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " > " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= EXPRESION prMayorOIgual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor(">=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " >= " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= EXPRESION prMenor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("<");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " < " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= EXPRESION prMenorOIgual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("<=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " <= " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION ::= EXPRESION prEsDiferente EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!=");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.AddHijo((Nodo) b);
                nd.pythonCode = ((Nodo) a).pythonCode + " != " + ((Nodo) b).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION ::= prNot VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.pythonCode = "not " + ((Nodo) a).pythonCode;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= prNot EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.pythonCode = "not (" + ((Nodo) a).pythonCode + ")";
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= prNot pare1 CONDICION pare2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CONDICION");
                nd.setIdNodo(parser.cont); 
                nd.setValor("!");
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.pythonCode = "not (" + ((Nodo) a).pythonCode + ")";
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION ::= pare1 CONDICION pare2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIABLE ::= tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARIABLES ::= tcadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CADENA");
                nd.setIdNodo(parser.cont); 
                nd.setValor(a.replace("\"", "").replace("\'", ""));
                parser.cont++;
                nd.pythonCode = a;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARIABLES ::= prVerdadero 
            {
              Object RESULT =null;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("BOOLEANO");
                nd.setIdNodo(parser.cont); 
                nd.setValor("True");
                parser.cont++;
                nd.pythonCode = "True";
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARIABLES ::= prFalso 
            {
              Object RESULT =null;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("BOOLEANO");
                nd.setIdNodo(parser.cont); 
                nd.setValor("False");
                parser.cont++;
                nd.pythonCode = "False";
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VARIABLES ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CARACTER");
                nd.setIdNodo(parser.cont); 
                nd.setValor(a.replace("\"", "").replace("\'", ""));
                parser.cont++;
                nd.pythonCode = a;
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARIABLES ::= ascii 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("CARACTER");
                nd.setIdNodo(parser.cont); 
                nd.setValor(asciiToChar(a));
                parser.cont++;
                nd.pythonCode = asciiToChar(a);
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARA ::= prPara tvariable FLECHA EXPRESION prHasta EXPRESION prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("PARA");
                nd.setIdNodo(parser.cont);
                nd.setValor("PARA");
                parser.cont++;
                //prPara
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prPara");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prPara");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                parser.cont++;
                nd.AddHijo(nd2);
                //FLECHA
                Nodo nd3 = (Nodo) e;
                nd.AddHijo(nd3);
                //EXPRESION
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                //prHasta
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("HASTA");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("HASTA");
                parser.cont++;
                nd.AddHijo(nd5);
                //EXPRESION
                Nodo nd6 = (Nodo) c;
                nd.AddHijo(nd6);
                //prHacer
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("HACER");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("HACER");
                parser.cont++;
                nd.AddHijo(nd7);
                //INSTRUCCIONES
                Nodo nd8 = (Nodo) d;
                nd.AddHijo(nd8);
                //prFinPara
                Nodo nd9 = new Nodo();
                nd9.setEtiqueta("FINPARA");
                nd9.setIdNodo(parser.cont);
                nd9.setValor("FINPARA");
                parser.cont++;
                nd.AddHijo(nd9);
                RESULT = nd;
                nd.pythonCode = "for " + a + " in range(" + nd4.pythonCode + "," + nd6.pythonCode + "):\n\t" + nd8.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARA ::= prPara tvariable FLECHA EXPRESION prHasta EXPRESION prHacer prFinPara 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("PARA");
                nd.setIdNodo(parser.cont);
                nd.setValor("PARA");
                parser.cont++;
                //prPara
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prPara");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prPara");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("VARIABLE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor(a);
                parser.cont++;
                nd.AddHijo(nd2);
                //FLECHA
                Nodo nd3 = (Nodo) e;
                nd.AddHijo(nd3);
                //EXPRESION
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                //prHasta
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("HASTA");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("HASTA");
                parser.cont++;
                nd.AddHijo(nd5);
                //EXPRESION
                Nodo nd6 = (Nodo) c;
                nd.AddHijo(nd6);
                //Hacer
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("HACER");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("HACER");
                parser.cont++;
                nd.AddHijo(nd7);
                //prFinPara
                Nodo nd8 = new Nodo();
                nd8.setEtiqueta("FINPARA");
                nd8.setIdNodo(parser.cont);
                nd8.setValor("FINPARA");
                parser.cont++;
                nd.AddHijo(nd8);
                RESULT = nd;
                nd.pythonCode = "for " + a + " in range(" + nd4.pythonCode + "," + nd6.pythonCode + "):\n";
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARA ::= PARA_SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = (Nodo) a;
                RESULT = nd;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FLECHA ::= trest tmayor 
            {
              Object RESULT =null;
		
        Nodo nd = new Nodo();
        nd.setEtiqueta("FLECHA");
        nd.setIdNodo(parser.cont);
        nd.setValor("->");
        parser.cont++;
        //trest
        Nodo nd2 = new Nodo();
        nd2.setEtiqueta("trest");
        nd2.setIdNodo(parser.cont);
        nd2.setValor("-");
        parser.cont++;
        nd.AddHijo(nd2);
        //tmayor
        Nodo nd3 = new Nodo();
        nd3.setEtiqueta("tmayor");
        nd3.setIdNodo(parser.cont);
        nd3.setValor(">");
        parser.cont++;
        nd.AddHijo(nd3);
        RESULT = nd;
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FLECHA",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARA_SALTO ::= prPara tvariable FLECHA EXPRESION prHasta EXPRESION prCon prIncremental EXPRESION prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                        Nodo nd = new Nodo();
                        nd.setEtiqueta("PARA_SALTO");
                        nd.setIdNodo(parser.cont);
                        nd.setValor("PARA_SALTO");
                        parser.cont++;
                        //prPara
                        Nodo nd1 = new Nodo();
                        nd1.setEtiqueta("prPara");
                        nd1.setIdNodo(parser.cont);
                        nd1.setValor("prPara");
                        parser.cont++;
                        nd.AddHijo(nd1);
                        //tvariable
                        Nodo nd2 = new Nodo();
                        nd2.setEtiqueta("VARIABLE");
                        nd2.setIdNodo(parser.cont);
                        nd2.setValor(a);
                        parser.cont++;
                        nd.AddHijo(nd2);
                        //FLECHA
                        Nodo nd3 = (Nodo) b;
                        nd.AddHijo(nd3);
                        //EXPRESION
                        Nodo nd4 = (Nodo) c;
                        nd.AddHijo(nd4);
                        //prHasta
                        Nodo nd5 = new Nodo();
                        nd5.setEtiqueta("HASTA");
                        nd5.setIdNodo(parser.cont);
                        nd5.setValor("HASTA");
                        parser.cont++;
                        nd.AddHijo(nd5);
                        //prCon
                        Nodo nd6 = new Nodo();
                        nd6.setEtiqueta("CON");
                        nd6.setIdNodo(parser.cont);
                        nd6.setValor("CON");
                        parser.cont++;
                        nd.AddHijo(nd6);
                        //prIncremental
                        Nodo nd7 = new Nodo();
                        nd7.setEtiqueta("INCREMENTAL");
                        nd7.setIdNodo(parser.cont);
                        nd7.setValor("INCREMENTAL");
                        parser.cont++;
                        nd.AddHijo(nd7);
                        //EXPRESION
                        Nodo nd8 = (Nodo) e;
                        nd.AddHijo(nd8);
                        //prHacer
                        Nodo nd9 = new Nodo();
                        nd9.setEtiqueta("HACER");
                        nd9.setIdNodo(parser.cont);
                        nd9.setValor("HACER");
                        parser.cont++;
                        nd.AddHijo(nd9);
                        //INSTRUCCIONES
                        Nodo nd10 = (Nodo) f;
                        nd.AddHijo(nd10);
                        //prFinPara
                        Nodo nd11 = new Nodo();
                        nd11.setEtiqueta("FINPARA");
                        nd11.setIdNodo(parser.cont);
                        nd11.setValor("FINPARA");
                        parser.cont++;
                        nd.AddHijo(nd11);
                        RESULT = nd;
                        nd.pythonCode = "for " + a + " in range(" + nd4.pythonCode + "," + nd8.pythonCode + "):\n\t" + nd10.pythonCode;
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA_SALTO",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MIENTRAS ::= prMientras CONDICION prHacer INSTRUCCIONES prFinMientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("MIENTRAS");
                nd.setIdNodo(parser.cont);
                nd.setValor("MIENTRAS");
                parser.cont++;
                //prMientras
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prMientras");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prMientras");
                parser.cont++;
                nd.AddHijo(nd1);
                //CONDICION
                Nodo nd2 = (Nodo) a;
                nd.AddHijo(nd2);
                //prHacer
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("HACER");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("HACER");
                parser.cont++;
                nd.AddHijo(nd3);
                //INSTRUCCIONES
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                //prFinMientras
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("FINMIENTRAS");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("FINMIENTRAS");
                parser.cont++;
                nd.AddHijo(nd5);
                RESULT = nd;
                nd.pythonCode = "while "  + nd2.pythonCode + ":\n" + "\t" + nd4.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // REPETIR ::= prRepetir INSTRUCCION prHastaQue CONDICION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("REPETIR");
                nd.setIdNodo(parser.cont);
                nd.setValor("REPETIR");
                parser.cont++;
                //prRepetir
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prRepetir");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prRepetir");
                parser.cont++;
                nd.AddHijo(nd1);
                //INSTRUCCION
                Nodo nd2 = (Nodo) a;
                nd.AddHijo(nd2);
                //prHasta
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("HASTA_QUE");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("HASTA_QUE");
                parser.cont++;
                nd.AddHijo(nd3);
                //CONDICION
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                RESULT = nd;
                nd.pythonCode = "while True:\n" + "\t" + nd2.pythonCode + "\t" + "if " + nd4.pythonCode + ":\n" + "\t" + "\t" + "break";
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // REPETIR ::= prRepetir prHastaQue CONDICION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("REPETIR");
                nd.setIdNodo(parser.cont);
                nd.setValor("REPETIR");
                parser.cont++;
                //prRepetir
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prRepetir");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prRepetir");
                parser.cont++;
                nd.AddHijo(nd1);
                //prHasta
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("HASTA_QUE");
                nd2.setIdNodo(parser.cont);
                nd2.setValor("HASTA_QUE");
                parser.cont++;
                nd.AddHijo(nd2);
                //CONDICION
                Nodo nd3 = (Nodo) a;
                nd.AddHijo(nd3);
                RESULT = nd;
                nd.pythonCode = "while True:\n" + "\t" + "if " + nd3.pythonCode + ":\n" + "\t" + "\t" + "break";
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RETORNO ::= prRetornar CONDICION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("RETORNO");
                nd.setIdNodo(parser.cont);
                nd.setValor("RETORNO");
                parser.cont++;
                //prRetornar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prRetornar");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prRetornar");
                parser.cont++;
                nd.AddHijo(nd1);
                //CONDICION
                Nodo nd2 = (Nodo) a;
                nd.AddHijo(nd2);
                //tpuntoycoma
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("tpuntoycoma");
                nd3.setIdNodo(parser.cont);
                nd3.setValor(";");
                parser.cont++;
                nd.AddHijo(nd3);
                RESULT = nd;
                nd.pythonCode = "return " + nd2.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RETORNO ::= prRetornar EXPRESION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("RETORNO");
                nd.setIdNodo(parser.cont);
                nd.setValor("RETORNO");
                parser.cont++;
                //prRetornar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prRetornar");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prRetornar");
                parser.cont++;
                nd.AddHijo(nd1);
                //EXPRESION
                Nodo nd2 = (Nodo) a;
                nd.AddHijo(nd2);
                //tpuntoycoma
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("tpuntoycoma");
                nd3.setIdNodo(parser.cont);
                nd3.setValor(";");
                parser.cont++;
                nd.AddHijo(nd3);
                RESULT = nd;
                nd.pythonCode = "return " + nd2.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // METODO ::= prMetodo tvariable prConParametros pare1 LISTA_PARAMETROS pare2 INSTRUCCIONES prFinMetodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("METODO");
                nd.setIdNodo(parser.cont);
                nd.setValor("METODO");
                parser.cont++;
                //prMetodo
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prMetodo");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prMetodo");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //prConParametros
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("prConParametros");
                nd3.setIdNodo(parser.cont);
                nd3.setValor("prConParametros");
                parser.cont++;
                nd.AddHijo(nd3);
                //LISTA_PARAMETROS
                Nodo nd4 = (Nodo) b;
                nd.AddHijo(nd4);
                //INSTRUCCIONES
                Nodo nd5 = (Nodo) c;
                nd.AddHijo(nd5);
                //prFinMetodo
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("prFinMetodo");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("prFinMetodo");
                parser.cont++;
                nd.AddHijo(nd7);
                nd.pythonCode = "def " + nd2.pythonCode + "(" + nd4.pythonCode + "):\n" + "\t" + nd5.pythonCode;
                RESULT = nd;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // METODO ::= prMetodo tvariable INSTRUCCIONES prFinMetodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("METODO");
                nd.setIdNodo(parser.cont);
                nd.setValor("METODO");
                parser.cont++;
                //prMetodo
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prMetodo");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prMetodo");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //INSTRUCCIONES
                Nodo nd3 = (Nodo) b;
                nd.AddHijo(nd3);
                //prFinMetodo
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("prFinMetodo");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("prFinMetodo");
                parser.cont++;
                nd.AddHijo(nd4);
                RESULT = nd;
                nd.pythonCode = "def " + nd2.pythonCode + "():\n\t" + nd3.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LISTA_PARAMETROS ::= LISTA_PARAMETROS tvariable TIPO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("LISTA_PARAMETROS");
                nd.setIdNodo(parser.cont);
                nd.setValor("LISTA_PARAMETROS");
                parser.cont++;
                //LISTA_PARAMETROS
                Nodo nd4 = (Nodo) c;
                nd.AddHijo(nd4);
                //PARAMETRO
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("PARAMETRO");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("PARAMETRO");
                parser.cont++;
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd1.AddHijo(nd2);
                //TIPO
                Nodo nd5 = (Nodo) b;
                nd1.AddHijo(nd5);
                nd.AddHijo(nd1);
                nd.pythonCode = nd4.pythonCode + nd5.pythonCode + a.toString();
                RESULT = nd;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LISTA_PARAMETROS ::= tvariable TIPO tcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("PARAMETRO");
                nd.setIdNodo(parser.cont);
                nd.setValor("PARAMETRO");
                parser.cont++;
                //tvariable
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("tvariable");
                nd1.setIdNodo(parser.cont);
                nd1.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd1);
                //TIPO
                Nodo nd2 = (Nodo) b;
                nd.AddHijo(nd2);
                //tcoma
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("tcoma");
                nd3.setIdNodo(parser.cont);
                nd3.setValor(",");
                parser.cont++;
                nd.AddHijo(nd3);
                nd.pythonCode = nd2.pythonCode + a.toString() + ",";
                RESULT = nd;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCION ::= prFuncion tvariable TIPO prConParametros pare1 LISTA_PARAMETROS pare2 INSTRUCCIONES prFinFuncion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("FUNCION");
                nd.setIdNodo(parser.cont);
                nd.setValor("FUNCION");
                parser.cont++;
                //prFuncion
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prFuncion");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prFuncion");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //TIPO
                Nodo nd3 = (Nodo) d;
                nd.AddHijo(nd3);
                //prConParametros
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("prConParametros");
                nd4.setIdNodo(parser.cont);
                nd4.setValor("prConParametros");
                parser.cont++;
                nd.AddHijo(nd4);
                //LISTA_PARAMETROS
                Nodo nd5 = (Nodo) b;
                nd.AddHijo(nd5);
                //INSTRUCCIONES
                Nodo nd6 = (Nodo) c;
                nd.AddHijo(nd6);
                //prFinFuncion
                Nodo nd7 = new Nodo();
                nd7.setEtiqueta("prFinFuncion");
                nd7.setIdNodo(parser.cont);
                nd7.setValor("prFinFuncion");
                parser.cont++;
                nd.AddHijo(nd7);
                RESULT = nd;
                nd.pythonCode = "def " + nd2.pythonCode + "(" + nd5.pythonCode + "):\n\t" + nd6.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNCION ::= prFuncion tvariable TIPO INSTRUCCIONES prFinFuncion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("FUNCION");
                nd.setIdNodo(parser.cont);
                nd.setValor("FUNCION");
                parser.cont++;
                //prFuncion
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prFuncion");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prFuncion");
                parser.cont++;
                nd.AddHijo(nd1);
                //tvariable
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //TIPO
                Nodo nd3 = (Nodo) b;
                nd.AddHijo(nd3);
                //INSTRUCCIONES
                Nodo nd4 = (Nodo) c;
                nd.AddHijo(nd4);
                //prFinFuncion
                Nodo nd5 = new Nodo();
                nd5.setEtiqueta("prFinFuncion");
                nd5.setIdNodo(parser.cont);
                nd5.setValor("prFinFuncion");
                parser.cont++;
                nd.AddHijo(nd5);
                RESULT = nd;
                nd.pythonCode = "def " + nd2.pythonCode + "():\n\t" + nd4.pythonCode;
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EJECUTAR ::= prEjecutar tvariable pare1 pare2 tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("EJECUTAR");
                nd.setIdNodo(parser.cont);
                nd.setValor("EJECUTAR");
                parser.cont++;
                //prEjecutar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prEjecutar");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prEjecutar");
                parser.cont++;        
                nd.AddHijo(nd1);
                //VARIABLE
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //tpuntoycoma
                Nodo nd3 = new Nodo();
                nd3.setEtiqueta("tpuntoycoma");
                nd3.setIdNodo(parser.cont);
                nd3.setValor(";");
                parser.cont++;
                nd.AddHijo(nd3);
                RESULT = nd;
                nd.pythonCode = nd2.pythonCode + "()";
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EJECUTAR ::= prEjecutar tvariable pare1 LISTA_PARAMETROS pare2 tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		
                Nodo nd = new Nodo();
                nd.setEtiqueta("EJECUTAR");
                nd.setIdNodo(parser.cont);
                nd.setValor("EJECUTAR");
                parser.cont++;
                //prEjecutar
                Nodo nd1 = new Nodo();
                nd1.setEtiqueta("prEjecutar");
                nd1.setIdNodo(parser.cont);
                nd1.setValor("prEjecutar");
                parser.cont++;
                nd.AddHijo(nd1);
                //VARIABLE
                Nodo nd2 = new Nodo();
                nd2.setEtiqueta("tvariable");
                nd2.setIdNodo(parser.cont);
                nd2.setValor((String) a);
                parser.cont++;
                nd.AddHijo(nd2);
                //LISTA_PARAMETROS
                Nodo nd3 = (Nodo) b;
                nd.AddHijo(nd3);
                //tpuntoycoma
                Nodo nd4 = new Nodo();
                nd4.setEtiqueta("tpuntoycoma");
                nd4.setIdNodo(parser.cont);
                nd4.setValor(";");
                parser.cont++;
                nd.AddHijo(nd4);
                RESULT = nd;
                nd.pythonCode = nd2.pythonCode + "(" + nd3.pythonCode + ");";
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IMPRIMIR ::= prImprimir VARIABLES tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IMPRIMIR ::= prImprimir pare1 VARIABLES pare2 tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IMPRIMIR ::= prImprimir EXPRESION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                RESULT = nd;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IMPRIMIR ::= prImprimir pare1 EXPRESION pare2 tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IMPRIMIR ::= prImprimir CONDICION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IMPRIMIR ::= prImprimir pare1 CONDICION pare2 tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		
                Nodo nd = new Nodo(); 
                nd.setEtiqueta("IMPRIMIR");
                nd.setIdNodo(parser.cont); 
                parser.cont++;
                nd.AddHijo((Nodo) a);
                RESULT = nd;
                nd.pythonCode = "print(" + ((Nodo) a).pythonCode + ")";
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IMPRIMIR_NL ::= prImprimirNl VARIABLES tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + "\"\\n\")";
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IMPRIMIR_NL ::= prImprimirNl pare1 VARIABLES pare2 tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + "\"\\n\")";
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IMPRIMIR_NL ::= prImprimirNl EXPRESION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + "\"\\n\")";
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IMPRIMIR_NL ::= prImprimirNl pare1 EXPRESION pare2 tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + "\"\\n\")";
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IMPRIMIR_NL ::= prImprimirNl CONDICION tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + "\"\\n\")";
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IMPRIMIR_NL ::= prImprimirNl pare1 CONDICION pare2 tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		
                        Nodo nd = new Nodo(); 
                        nd.setEtiqueta("IMPRIMIR_NL");
                        nd.setIdNodo(parser.cont); 
                        parser.cont++;
                        nd.AddHijo((Nodo) a);
                        RESULT = nd;
                        nd.pythonCode = "print(" + ((Nodo) a).pythonCode + "\"\\n\")";
                        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
