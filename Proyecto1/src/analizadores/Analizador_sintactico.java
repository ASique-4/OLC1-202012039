
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\005\000\002\017" +
    "\004\000\002\043\002\000\002\044\002\000\002\017\006" +
    "\000\002\045\002\000\002\017\005\000\002\046\002\000" +
    "\002\017\005\000\002\047\002\000\002\017\005\000\002" +
    "\050\002\000\002\017\005\000\002\051\002\000\002\017" +
    "\005\000\002\052\002\000\002\017\005\000\002\053\002" +
    "\000\002\017\005\000\002\054\002\000\002\017\005\000" +
    "\002\055\002\000\002\017\005\000\002\056\002\000\002" +
    "\017\005\000\002\057\002\000\002\017\005\000\002\060" +
    "\002\000\002\017\005\000\002\017\004\000\002\017\004" +
    "\000\002\061\002\000\002\017\005\000\002\017\002\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\014\011\000\002\014" +
    "\011\000\002\014\011\000\002\014\011\000\002\014\011" +
    "\000\002\014\011\000\002\014\011\000\002\014\011\000" +
    "\002\014\011\000\002\014\011\000\002\014\011\000\002" +
    "\014\011\000\002\014\011\000\002\014\011\000\002\015" +
    "\003\000\002\016\003\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\024\005\000" +
    "\002\025\010\000\002\025\007\000\002\010\003\000\002" +
    "\010\003\000\002\062\002\000\002\011\005\000\002\011" +
    "\002\000\002\063\002\000\002\012\006\000\002\012\004" +
    "\000\002\064\002\000\002\007\010\000\002\007\010\000" +
    "\002\007\010\000\002\007\011\000\002\021\005\000\002" +
    "\021\004\000\002\023\007\000\002\023\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\013\003" +
    "\000\002\004\005\000\002\004\004\000\002\005\005\000" +
    "\002\005\004\000\002\006\005\000\002\027\013\000\002" +
    "\026\004\000\002\030\016\000\002\031\007\000\002\032" +
    "\006\000\002\033\004\000\002\034\011\000\002\034\006" +
    "\000\002\035\005\000\002\035\006\000\002\036\011\000" +
    "\002\036\007\000\002\037\007\000\002\037\010\000\002" +
    "\040\005\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\015\004\001\002\000\046\003\036\005" +
    "\uffbe\016\uffdf\023\023\024\042\026\037\031\ufffe\036\026" +
    "\040\022\045\046\047\025\051\011\052\032\055\015\057" +
    "\045\060\044\061\024\063\033\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\054\003\ufff1\005" +
    "\ufff1\016\ufff1\023\ufff1\024\ufff1\026\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\040\ufff1\045\ufff1\047\ufff1\051" +
    "\ufff1\052\ufff1\055\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1" +
    "\001\002\000\054\003\ufff9\005\ufff9\016\ufff9\023\ufff9\024" +
    "\ufff9\026\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\040\ufff9\045\ufff9\047\ufff9\051\ufff9\052\ufff9\055\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\063\ufff9\001\002\000\006\063\063" +
    "\064\062\001\002\000\054\003\036\005\uffbe\016\uffdf\023" +
    "\023\024\042\026\037\031\ufffe\033\uffdf\034\uffdf\035\uffdf" +
    "\036\026\040\022\045\046\047\025\051\011\052\032\055" +
    "\015\057\045\060\044\061\024\063\033\001\002\000\054" +
    "\003\036\005\uffbe\016\uffdf\023\023\024\042\026\037\031" +
    "\ufffe\033\uffdf\034\uffdf\035\uffdf\036\026\040\022\045\046" +
    "\047\025\051\011\052\032\055\015\057\045\060\044\061" +
    "\024\063\033\001\002\000\054\003\uffe5\005\uffe5\016\uffe5" +
    "\023\uffe5\024\uffe5\026\uffe5\031\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\045\uffe5\047\uffe5\051\uffe5\052\uffe5" +
    "\055\uffe5\057\uffe5\060\uffe5\061\uffe5\063\uffe5\001\002\000" +
    "\004\063\055\001\002\000\004\031\301\001\002\000\054" +
    "\003\uffeb\005\uffeb\016\uffeb\023\uffeb\024\uffeb\026\uffeb\031" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb\045\uffeb" +
    "\047\uffeb\051\uffeb\052\uffeb\055\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\063\uffeb\001\002\000\054\003\ufff5\005\ufff5\016\ufff5" +
    "\023\ufff5\024\ufff5\026\ufff5\031\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\040\ufff5\045\ufff5\047\ufff5\051\ufff5\052\ufff5" +
    "\055\ufff5\057\ufff5\060\ufff5\061\ufff5\063\ufff5\001\002\000" +
    "\054\003\ufff3\005\ufff3\016\ufff3\023\ufff3\024\ufff3\026\ufff3" +
    "\031\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\040\ufff3\045" +
    "\ufff3\047\ufff3\051\ufff3\052\ufff3\055\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\063\ufff3\001\002\000\004\063\055\001\002\000" +
    "\054\003\uffcb\005\uffcb\016\uffcb\023\uffcb\024\uffcb\026\uffcb" +
    "\031\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\045" +
    "\uffcb\047\uffcb\051\uffcb\052\uffcb\055\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\063\uffcb\001\002\000\006\063\063\064\062\001" +
    "\002\000\004\063\055\001\002\000\004\017\240\001\002" +
    "\000\054\003\uffe9\005\uffe9\016\uffe9\023\uffe9\024\uffe9\026" +
    "\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9" +
    "\045\uffe9\047\uffe9\051\uffe9\052\uffe9\055\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\063\uffe9\001\002\000\054\003\ufff7\005\ufff7" +
    "\016\ufff7\023\ufff7\024\ufff7\026\ufff7\031\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\040\ufff7\045\ufff7\047\ufff7\051\ufff7" +
    "\052\ufff7\055\ufff7\057\ufff7\060\ufff7\061\ufff7\063\ufff7\001" +
    "\002\000\004\016\233\001\002\000\004\063\055\001\002" +
    "\000\006\005\117\021\uffc0\001\002\000\054\003\036\005" +
    "\uffbe\016\uffdf\023\023\024\042\026\037\031\ufffe\033\uffdf" +
    "\034\uffdf\035\uffdf\036\026\040\022\045\046\047\025\051" +
    "\011\052\032\055\015\057\045\060\044\061\024\063\033" +
    "\001\002\000\054\003\uffed\005\uffed\016\uffed\023\uffed\024" +
    "\uffed\026\uffed\031\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\040\uffed\045\uffed\047\uffed\051\uffed\052\uffed\055\uffed\057" +
    "\uffed\060\uffed\061\uffed\063\uffed\001\002\000\054\003\uffe1" +
    "\005\uffe1\016\uffe1\023\uffe1\024\uffe1\026\uffe1\031\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1\045\uffe1\047\uffe1" +
    "\051\uffe1\052\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1\063" +
    "\uffe1\001\002\000\006\027\uffbe\063\127\001\002\000\054" +
    "\003\ufffb\005\ufffb\016\ufffb\023\ufffb\024\ufffb\026\ufffb\031" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\040\ufffb\045\ufffb" +
    "\047\ufffb\051\ufffb\052\ufffb\055\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\063\ufffb\001\002\000\004\005\117\001\002\000\054" +
    "\003\uffca\005\uffca\016\uffca\023\uffca\024\uffca\026\uffca\031" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\040\uffca\045\uffca" +
    "\047\uffca\051\uffca\052\uffca\055\uffca\057\uffca\060\uffca\061" +
    "\uffca\063\uffca\001\002\000\054\003\uffef\005\uffef\016\uffef" +
    "\023\uffef\024\uffef\026\uffef\031\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\040\uffef\045\uffef\047\uffef\051\uffef\052\uffef" +
    "\055\uffef\057\uffef\060\uffef\061\uffef\063\uffef\001\002\000" +
    "\006\063\063\064\062\001\002\000\004\063\055\001\002" +
    "\000\004\063\052\001\002\000\054\003\uffe7\005\uffe7\016" +
    "\uffe7\023\uffe7\024\uffe7\026\uffe7\031\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\040\uffe7\045\uffe7\047\uffe7\051\uffe7\052" +
    "\uffe7\055\uffe7\057\uffe7\060\uffe7\061\uffe7\063\uffe7\001\002" +
    "\000\054\003\036\005\uffbe\016\uffdf\023\023\024\042\026" +
    "\037\031\ufffe\033\uffdf\034\uffdf\035\uffdf\036\026\040\022" +
    "\045\046\047\025\051\011\052\032\055\015\057\045\060" +
    "\044\061\024\063\033\001\002\000\012\016\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\001\002\000\004\062\071\001\002\000" +
    "\004\037\054\001\002\000\004\063\055\001\002\000\016" +
    "\005\uffae\013\uffae\054\uffae\062\uffae\063\uffae\064\uffae\001" +
    "\002\000\004\025\070\001\002\000\006\046\066\063\055" +
    "\001\002\000\004\062\061\001\002\000\006\063\063\064" +
    "\062\001\002\000\062\003\uffc1\005\uffc1\016\uffc1\020\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\031\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\045\uffc1\047\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1\063" +
    "\uffc1\001\002\000\062\003\uffc2\005\uffc2\016\uffc2\020\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\031\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\040\uffc2\045\uffc2\047\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2\063" +
    "\uffc2\001\002\000\004\025\uffa9\001\002\000\004\025\067" +
    "\001\002\000\054\003\uffa5\005\uffa5\016\uffa5\023\uffa5\024" +
    "\uffa5\026\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\040\uffa5\045\uffa5\047\uffa5\051\uffa5\052\uffa5\055\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\063\uffa5\001\002\000\012\041\uffab" +
    "\042\uffab\046\uffab\063\uffab\001\002\000\012\041\uffaa\042" +
    "\uffaa\046\uffaa\063\uffaa\001\002\000\004\062\072\001\002" +
    "\000\010\004\075\063\073\064\074\001\002\000\060\003" +
    "\uffb1\005\uffb1\016\uffb1\023\uffb1\024\uffb1\026\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\045\uffb1\047\uffb1\051\uffb1\052\uffb1\055\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\063\uffb1\001\002\000\060\003\uffb0\005" +
    "\uffb0\016\uffb0\023\uffb0\024\uffb0\026\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\045" +
    "\uffb0\047\uffb0\051\uffb0\052\uffb0\055\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\063\uffb0\001\002\000\060\003\uffaf\005\uffaf\016" +
    "\uffaf\023\uffaf\024\uffaf\026\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\045\uffaf\047" +
    "\uffaf\051\uffaf\052\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\063\uffaf\001\002\000\004\013\077\001\002\000\006\014" +
    "\101\063\055\001\002\000\004\014\110\001\002\000\004" +
    "\025\107\001\002\000\004\064\103\001\002\000\006\021" +
    "\105\063\055\001\002\000\010\014\uffa0\030\uffa0\063\uffa0" +
    "\001\002\000\004\063\055\001\002\000\010\014\uff9f\030" +
    "\uff9f\063\uff9f\001\002\000\054\003\uff9c\005\uff9c\016\uff9c" +
    "\023\uff9c\024\uff9c\026\uff9c\031\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\040\uff9c\045\uff9c\047\uff9c\051\uff9c\052\uff9c" +
    "\055\uff9c\057\uff9c\060\uff9c\061\uff9c\063\uff9c\001\002\000" +
    "\004\025\111\001\002\000\054\003\uff9b\005\uff9b\016\uff9b" +
    "\023\uff9b\024\uff9b\026\uff9b\031\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\040\uff9b\045\uff9b\047\uff9b\051\uff9b\052\uff9b" +
    "\055\uff9b\057\uff9b\060\uff9b\061\uff9b\063\uff9b\001\002\000" +
    "\004\025\113\001\002\000\054\003\uff9a\005\uff9a\016\uff9a" +
    "\023\uff9a\024\uff9a\026\uff9a\031\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\040\uff9a\045\uff9a\047\uff9a\051\uff9a\052\uff9a" +
    "\055\uff9a\057\uff9a\060\uff9a\061\uff9a\063\uff9a\001\002\000" +
    "\054\003\036\005\uffbe\016\uffdf\023\023\024\042\026\037" +
    "\031\ufffe\033\uffdf\034\uffdf\035\uffdf\036\026\040\022\045" +
    "\046\047\025\051\011\052\032\055\015\057\045\060\044" +
    "\061\024\063\033\001\002\000\012\016\uffee\033\uffee\034" +
    "\uffee\035\uffee\001\002\000\006\004\122\064\121\001\002" +
    "\000\004\022\120\001\002\000\006\004\uffa7\064\uffa7\001" +
    "\002\000\004\025\124\001\002\000\004\025\123\001\002" +
    "\000\054\003\uffc6\005\uffc6\016\uffc6\023\uffc6\024\uffc6\026" +
    "\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6" +
    "\045\uffc6\047\uffc6\051\uffc6\052\uffc6\055\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\063\uffc6\001\002\000\054\003\uffc8\005\uffc8" +
    "\016\uffc8\023\uffc8\024\uffc8\026\uffc8\031\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\040\uffc8\045\uffc8\047\uffc8\051\uffc8" +
    "\052\uffc8\055\uffc8\057\uffc8\060\uffc8\061\uffc8\063\uffc8\001" +
    "\002\000\054\003\036\005\uffbe\016\uffdf\023\023\024\042" +
    "\026\037\031\ufffe\033\uffdf\034\uffdf\035\uffdf\036\026\040" +
    "\022\045\046\047\025\051\011\052\032\055\015\057\045" +
    "\060\044\061\024\063\033\001\002\000\012\016\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\001\002\000\006\021\uffc0\027\157" +
    "\001\002\000\004\027\131\001\002\000\014\070\132\071" +
    "\136\072\133\073\135\074\134\001\002\000\004\030\uffde" +
    "\001\002\000\004\030\uffdc\001\002\000\004\030\uffda\001" +
    "\002\000\004\030\uffdb\001\002\000\004\030\uffdd\001\002" +
    "\000\004\030\140\001\002\000\020\004\144\063\142\064" +
    "\141\075\143\076\145\102\146\106\147\001\002\000\004" +
    "\025\156\001\002\000\004\025\155\001\002\000\004\025" +
    "\154\001\002\000\004\025\153\001\002\000\004\025\152" +
    "\001\002\000\004\025\151\001\002\000\004\025\150\001" +
    "\002\000\054\003\uffcf\005\uffcf\016\uffcf\023\uffcf\024\uffcf" +
    "\026\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\040" +
    "\uffcf\045\uffcf\047\uffcf\051\uffcf\052\uffcf\055\uffcf\057\uffcf" +
    "\060\uffcf\061\uffcf\063\uffcf\001\002\000\054\003\uffce\005" +
    "\uffce\016\uffce\023\uffce\024\uffce\026\uffce\031\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\040\uffce\045\uffce\047\uffce\051" +
    "\uffce\052\uffce\055\uffce\057\uffce\060\uffce\061\uffce\063\uffce" +
    "\001\002\000\054\003\uffcc\005\uffcc\016\uffcc\023\uffcc\024" +
    "\uffcc\026\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\040\uffcc\045\uffcc\047\uffcc\051\uffcc\052\uffcc\055\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\001\002\000\054\003\uffd2" +
    "\005\uffd2\016\uffd2\023\uffd2\024\uffd2\026\uffd2\031\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\045\uffd2\047\uffd2" +
    "\051\uffd2\052\uffd2\055\uffd2\057\uffd2\060\uffd2\061\uffd2\063" +
    "\uffd2\001\002\000\054\003\uffcd\005\uffcd\016\uffcd\023\uffcd" +
    "\024\uffcd\026\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\040\uffcd\045\uffcd\047\uffcd\051\uffcd\052\uffcd\055\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\063\uffcd\001\002\000\054\003" +
    "\uffd1\005\uffd1\016\uffd1\023\uffd1\024\uffd1\026\uffd1\031\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\045\uffd1\047" +
    "\uffd1\051\uffd1\052\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1" +
    "\063\uffd1\001\002\000\054\003\uffd0\005\uffd0\016\uffd0\023" +
    "\uffd0\024\uffd0\026\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\040\uffd0\045\uffd0\047\uffd0\051\uffd0\052\uffd0\055" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\063\uffd0\001\002\000\014" +
    "\070\132\071\136\072\133\073\135\074\134\001\002\000" +
    "\004\021\162\001\002\000\006\005\uffbf\027\uffbf\001\002" +
    "\000\004\063\163\001\002\000\010\005\uffbb\021\uffbd\027" +
    "\uffbb\001\002\000\004\021\162\001\002\000\006\005\uffbc" +
    "\027\uffbc\001\002\000\004\030\167\001\002\000\020\004" +
    "\173\063\171\064\170\075\172\076\174\102\176\106\175" +
    "\001\002\000\004\025\205\001\002\000\004\025\204\001" +
    "\002\000\004\025\203\001\002\000\004\025\202\001\002" +
    "\000\004\025\201\001\002\000\004\025\200\001\002\000" +
    "\004\025\177\001\002\000\054\003\uffd4\005\uffd4\016\uffd4" +
    "\023\uffd4\024\uffd4\026\uffd4\031\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\040\uffd4\045\uffd4\047\uffd4\051\uffd4\052\uffd4" +
    "\055\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4\001\002\000" +
    "\054\003\uffd3\005\uffd3\016\uffd3\023\uffd3\024\uffd3\026\uffd3" +
    "\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\045" +
    "\uffd3\047\uffd3\051\uffd3\052\uffd3\055\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\063\uffd3\001\002\000\054\003\uffd7\005\uffd7\016" +
    "\uffd7\023\uffd7\024\uffd7\026\uffd7\031\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\040\uffd7\045\uffd7\047\uffd7\051\uffd7\052" +
    "\uffd7\055\uffd7\057\uffd7\060\uffd7\061\uffd7\063\uffd7\001\002" +
    "\000\054\003\uffd8\005\uffd8\016\uffd8\023\uffd8\024\uffd8\026" +
    "\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8" +
    "\045\uffd8\047\uffd8\051\uffd8\052\uffd8\055\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\063\uffd8\001\002\000\054\003\uffd6\005\uffd6" +
    "\016\uffd6\023\uffd6\024\uffd6\026\uffd6\031\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\040\uffd6\045\uffd6\047\uffd6\051\uffd6" +
    "\052\uffd6\055\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6\001" +
    "\002\000\054\003\uffd5\005\uffd5\016\uffd5\023\uffd5\024\uffd5" +
    "\026\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040" +
    "\uffd5\045\uffd5\047\uffd5\051\uffd5\052\uffd5\055\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\063\uffd5\001\002\000\054\003\uffd9\005" +
    "\uffd9\016\uffd9\023\uffd9\024\uffd9\026\uffd9\031\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\040\uffd9\045\uffd9\047\uffd9\051" +
    "\uffd9\052\uffd9\055\uffd9\057\uffd9\060\uffd9\061\uffd9\063\uffd9" +
    "\001\002\000\054\003\036\005\uffbe\016\uffdf\023\023\024" +
    "\042\026\037\031\ufffe\033\uffdf\034\uffdf\035\uffdf\036\026" +
    "\040\022\045\046\047\025\051\011\052\032\055\015\057" +
    "\045\060\044\061\024\063\033\001\002\000\012\016\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\001\002\000\054\003\036\005" +
    "\uffbe\016\uffdf\023\023\024\042\026\037\031\ufffe\033\uffdf" +
    "\034\uffdf\035\uffdf\036\026\040\022\045\046\047\025\051" +
    "\011\052\032\055\015\057\045\060\044\061\024\063\033" +
    "\001\002\000\012\016\uffec\033\uffec\034\uffec\035\uffec\001" +
    "\002\000\012\016\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002" +
    "\000\006\004\215\064\214\001\002\000\004\025\217\001" +
    "\002\000\004\025\216\001\002\000\054\003\uffc7\005\uffc7" +
    "\016\uffc7\023\uffc7\024\uffc7\026\uffc7\031\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\040\uffc7\045\uffc7\047\uffc7\051\uffc7" +
    "\052\uffc7\055\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7\001" +
    "\002\000\054\003\uffc9\005\uffc9\016\uffc9\023\uffc9\024\uffc9" +
    "\026\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\040" +
    "\uffc9\045\uffc9\047\uffc9\051\uffc9\052\uffc9\055\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\063\uffc9\001\002\000\006\054\221\063" +
    "\055\001\002\000\004\063\055\001\002\000\004\053\226" +
    "\001\002\000\004\025\224\001\002\000\014\017\uffac\053" +
    "\uffac\056\uffac\063\055\065\uffac\001\002\000\012\017\uffad" +
    "\053\uffad\056\uffad\065\uffad\001\002\000\054\003\uffa1\005" +
    "\uffa1\016\uffa1\023\uffa1\024\uffa1\026\uffa1\031\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\040\uffa1\045\uffa1\047\uffa1\051" +
    "\uffa1\052\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\063\uffa1" +
    "\001\002\000\004\030\230\001\002\000\006\063\063\064" +
    "\062\001\002\000\004\053\232\001\002\000\054\003\uffa2" +
    "\005\uffa2\016\uffa2\023\uffa2\024\uffa2\026\uffa2\031\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\040\uffa2\045\uffa2\047\uffa2" +
    "\051\uffa2\052\uffa2\055\uffa2\057\uffa2\060\uffa2\061\uffa2\063" +
    "\uffa2\001\002\000\004\002\000\001\002\000\054\003\036" +
    "\005\uffbe\016\uffdf\023\023\024\042\026\037\031\ufffe\033" +
    "\uffdf\034\uffdf\035\uffdf\036\026\040\022\045\046\047\025" +
    "\051\011\052\032\055\015\057\045\060\044\061\024\063" +
    "\033\001\002\000\012\016\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\001\002\000\054\003\036\005\uffbe\016\uffdf\023\023\024" +
    "\042\026\037\031\ufffe\033\uffdf\034\uffdf\035\uffdf\036\026" +
    "\040\022\045\046\047\025\051\011\052\032\055\015\057" +
    "\045\060\044\061\024\063\033\001\002\000\012\016\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\001\002\000\006\063\063\064" +
    "\062\001\002\000\004\065\242\001\002\000\054\003\uffc5" +
    "\005\uffc5\016\uffc5\023\uffc5\024\uffc5\026\uffc5\031\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\045\uffc5\047\uffc5" +
    "\051\uffc5\052\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\063" +
    "\uffc5\001\002\000\004\020\244\001\002\000\004\032\245" +
    "\001\002\000\004\063\055\001\002\000\006\017\240\065" +
    "\uffc3\001\002\000\004\065\uffc4\001\002\000\006\041\251" +
    "\063\055\001\002\000\004\063\052\001\002\000\054\003" +
    "\uffa4\005\uffa4\016\uffa4\023\uffa4\024\uffa4\026\uffa4\031\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\040\uffa4\045\uffa4\047" +
    "\uffa4\051\uffa4\052\uffa4\055\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\063\uffa4\001\002\000\004\025\254\001\002\000\054\003" +
    "\uff99\005\uff99\016\uff99\023\uff99\024\uff99\026\uff99\031\uff99" +
    "\033\uff99\034\uff99\035\uff99\036\uff99\040\uff99\045\uff99\047" +
    "\uff99\051\uff99\052\uff99\055\uff99\057\uff99\060\uff99\061\uff99" +
    "\063\uff99\001\002\000\004\005\117\001\002\000\004\004" +
    "\257\001\002\000\004\041\260\001\002\000\004\004\261" +
    "\001\002\000\006\037\262\043\263\001\002\000\004\063" +
    "\055\001\002\000\004\044\264\001\002\000\004\004\265" +
    "\001\002\000\004\037\266\001\002\000\004\063\055\001" +
    "\002\000\006\042\270\063\055\001\002\000\054\003\uffa6" +
    "\005\uffa6\016\uffa6\023\uffa6\024\uffa6\026\uffa6\031\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\036\uffa6\040\uffa6\045\uffa6\047\uffa6" +
    "\051\uffa6\052\uffa6\055\uffa6\057\uffa6\060\uffa6\061\uffa6\063" +
    "\uffa6\001\002\000\006\042\272\063\055\001\002\000\054" +
    "\003\uffa8\005\uffa8\016\uffa8\023\uffa8\024\uffa8\026\uffa8\031" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\040\uffa8\045\uffa8" +
    "\047\uffa8\051\uffa8\052\uffa8\055\uffa8\057\uffa8\060\uffa8\061" +
    "\uffa8\063\uffa8\001\002\000\054\003\036\005\uffbe\016\uffdf" +
    "\023\023\024\042\026\037\031\ufffe\033\uffdf\034\uffdf\035" +
    "\uffdf\036\026\040\022\045\046\047\025\051\011\052\032" +
    "\055\015\057\045\060\044\061\024\063\033\001\002\000" +
    "\012\016\ufff2\033\ufff2\034\ufff2\035\ufff2\001\002\000\054" +
    "\003\036\005\uffbe\016\uffdf\023\023\024\042\026\037\031" +
    "\ufffe\033\uffdf\034\uffdf\035\uffdf\036\026\040\022\045\046" +
    "\047\025\051\011\052\032\055\015\057\045\060\044\061" +
    "\024\063\033\001\002\000\012\016\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\001\002\000\054\003\036\005\uffbe\016\uffdf\023" +
    "\023\024\042\026\037\031\ufffe\033\uffdf\034\uffdf\035\uffdf" +
    "\036\026\040\022\045\046\047\025\051\011\052\032\055" +
    "\015\057\045\060\044\061\024\063\033\001\002\000\012" +
    "\016\uffea\033\uffea\034\uffea\035\uffea\001\002\000\004\063" +
    "\052\001\002\000\054\003\ufffd\005\ufffd\016\ufffd\023\ufffd" +
    "\024\ufffd\026\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\040\ufffd\045\ufffd\047\ufffd\051\ufffd\052\ufffd\055\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\063\ufffd\001\002\000\054\003" +
    "\036\005\uffbe\016\uffdf\023\023\024\042\026\037\031\ufffe" +
    "\033\uffdf\034\uffdf\035\uffdf\036\026\040\022\045\046\047" +
    "\025\051\011\052\032\055\015\057\045\060\044\061\024" +
    "\063\033\001\002\000\012\016\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\001\002\000\004\032\306\001\002\000\052\003\036" +
    "\005\uffbe\023\023\024\042\026\037\031\ufffe\033\uffdf\034" +
    "\uffdf\035\uffdf\036\026\040\022\045\046\047\025\051\011" +
    "\052\032\055\015\057\045\060\044\061\024\063\033\001" +
    "\002\000\010\033\uffba\034\314\035\310\001\002\000\050" +
    "\003\036\005\uffbe\023\023\024\042\026\037\031\ufffe\033" +
    "\uffdf\035\uffdf\036\026\040\022\045\046\047\025\051\011" +
    "\052\032\055\015\057\045\060\044\061\024\063\033\001" +
    "\002\000\004\033\325\001\002\000\006\033\323\035\310" +
    "\001\002\000\004\033\321\001\002\000\004\063\052\001" +
    "\002\000\004\032\316\001\002\000\052\003\036\005\uffbe" +
    "\023\023\024\042\026\037\031\ufffe\033\uffdf\034\uffdf\035" +
    "\uffdf\036\026\040\022\045\046\047\025\051\011\052\032" +
    "\055\015\057\045\060\044\061\024\063\033\001\002\000" +
    "\010\033\uffb2\034\314\035\uffb2\001\002\000\006\033\uffb3" +
    "\035\uffb3\001\002\000\054\003\uffb9\005\uffb9\016\uffb9\023" +
    "\uffb9\024\uffb9\026\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\040\uffb9\045\uffb9\047\uffb9\051\uffb9\052\uffb9\055" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9\001\002\000\004" +
    "\033\324\001\002\000\054\003\uffb8\005\uffb8\016\uffb8\023" +
    "\uffb8\024\uffb8\026\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\040\uffb8\045\uffb8\047\uffb8\051\uffb8\052\uffb8\055" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\063\uffb8\001\002\000\054" +
    "\003\uffb6\005\uffb6\016\uffb6\023\uffb6\024\uffb6\026\uffb6\031" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6\045\uffb6" +
    "\047\uffb6\051\uffb6\052\uffb6\055\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\063\uffb6\001\002\000\054\003\uffb7\005\uffb7\016\uffb7" +
    "\023\uffb7\024\uffb7\026\uffb7\031\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\040\uffb7\045\uffb7\047\uffb7\051\uffb7\052\uffb7" +
    "\055\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\001\002\000" +
    "\006\033\uffb4\035\310\001\002\000\004\033\uffb5\001\002" +
    "\000\004\064\331\001\002\000\006\054\332\063\055\001" +
    "\002\000\004\063\055\001\002\000\004\056\334\001\002" +
    "\000\054\003\uff9d\005\uff9d\016\uff9d\023\uff9d\024\uff9d\026" +
    "\uff9d\031\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\040\uff9d" +
    "\045\uff9d\047\uff9d\051\uff9d\052\uff9d\055\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\063\uff9d\001\002\000\004\063\055\001\002" +
    "\000\004\056\337\001\002\000\054\003\uff9e\005\uff9e\016" +
    "\uff9e\023\uff9e\024\uff9e\026\uff9e\031\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\040\uff9e\045\uff9e\047\uff9e\051\uff9e\052" +
    "\uff9e\055\uff9e\057\uff9e\060\uff9e\061\uff9e\063\uff9e\001\002" +
    "\000\054\003\036\005\uffbe\016\uffdf\023\023\024\042\026" +
    "\037\031\ufffe\033\uffdf\034\uffdf\035\uffdf\036\026\040\022" +
    "\045\046\047\025\051\011\052\032\055\015\057\045\060" +
    "\044\061\024\063\033\001\002\000\012\016\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\001\002\000\012\016\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\001\002\000\012\016\uffff\033\uffff\034\uffff" +
    "\035\uffff\001\002\000\054\003\uffa3\005\uffa3\016\uffa3\023" +
    "\uffa3\024\uffa3\026\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\040\uffa3\045\uffa3\047\uffa3\051\uffa3\052\uffa3\055" +
    "\uffa3\057\uffa3\060\uffa3\061\uffa3\063\uffa3\001\002\000\054" +
    "\003\036\005\uffbe\016\uffdf\023\023\024\042\026\037\031" +
    "\ufffe\033\uffdf\034\uffdf\035\uffdf\036\026\040\022\045\046" +
    "\047\025\051\011\052\032\055\015\057\045\060\044\061" +
    "\024\063\033\001\002\000\012\016\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\001\002\000\054\003\036\005\uffbe\016\uffdf\023" +
    "\023\024\042\026\037\031\ufffe\033\uffdf\034\uffdf\035\uffdf" +
    "\036\026\040\022\045\046\047\025\051\011\052\032\055" +
    "\015\057\045\060\044\061\024\063\033\001\002\000\012" +
    "\016\ufff0\033\ufff0\034\ufff0\035\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\002\004\001\001\000\046\011\040\014" +
    "\011\015\037\016\007\017\030\020\027\024\017\027\020" +
    "\030\006\031\042\032\034\033\016\034\026\036\046\037" +
    "\013\040\012\041\033\043\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\346\001\001\000\004\046" +
    "\344\001\001\000\004\010\343\001\001\000\046\011\040" +
    "\014\011\015\037\016\007\017\342\020\027\024\017\027" +
    "\020\030\006\031\042\032\034\033\016\034\026\036\046" +
    "\037\013\040\012\041\033\043\015\001\001\000\046\011" +
    "\040\014\011\015\037\016\007\017\341\020\027\024\017" +
    "\027\020\030\006\031\042\032\034\033\016\034\026\036" +
    "\046\037\013\040\012\041\033\043\015\001\001\000\004" +
    "\060\337\001\001\000\004\013\327\001\001\000\004\007" +
    "\301\001\001\000\004\055\276\001\001\000\004\050\274" +
    "\001\001\000\004\051\272\001\001\000\004\013\254\001" +
    "\001\000\002\001\001\000\004\010\252\001\001\000\010" +
    "\005\247\006\055\013\057\001\001\000\004\025\240\001" +
    "\001\000\004\056\235\001\001\000\004\047\233\001\001" +
    "\000\002\001\001\000\004\013\217\001\001\000\006\026" +
    "\212\062\157\001\001\000\046\011\040\014\011\015\037" +
    "\016\007\017\211\020\027\024\017\027\020\030\006\031" +
    "\042\032\034\033\016\034\026\036\046\037\013\040\012" +
    "\041\033\043\015\001\001\000\004\054\207\001\001\000" +
    "\004\061\205\001\001\000\004\011\127\001\001\000\004" +
    "\045\124\001\001\000\004\026\115\001\001\000\002\001" +
    "\001\000\004\053\113\001\001\000\004\010\111\001\001" +
    "\000\004\013\075\001\001\000\004\003\052\001\001\000" +
    "\004\057\047\001\001\000\046\011\040\014\011\015\037" +
    "\016\007\017\050\020\027\024\017\027\020\030\006\031" +
    "\042\032\034\033\016\034\026\036\046\037\013\040\012" +
    "\041\033\043\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\056\006\055\013\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\064\013\057\001\001\000\002\001\001\000\004\010\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\101\035\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\101" +
    "\035\103\001\001\000\002\001\001\000\006\013\101\035" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\011\040\014\011\015\037\016\007\017\114" +
    "\020\027\024\017\027\020\030\006\031\042\032\034\033" +
    "\016\034\026\036\046\037\013\040\012\041\033\043\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\011\040\014" +
    "\011\015\037\016\007\017\125\020\027\024\017\027\020" +
    "\030\006\031\042\032\034\033\016\034\026\036\046\037" +
    "\013\040\012\041\033\043\015\001\001\000\002\001\001" +
    "\000\004\062\157\001\001\000\002\001\001\000\004\042" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\165" +
    "\001\001\000\004\012\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\163\001\001\000\004\012\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\011\040\014\011\015\037" +
    "\016\007\017\206\020\027\024\017\027\020\030\006\031" +
    "\042\032\034\033\016\034\026\036\046\037\013\040\012" +
    "\041\033\043\015\001\001\000\002\001\001\000\046\011" +
    "\040\014\011\015\037\016\007\017\210\020\027\024\017" +
    "\027\020\030\006\031\042\032\034\033\016\034\026\036" +
    "\046\037\013\040\012\041\033\043\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\221\006\222\013\057\001\001\000\006\013" +
    "\101\035\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\224\006\222\013\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\011\040\014\011\015\037\016\007\017\234" +
    "\020\027\024\017\027\020\030\006\031\042\032\034\033" +
    "\016\034\026\036\046\037\013\040\012\041\033\043\015" +
    "\001\001\000\002\001\001\000\046\011\040\014\011\015" +
    "\037\016\007\017\236\020\027\024\017\027\020\030\006" +
    "\031\042\032\034\033\016\034\026\036\046\037\013\040" +
    "\012\041\033\043\015\001\001\000\002\001\001\000\004" +
    "\010\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\245\006\222" +
    "\013\057\001\001\000\004\025\246\001\001\000\002\001" +
    "\001\000\006\006\064\013\057\001\001\000\004\003\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\270\006\055\013\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\266\006\055\013" +
    "\057\001\001\000\006\006\064\013\057\001\001\000\002" +
    "\001\001\000\006\006\064\013\057\001\001\000\002\001" +
    "\001\000\046\011\040\014\011\015\037\016\007\017\273" +
    "\020\027\024\017\027\020\030\006\031\042\032\034\033" +
    "\016\034\026\036\046\037\013\040\012\041\033\043\015" +
    "\001\001\000\002\001\001\000\046\011\040\014\011\015" +
    "\037\016\007\017\275\020\027\024\017\027\020\030\006" +
    "\031\042\032\034\033\016\034\026\036\046\037\013\040" +
    "\012\041\033\043\015\001\001\000\002\001\001\000\046" +
    "\011\040\014\011\015\037\016\007\017\277\020\027\024" +
    "\017\027\020\030\006\031\042\032\034\033\016\034\026" +
    "\036\046\037\013\040\012\041\033\043\015\001\001\000" +
    "\002\001\001\000\004\003\304\001\001\000\004\044\302" +
    "\001\001\000\046\011\040\014\011\015\037\016\007\017" +
    "\303\020\027\024\017\027\020\030\006\031\042\032\034" +
    "\033\016\034\026\036\046\037\013\040\012\041\033\043" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\011\040\014\011\015\037\016\007\017\306\020\027\024" +
    "\017\027\020\030\006\031\042\032\034\033\016\034\026" +
    "\036\046\037\013\040\012\041\033\043\015\001\001\000" +
    "\010\021\310\023\311\064\312\001\001\000\046\011\040" +
    "\014\011\015\037\016\007\017\325\020\027\024\017\027" +
    "\020\030\006\031\042\032\034\033\016\034\026\036\046" +
    "\037\013\040\012\041\033\043\015\001\001\000\002\001" +
    "\001\000\004\021\321\001\001\000\002\001\001\000\004" +
    "\003\314\001\001\000\002\001\001\000\046\011\040\014" +
    "\011\015\037\016\007\017\316\020\027\024\017\027\020" +
    "\030\006\031\042\032\034\033\016\034\026\036\046\037" +
    "\013\040\012\041\033\043\015\001\001\000\004\023\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\332\006\222\013\057\001\001\000\006" +
    "\013\101\035\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\335\006\222\013\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\011\040\014\011\015" +
    "\037\016\007\017\340\020\027\024\017\027\020\030\006" +
    "\031\042\032\034\033\016\034\026\036\046\037\013\040" +
    "\012\041\033\043\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\011" +
    "\040\014\011\015\037\016\007\017\345\020\027\024\017" +
    "\027\020\030\006\031\042\032\034\033\016\034\026\036" +
    "\046\037\013\040\012\041\033\043\015\001\001\000\002" +
    "\001\001\000\046\011\040\014\011\015\037\016\007\017" +
    "\347\020\027\024\017\027\020\030\006\031\042\032\034" +
    "\033\016\034\026\036\046\037\013\040\012\041\033\043" +
    "\015\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public String python = "";
    public String golang = "";
    public int erroresSintacticos = 0;
    String condicion = "";
    String instruccion = "";
    String tmpInstruccion = "";
    String valor = "";
    String tmpPython = "";
    String tmpImprimir = "";
    String tmpListaNombres = "";
    public void syntax_error(Symbol s){ 
        erroresSintacticos++;
        //Imprimir error
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    
    
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio E prFin 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= DECLARACION E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
tmpPython += "if ";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
System.out.println("Se realizo un if");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= NT$0 IF NT$1 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= COMENTARIO NT$2 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentarioVariasLineas");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= COMENTARIO_VARIAS_LINEAS NT$3 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un asignacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= ASIGNACION NT$4 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un seleccionMultiple");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= SELECCION_MULTIPLE NT$5 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un para");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= PARA NT$6 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un paraSalto");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= PARA_SALTO NT$7 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un mientras");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= MIENTRAS NT$8 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un repetir");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= REPETIR NT$9 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un retorno");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= RETORNO NT$10 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un metodo");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= METODO NT$11 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$12 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un funcion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",45, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= FUNCION NT$12 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$13 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un ejecutar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= EJECUTAR NT$13 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= IMPRIMIR E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= IMPRIMIR_NL E 
            {
              String RESULT =null;
		tmpInstruccion += tmpImprimir; tmpImprimir = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$14 ::= 
            {
              String RESULT =null;
tmpPython = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= error NT$14 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= prBoolean 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= prBooleana 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= prCaracter 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= prNumero 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= prCadena 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpListaNombres + " = " + a + "\n"; tmpListaNombres = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpListaNombres + " = " + a + "\n"; tmpListaNombres = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpListaNombres + " = " + a + "\n"; tmpListaNombres = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpListaNombres + " = " + a + "\n"; tmpListaNombres = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpListaNombres + " = " + a + "\n"; tmpListaNombres = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpListaNombres + " = " + a + "\n"; tmpListaNombres = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpListaNombres + " = " + a + "\n"; tmpListaNombres = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMENTARIO ::= tcomentario 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python +=c+"\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMENTARIO_VARIAS_LINEAS ::= tcomentariovariaslineas 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python += "'''"+c+"'''\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO_VARIAS_LINEAS",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION ::= tvariable FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = "+b+";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION ::= LISTA_NOMBRES FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpListaNombres + " = " + a + ";\n"; tmpListaNombres = ""; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION ::= tvariable FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= LISTA_NOMBRES FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpListaNombres + " = " + a + ";\n"; tmpListaNombres = ""; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SELECCION_MULTIPLE ::= prSegun SEGUN prFinSegun 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES SEGUN 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR ::= tcadena 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$15 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres += a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",48, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTA_NOMBRES ::= tvariable NT$15 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTA_NOMBRES ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$16 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres += a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTA_NOMBRES2 ::= tcoma tvariable NT$16 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTA_NOMBRES2 ::= tcoma tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		tmpListaNombres += a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$17 ::= 
            {
              String RESULT =null;
tmpPython += tmpInstruccion;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= prSi CONDICION prEntonces E NT$17 prFinSi 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += tmpPython + "\n"; tmpPython = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= prSi CONDICION prEntonces E O_SI prFinSi 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= prSi CONDICION prEntonces E DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= prSi CONDICION prEntonces E O_SI DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DE_LO_CONTRARIO ::= prDE_LO_CONTRARIO E DE_LO_CONTRARIO 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DE_LO_CONTRARIO ::= prDE_LO_CONTRARIO E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // O_SI ::= prO_Si CONDICION prEntonces E O_SI 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // O_SI ::= prO_Si CONDICION prEntonces E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= tvariable tigual tigual tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		condicion = a + b +c +d ; tmpPython += condicion + ":\n\t";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= tvariable tigual tigual tcadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		condicion = a + b +c +d ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= tvariable tigual tigual tnum 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		condicion = a + b +c +d ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLE ::= tvariable 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCCIONES_CICLO ::= INSTRUCCIONES_CICLO INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCCIONES_CICLO ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCCION ::= VARIABLE tigual VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARA ::= prPara VARIABLE FLECHA tnum prHasta tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FLECHA ::= trest tmayor 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FLECHA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARA_SALTO ::= prPara VARIABLE FLECHA tnum prHasta tnum prCon prIncremental tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA_SALTO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MIENTRAS ::= prMientras CONDICION prHacer INSTRUCCIONES_CICLO prFinMientras 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // REPETIR ::= prRepetir INSTRUCCIONES_CICLO prHasta CONDICION 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RETORNO ::= prRetornar VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // METODO ::= prMetodo VARIABLE prConParametros LISTA_PARAMETROS prConValor VALOR prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // METODO ::= prMetodo VARIABLE INSTRUCCIONES prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTA_PARAMETROS ::= VARIABLE tcadena LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTA_PARAMETROS ::= VARIABLE tcadena tcoma LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCION ::= prFuncion VARIABLE tcadena prConParametros LISTA_PARAMETROS INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCION ::= prFuncion VARIABLE tcadena INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EJECUTAR ::= prEjecutar VARIABLE pare1 pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EJECUTAR ::= prEjecutar VARIABLE pare1 LISTA_PARAMETROS pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IMPRIMIR ::= prImprimir VALOR tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IMPRIMIR_NL ::= prImprimirNl VALOR tpuntoycoma 
            {
              String RESULT =null;
		tmpImprimir = "println(" + valor + ")";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
