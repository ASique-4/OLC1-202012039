
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\002\005\000\002\017" +
    "\004\000\002\051\002\000\002\017\005\000\002\052\002" +
    "\000\002\017\005\000\002\053\002\000\002\017\005\000" +
    "\002\054\002\000\002\017\005\000\002\055\002\000\002" +
    "\017\005\000\002\056\002\000\002\017\005\000\002\057" +
    "\002\000\002\017\005\000\002\060\002\000\002\017\005" +
    "\000\002\061\002\000\002\017\005\000\002\062\002\000" +
    "\002\017\005\000\002\063\002\000\002\017\005\000\002" +
    "\064\002\000\002\017\005\000\002\065\002\000\002\017" +
    "\005\000\002\017\004\000\002\017\004\000\002\066\002" +
    "\000\002\017\005\000\002\067\002\000\002\017\005\000" +
    "\002\017\002\000\002\044\004\000\002\044\003\000\002" +
    "\044\004\000\002\044\003\000\002\047\003\000\002\047" +
    "\003\000\002\043\005\000\002\043\007\000\002\043\007" +
    "\000\002\043\007\000\002\043\007\000\002\043\011\000" +
    "\002\043\012\000\002\045\005\000\002\045\004\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\014\011\000" +
    "\002\014\011\000\002\014\012\000\002\014\012\000\002" +
    "\014\011\000\002\014\011\000\002\014\011\000\002\014" +
    "\011\000\002\014\012\000\002\014\012\000\002\014\011" +
    "\000\002\014\011\000\002\014\011\000\002\014\011\000" +
    "\002\014\012\000\002\014\012\000\002\014\011\000\002" +
    "\014\011\000\002\014\011\000\002\014\011\000\002\014" +
    "\011\000\002\014\011\000\002\014\012\000\002\014\012" +
    "\000\002\014\011\000\002\015\003\000\002\016\003\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\024\005\000\002\025\010\000\002" +
    "\025\007\000\002\010\003\000\002\010\003\000\002\070" +
    "\002\000\002\011\005\000\002\011\002\000\002\071\002" +
    "\000\002\012\006\000\002\012\004\000\002\007\007\000" +
    "\002\007\010\000\002\007\010\000\002\007\011\000\002" +
    "\021\005\000\002\021\004\000\002\023\007\000\002\023" +
    "\006\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\013\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\004\005\000\002\004\004\000\002\005\005\000" +
    "\002\005\004\000\002\006\005\000\002\027\013\000\002" +
    "\026\004\000\002\030\016\000\002\031\007\000\002\032" +
    "\006\000\002\033\004\000\002\034\011\000\002\034\006" +
    "\000\002\035\005\000\002\035\006\000\002\036\011\000" +
    "\002\036\007\000\002\037\007\000\002\037\010\000\002" +
    "\040\005\000\002\040\007\000\002\041\005\000\002\041" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0150\000\004\015\004\001\002\000\052\003\035\004" +
    "\036\005\uff95\013\032\016\uffde\023\034\024\024\026\007" +
    "\031\040\036\041\040\054\045\044\047\051\051\020\052" +
    "\012\055\017\057\021\060\026\061\030\063\015\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\006\027\uff95\063\u0111\001\002\000\060\003\uffe2\004\uffe2" +
    "\005\uffe2\013\uffe2\016\uffe2\023\uffe2\024\uffe2\026\uffe2\031" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\040\uffe2\045\uffe2" +
    "\047\uffe2\051\uffe2\052\uffe2\055\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\063\uffe2\001\002\000\016\005\243\006\244\007\252" +
    "\010\242\011\257\012\251\001\002\000\004\063\055\001" +
    "\002\000\060\003\035\004\036\005\uff95\013\032\016\uffde" +
    "\023\034\024\024\026\007\031\040\033\uffde\034\uffde\035" +
    "\uffde\036\041\040\054\045\044\047\051\051\020\052\012" +
    "\055\017\057\021\060\026\061\030\063\015\001\002\000" +
    "\060\003\uffe8\004\uffe8\005\uffe8\013\uffe8\016\uffe8\023\uffe8" +
    "\024\uffe8\026\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\040\uffe8\045\uffe8\047\uffe8\051\uffe8\052\uffe8\055\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\063\uffe8\001\002\000\020\005" +
    "\060\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\021\uff97" +
    "\001\002\000\060\003\uffea\004\uffea\005\uffea\013\uffea\016" +
    "\uffea\023\uffea\024\uffea\026\uffea\031\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\040\uffea\045\uffea\047\uffea\051\uffea\052" +
    "\uffea\055\uffea\057\uffea\060\uffea\061\uffea\063\uffea\001\002" +
    "\000\004\063\055\001\002\000\006\063\077\064\076\001" +
    "\002\000\004\063\055\001\002\000\004\016\327\001\002" +
    "\000\060\003\ufffa\004\ufffa\005\ufffa\013\ufffa\016\ufffa\023" +
    "\ufffa\024\ufffa\026\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\040\ufffa\045\ufffa\047\ufffa\051\ufffa\052\ufffa\055" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\063\ufffa\001\002\000\060" +
    "\003\uffab\004\uffab\005\uffab\013\uffab\016\uffab\023\uffab\024" +
    "\uffab\026\uffab\031\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\040\uffab\045\uffab\047\uffab\051\uffab\052\uffab\055\uffab\057" +
    "\uffab\060\uffab\061\uffab\063\uffab\001\002\000\060\003\ufff0" +
    "\004\ufff0\005\ufff0\013\ufff0\016\ufff0\023\ufff0\024\ufff0\026" +
    "\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\040\ufff0" +
    "\045\ufff0\047\ufff0\051\ufff0\052\ufff0\055\ufff0\057\ufff0\060" +
    "\ufff0\061\ufff0\063\ufff0\001\002\000\024\004\115\013\316" +
    "\063\135\064\116\074\124\075\123\101\122\105\121\110" +
    "\126\001\002\000\060\003\ufffe\004\ufffe\005\ufffe\013\ufffe" +
    "\016\ufffe\023\ufffe\024\ufffe\026\ufffe\031\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\040\ufffe\045\ufffe\047\ufffe\051\ufffe" +
    "\052\ufffe\055\ufffe\057\ufffe\060\ufffe\061\ufffe\063\ufffe\001" +
    "\002\000\024\004\115\013\305\063\135\064\116\074\124" +
    "\075\123\101\122\105\121\110\126\001\002\000\060\003" +
    "\uffec\004\uffec\005\uffec\013\uffec\016\uffec\023\uffec\024\uffec" +
    "\026\uffec\031\uffec\033\uffec\034\uffec\035\uffec\036\uffec\040" +
    "\uffec\045\uffec\047\uffec\051\uffec\052\uffec\055\uffec\057\uffec" +
    "\060\uffec\061\uffec\063\uffec\001\002\000\022\004\036\005" +
    "\243\006\244\007\252\010\242\012\251\013\032\063\247" +
    "\001\002\000\004\005\060\001\002\000\060\003\uffac\004" +
    "\uffac\005\uffac\013\uffac\016\uffac\023\uffac\024\uffac\026\uffac" +
    "\031\uffac\033\uffac\034\uffac\035\uffac\036\uffac\040\uffac\045" +
    "\uffac\047\uffac\051\uffac\052\uffac\055\uffac\057\uffac\060\uffac" +
    "\061\uffac\063\uffac\001\002\000\060\003\uffe0\004\uffe0\005" +
    "\uffe0\013\uffe0\016\uffe0\023\uffe0\024\uffe0\026\uffe0\031\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\045\uffe0\047" +
    "\uffe0\051\uffe0\052\uffe0\055\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\063\uffe0\001\002\000\100\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\016\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\045\uffd9\047\uffd9" +
    "\051\uffd9\052\uffd9\055\uffd9\057\uffd9\060\uffd9\061\uffd9\063" +
    "\uffd9\107\uffd9\001\002\000\060\003\ufffc\004\ufffc\005\ufffc" +
    "\013\ufffc\016\ufffc\023\ufffc\024\ufffc\026\ufffc\031\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\040\ufffc\045\ufffc\047\ufffc" +
    "\051\ufffc\052\ufffc\055\ufffc\057\ufffc\060\ufffc\061\ufffc\063" +
    "\ufffc\001\002\000\022\004\115\063\117\064\116\074\124" +
    "\075\123\101\122\105\121\110\126\001\002\000\004\017" +
    "\162\001\002\000\060\003\ufff8\004\ufff8\005\ufff8\013\ufff8" +
    "\016\ufff8\023\ufff8\024\ufff8\026\ufff8\031\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\040\ufff8\045\ufff8\047\ufff8\051\ufff8" +
    "\052\ufff8\055\ufff8\057\ufff8\060\ufff8\061\ufff8\063\ufff8\001" +
    "\002\000\060\003\035\004\036\005\uff95\013\032\016\uffde" +
    "\023\034\024\024\026\007\031\040\033\uffde\034\uffde\035" +
    "\uffde\036\041\040\054\045\044\047\051\051\020\052\012" +
    "\055\017\057\021\060\026\061\030\063\015\001\002\000" +
    "\022\004\115\063\117\064\116\074\124\075\123\101\122" +
    "\105\121\110\126\001\002\000\060\003\035\004\036\005" +
    "\uff95\013\032\016\uffde\023\034\024\024\026\007\031\040" +
    "\033\uffde\034\uffde\035\uffde\036\041\040\054\045\044\047" +
    "\051\051\020\052\012\055\017\057\021\060\026\061\030" +
    "\063\015\001\002\000\060\003\uffee\004\uffee\005\uffee\013" +
    "\uffee\016\uffee\023\uffee\024\uffee\026\uffee\031\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\040\uffee\045\uffee\047\uffee\051" +
    "\uffee\052\uffee\055\uffee\057\uffee\060\uffee\061\uffee\063\uffee" +
    "\001\002\000\060\003\ufff2\004\ufff2\005\ufff2\013\ufff2\016" +
    "\ufff2\023\ufff2\024\ufff2\026\ufff2\031\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\040\ufff2\045\ufff2\047\ufff2\051\ufff2\052" +
    "\ufff2\055\ufff2\057\ufff2\060\ufff2\061\ufff2\063\ufff2\001\002" +
    "\000\060\003\ufff4\004\ufff4\005\ufff4\013\ufff4\016\ufff4\023" +
    "\ufff4\024\ufff4\026\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\040\ufff4\045\ufff4\047\ufff4\051\ufff4\052\ufff4\055" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\063\ufff4\001\002\000\004" +
    "\063\055\001\002\000\060\003\uffe6\004\uffe6\005\uffe6\013" +
    "\uffe6\016\uffe6\023\uffe6\024\uffe6\026\uffe6\031\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\040\uffe6\045\uffe6\047\uffe6\051" +
    "\uffe6\052\uffe6\055\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6" +
    "\001\002\000\060\003\ufff6\004\ufff6\005\ufff6\013\ufff6\016" +
    "\ufff6\023\ufff6\024\ufff6\026\ufff6\031\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\040\ufff6\045\ufff6\047\ufff6\051\ufff6\052" +
    "\ufff6\055\ufff6\057\ufff6\060\ufff6\061\ufff6\063\ufff6\001\002" +
    "\000\004\063\055\001\002\000\016\005\uff82\013\uff82\054" +
    "\uff82\062\uff82\063\uff82\064\uff82\001\002\000\004\005\060" +
    "\001\002\000\004\004\062\001\002\000\004\022\061\001" +
    "\002\000\020\004\uff73\063\uff73\064\uff73\074\uff73\075\uff73" +
    "\101\uff73\105\uff73\001\002\000\004\041\063\001\002\000" +
    "\004\004\064\001\002\000\006\037\065\043\066\001\002" +
    "\000\004\063\055\001\002\000\004\044\067\001\002\000" +
    "\004\004\070\001\002\000\004\037\071\001\002\000\004" +
    "\063\055\001\002\000\004\025\104\001\002\000\006\042" +
    "\102\063\055\001\002\000\004\062\075\001\002\000\006" +
    "\063\077\064\076\001\002\000\066\003\uff98\004\uff98\005" +
    "\uff98\013\uff98\016\uff98\020\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\031\uff98\033\uff98\034\uff98\035\uff98\036\uff98\040" +
    "\uff98\045\uff98\047\uff98\051\uff98\052\uff98\053\uff98\055\uff98" +
    "\057\uff98\060\uff98\061\uff98\063\uff98\001\002\000\066\003" +
    "\uff99\004\uff99\005\uff99\013\uff99\016\uff99\020\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\031\uff99\033\uff99\034\uff99\035" +
    "\uff99\036\uff99\040\uff99\045\uff99\047\uff99\051\uff99\052\uff99" +
    "\053\uff99\055\uff99\057\uff99\060\uff99\061\uff99\063\uff99\001" +
    "\002\000\004\025\uff75\001\002\000\004\025\103\001\002" +
    "\000\060\003\uff72\004\uff72\005\uff72\013\uff72\016\uff72\023" +
    "\uff72\024\uff72\026\uff72\031\uff72\033\uff72\034\uff72\035\uff72" +
    "\036\uff72\040\uff72\045\uff72\047\uff72\051\uff72\052\uff72\055" +
    "\uff72\057\uff72\060\uff72\061\uff72\063\uff72\001\002\000\012" +
    "\041\uff77\042\uff77\046\uff77\063\uff77\001\002\000\012\041" +
    "\uff76\042\uff76\046\uff76\063\uff76\001\002\000\006\042\106" +
    "\063\055\001\002\000\060\003\uff74\004\uff74\005\uff74\013" +
    "\uff74\016\uff74\023\uff74\024\uff74\026\uff74\031\uff74\033\uff74" +
    "\034\uff74\035\uff74\036\uff74\040\uff74\045\uff74\047\uff74\051" +
    "\uff74\052\uff74\055\uff74\057\uff74\060\uff74\061\uff74\063\uff74" +
    "\001\002\000\060\003\035\004\036\005\uff95\013\032\016" +
    "\uffde\023\034\024\024\026\007\031\040\033\uffde\034\uffde" +
    "\035\uffde\036\041\040\054\045\044\047\051\051\020\052" +
    "\012\055\017\057\021\060\026\061\030\063\015\001\002" +
    "\000\012\016\ufff5\033\ufff5\034\ufff5\035\ufff5\001\002\000" +
    "\060\003\035\004\036\005\uff95\013\032\016\uffde\023\034" +
    "\024\024\026\007\031\040\033\uffde\034\uffde\035\uffde\036" +
    "\041\040\054\045\044\047\051\051\020\052\012\055\017" +
    "\057\021\060\026\061\030\063\015\001\002\000\012\016" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000\006\041\114" +
    "\063\055\001\002\000\022\004\115\063\117\064\116\074" +
    "\124\075\123\101\122\105\121\110\126\001\002\000\104" +
    "\003\uff80\004\uff80\005\uff80\013\uff80\014\uff80\016\uff80\023" +
    "\uff80\024\uff80\025\uff80\026\uff80\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\045\uff80\047" +
    "\uff80\051\uff80\052\uff80\055\uff80\057\uff80\060\uff80\061\uff80" +
    "\063\uff80\076\uff80\077\uff80\100\uff80\102\uff80\103\uff80\104" +
    "\uff80\001\002\000\104\003\uff7f\004\uff7f\005\uff7f\013\uff7f" +
    "\014\uff7f\016\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\031" +
    "\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f" +
    "\040\uff7f\045\uff7f\047\uff7f\051\uff7f\052\uff7f\055\uff7f\057" +
    "\uff7f\060\uff7f\061\uff7f\063\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\102\uff7f\103\uff7f\104\uff7f\001\002\000\100\003\uff83\004" +
    "\uff83\005\uff83\013\uff83\016\uff83\023\uff83\024\uff83\026\uff83" +
    "\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037" +
    "\uff83\040\uff83\045\uff83\047\uff83\051\uff83\052\uff83\055\uff83" +
    "\057\uff83\060\uff83\061\uff83\063\uff83\076\uff81\077\uff81\100" +
    "\uff81\102\uff81\103\uff81\104\uff81\001\002\000\016\076\132" +
    "\077\127\100\134\102\133\103\131\104\130\001\002\000" +
    "\104\003\uff7b\004\uff7b\005\uff7b\013\uff7b\014\uff7b\016\uff7b" +
    "\023\uff7b\024\uff7b\025\uff7b\026\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\045\uff7b" +
    "\047\uff7b\051\uff7b\052\uff7b\055\uff7b\057\uff7b\060\uff7b\061" +
    "\uff7b\063\uff7b\076\uff7b\077\uff7b\100\uff7b\102\uff7b\103\uff7b" +
    "\104\uff7b\001\002\000\104\003\uff7e\004\uff7e\005\uff7e\013" +
    "\uff7e\014\uff7e\016\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\045\uff7e\047\uff7e\051\uff7e\052\uff7e\055\uff7e" +
    "\057\uff7e\060\uff7e\061\uff7e\063\uff7e\076\uff7e\077\uff7e\100" +
    "\uff7e\102\uff7e\103\uff7e\104\uff7e\001\002\000\104\003\uff7c" +
    "\004\uff7c\005\uff7c\013\uff7c\014\uff7c\016\uff7c\023\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c" +
    "\035\uff7c\036\uff7c\037\uff7c\040\uff7c\045\uff7c\047\uff7c\051" +
    "\uff7c\052\uff7c\055\uff7c\057\uff7c\060\uff7c\061\uff7c\063\uff7c" +
    "\076\uff7c\077\uff7c\100\uff7c\102\uff7c\103\uff7c\104\uff7c\001" +
    "\002\000\104\003\uff7d\004\uff7d\005\uff7d\013\uff7d\014\uff7d" +
    "\016\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\031\uff7d\032" +
    "\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d" +
    "\045\uff7d\047\uff7d\051\uff7d\052\uff7d\055\uff7d\057\uff7d\060" +
    "\uff7d\061\uff7d\063\uff7d\076\uff7d\077\uff7d\100\uff7d\102\uff7d" +
    "\103\uff7d\104\uff7d\001\002\000\060\003\uff70\004\uff70\005" +
    "\uff70\013\uff70\016\uff70\023\uff70\024\uff70\026\uff70\031\uff70" +
    "\033\uff70\034\uff70\035\uff70\036\uff70\040\uff70\045\uff70\047" +
    "\uff70\051\uff70\052\uff70\055\uff70\057\uff70\060\uff70\061\uff70" +
    "\063\uff70\001\002\000\104\003\uff7a\004\uff7a\005\uff7a\013" +
    "\uff7a\014\uff7a\016\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a" +
    "\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037" +
    "\uff7a\040\uff7a\045\uff7a\047\uff7a\051\uff7a\052\uff7a\055\uff7a" +
    "\057\uff7a\060\uff7a\061\uff7a\063\uff7a\076\uff7a\077\uff7a\100" +
    "\uff7a\102\uff7a\103\uff7a\104\uff7a\001\002\000\022\004\115" +
    "\063\135\064\116\074\124\075\123\101\122\105\121\110" +
    "\126\001\002\000\022\004\115\063\135\064\116\074\124" +
    "\075\123\101\122\105\121\110\126\001\002\000\022\004" +
    "\115\063\135\064\116\074\124\075\123\101\122\105\121" +
    "\110\126\001\002\000\022\004\115\063\135\064\116\074" +
    "\124\075\123\101\122\105\121\110\126\001\002\000\022" +
    "\004\115\063\135\064\116\074\124\075\123\101\122\105" +
    "\121\110\126\001\002\000\022\004\115\063\135\064\116" +
    "\074\124\075\123\101\122\105\121\110\126\001\002\000" +
    "\070\003\uff81\004\uff81\005\uff81\013\uff81\014\uff81\016\uff81" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\031\uff81\032\uff81\033" +
    "\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\045\uff81" +
    "\047\uff81\051\uff81\052\uff81\055\uff81\057\uff81\060\uff81\061" +
    "\uff81\063\uff81\001\002\000\064\003\uff88\004\uff88\005\uff88" +
    "\013\uff88\016\uff88\023\uff88\024\uff88\026\uff88\031\uff88\032" +
    "\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88" +
    "\045\uff88\047\uff88\051\uff88\052\uff88\055\uff88\057\uff88\060" +
    "\uff88\061\uff88\063\uff88\001\002\000\064\003\uff86\004\uff86" +
    "\005\uff86\013\uff86\016\uff86\023\uff86\024\uff86\026\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\045\uff86\047\uff86\051\uff86\052\uff86\055\uff86\057" +
    "\uff86\060\uff86\061\uff86\063\uff86\001\002\000\064\003\uff89" +
    "\004\uff89\005\uff89\013\uff89\016\uff89\023\uff89\024\uff89\026" +
    "\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89" +
    "\037\uff89\040\uff89\045\uff89\047\uff89\051\uff89\052\uff89\055" +
    "\uff89\057\uff89\060\uff89\061\uff89\063\uff89\001\002\000\064" +
    "\003\uff87\004\uff87\005\uff87\013\uff87\016\uff87\023\uff87\024" +
    "\uff87\026\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87" +
    "\036\uff87\037\uff87\040\uff87\045\uff87\047\uff87\051\uff87\052" +
    "\uff87\055\uff87\057\uff87\060\uff87\061\uff87\063\uff87\001\002" +
    "\000\064\003\uff85\004\uff85\005\uff85\013\uff85\016\uff85\023" +
    "\uff85\024\uff85\026\uff85\031\uff85\032\uff85\033\uff85\034\uff85" +
    "\035\uff85\036\uff85\037\uff85\040\uff85\045\uff85\047\uff85\051" +
    "\uff85\052\uff85\055\uff85\057\uff85\060\uff85\061\uff85\063\uff85" +
    "\001\002\000\064\003\uff84\004\uff84\005\uff84\013\uff84\016" +
    "\uff84\023\uff84\024\uff84\026\uff84\031\uff84\032\uff84\033\uff84" +
    "\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\045\uff84\047" +
    "\uff84\051\uff84\052\uff84\055\uff84\057\uff84\060\uff84\061\uff84" +
    "\063\uff84\001\002\000\060\003\035\004\036\005\uff95\013" +
    "\032\016\uffde\023\034\024\024\026\007\031\040\033\uffde" +
    "\034\uffde\035\uffde\036\041\040\054\045\044\047\051\051" +
    "\020\052\012\055\017\057\021\060\026\061\030\063\015" +
    "\001\002\000\012\016\ufff3\033\ufff3\034\ufff3\035\ufff3\001" +
    "\002\000\060\003\035\004\036\005\uff95\013\032\016\uffde" +
    "\023\034\024\024\026\007\031\040\033\uffde\034\uffde\035" +
    "\uffde\036\041\040\054\045\044\047\051\051\020\052\012" +
    "\055\017\057\021\060\026\061\030\063\015\001\002\000" +
    "\012\016\ufff1\033\ufff1\034\ufff1\035\ufff1\001\002\000\060" +
    "\003\035\004\036\005\uff95\013\032\016\uffde\023\034\024" +
    "\024\026\007\031\040\033\uffde\034\uffde\035\uffde\036\041" +
    "\040\054\045\044\047\051\051\020\052\012\055\017\057" +
    "\021\060\026\061\030\063\015\001\002\000\012\016\uffed" +
    "\033\uffed\034\uffed\035\uffed\001\002\000\012\016\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\001\002\000\004\037\154\001\002" +
    "\000\004\063\055\001\002\000\006\046\156\063\055\001" +
    "\002\000\060\003\uff71\004\uff71\005\uff71\013\uff71\016\uff71" +
    "\023\uff71\024\uff71\026\uff71\031\uff71\033\uff71\034\uff71\035" +
    "\uff71\036\uff71\040\uff71\045\uff71\047\uff71\051\uff71\052\uff71" +
    "\055\uff71\057\uff71\060\uff71\061\uff71\063\uff71\001\002\000" +
    "\012\016\uffff\033\uffff\034\uffff\035\uffff\001\002\000\060" +
    "\003\035\004\036\005\uff95\013\032\016\uffde\023\034\024" +
    "\024\026\007\031\040\033\uffde\034\uffde\035\uffde\036\041" +
    "\040\054\045\044\047\051\051\020\052\012\055\017\057" +
    "\021\060\026\061\030\063\015\001\002\000\012\016\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\001\002\000\006\063\077\064" +
    "\076\001\002\000\004\065\164\001\002\000\060\003\uff9c" +
    "\004\uff9c\005\uff9c\013\uff9c\016\uff9c\023\uff9c\024\uff9c\026" +
    "\uff9c\031\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\040\uff9c" +
    "\045\uff9c\047\uff9c\051\uff9c\052\uff9c\055\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\063\uff9c\001\002\000\004\020\166\001\002" +
    "\000\004\032\167\001\002\000\004\063\055\001\002\000" +
    "\006\017\162\065\uff9a\001\002\000\004\025\172\001\002" +
    "\000\014\017\uff78\053\uff78\056\uff78\063\055\065\uff78\001" +
    "\002\000\012\017\uff79\053\uff79\056\uff79\065\uff79\001\002" +
    "\000\004\065\uff9b\001\002\000\004\032\176\001\002\000" +
    "\056\003\035\004\036\005\uff95\013\032\023\034\024\024" +
    "\026\007\031\040\033\uffde\034\uffde\035\uffde\036\041\040" +
    "\054\045\044\047\051\051\020\052\012\055\017\057\021" +
    "\060\026\061\030\063\015\001\002\000\010\033\203\034" +
    "\204\035\200\001\002\000\054\003\035\004\036\005\uff95" +
    "\013\032\023\034\024\024\026\007\031\040\033\uffde\035" +
    "\uffde\036\041\040\054\045\044\047\051\051\020\052\012" +
    "\055\017\057\021\060\026\061\030\063\015\001\002\000" +
    "\004\033\214\001\002\000\006\033\212\035\200\001\002" +
    "\000\060\003\uff91\004\uff91\005\uff91\013\uff91\016\uff91\023" +
    "\uff91\024\uff91\026\uff91\031\uff91\033\uff91\034\uff91\035\uff91" +
    "\036\uff91\040\uff91\045\uff91\047\uff91\051\uff91\052\uff91\055" +
    "\uff91\057\uff91\060\uff91\061\uff91\063\uff91\001\002\000\022" +
    "\004\115\063\117\064\116\074\124\075\123\101\122\105" +
    "\121\110\126\001\002\000\004\032\206\001\002\000\056" +
    "\003\035\004\036\005\uff95\013\032\023\034\024\024\026" +
    "\007\031\040\033\uffde\034\uffde\035\uffde\036\041\040\054" +
    "\045\044\047\051\051\020\052\012\055\017\057\021\060" +
    "\026\061\030\063\015\001\002\000\010\033\uff8a\034\204" +
    "\035\uff8a\001\002\000\006\033\uff8b\035\uff8b\001\002\000" +
    "\004\033\213\001\002\000\060\003\uff90\004\uff90\005\uff90" +
    "\013\uff90\016\uff90\023\uff90\024\uff90\026\uff90\031\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\040\uff90\045\uff90\047\uff90" +
    "\051\uff90\052\uff90\055\uff90\057\uff90\060\uff90\061\uff90\063" +
    "\uff90\001\002\000\060\003\uff8e\004\uff8e\005\uff8e\013\uff8e" +
    "\016\uff8e\023\uff8e\024\uff8e\026\uff8e\031\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\040\uff8e\045\uff8e\047\uff8e\051\uff8e" +
    "\052\uff8e\055\uff8e\057\uff8e\060\uff8e\061\uff8e\063\uff8e\001" +
    "\002\000\060\003\uff8f\004\uff8f\005\uff8f\013\uff8f\016\uff8f" +
    "\023\uff8f\024\uff8f\026\uff8f\031\uff8f\033\uff8f\034\uff8f\035" +
    "\uff8f\036\uff8f\040\uff8f\045\uff8f\047\uff8f\051\uff8f\052\uff8f" +
    "\055\uff8f\057\uff8f\060\uff8f\061\uff8f\063\uff8f\001\002\000" +
    "\006\033\uff8c\035\200\001\002\000\004\033\uff8d\001\002" +
    "\000\060\003\035\004\036\005\uff95\013\032\016\uffde\023" +
    "\034\024\024\026\007\031\040\033\uffde\034\uffde\035\uffde" +
    "\036\041\040\054\045\044\047\051\051\020\052\012\055" +
    "\017\057\021\060\026\061\030\063\015\001\002\000\012" +
    "\016\ufffb\033\ufffb\034\ufffb\035\ufffb\001\002\000\060\003" +
    "\035\004\036\005\uff95\013\032\016\uffde\023\034\024\024" +
    "\026\007\031\040\033\uffde\034\uffde\035\uffde\036\041\040" +
    "\054\045\044\047\051\051\020\052\012\055\017\057\021" +
    "\060\026\061\030\063\015\001\002\000\012\016\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\001\002\000\020\004\227\063\224" +
    "\064\225\074\226\075\230\101\231\105\232\001\002\000" +
    "\004\025\241\001\002\000\004\025\240\001\002\000\004" +
    "\025\237\001\002\000\004\025\236\001\002\000\004\025" +
    "\235\001\002\000\004\025\234\001\002\000\004\025\233" +
    "\001\002\000\060\003\uff9d\004\uff9d\005\uff9d\013\uff9d\016" +
    "\uff9d\023\uff9d\024\uff9d\026\uff9d\031\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\040\uff9d\045\uff9d\047\uff9d\051\uff9d\052" +
    "\uff9d\055\uff9d\057\uff9d\060\uff9d\061\uff9d\063\uff9d\001\002" +
    "\000\060\003\uffa0\004\uffa0\005\uffa0\013\uffa0\016\uffa0\023" +
    "\uffa0\024\uffa0\026\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\040\uffa0\045\uffa0\047\uffa0\051\uffa0\052\uffa0\055" +
    "\uffa0\057\uffa0\060\uffa0\061\uffa0\063\uffa0\001\002\000\060" +
    "\003\uff9e\004\uff9e\005\uff9e\013\uff9e\016\uff9e\023\uff9e\024" +
    "\uff9e\026\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\040\uff9e\045\uff9e\047\uff9e\051\uff9e\052\uff9e\055\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\063\uff9e\001\002\000\060\003\uffa2" +
    "\004\uffa2\005\uffa2\013\uffa2\016\uffa2\023\uffa2\024\uffa2\026" +
    "\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\040\uffa2" +
    "\045\uffa2\047\uffa2\051\uffa2\052\uffa2\055\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\063\uffa2\001\002\000\060\003\uff9f\004\uff9f" +
    "\005\uff9f\013\uff9f\016\uff9f\023\uff9f\024\uff9f\026\uff9f\031" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\040\uff9f\045\uff9f" +
    "\047\uff9f\051\uff9f\052\uff9f\055\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\063\uff9f\001\002\000\060\003\uffa3\004\uffa3\005\uffa3" +
    "\013\uffa3\016\uffa3\023\uffa3\024\uffa3\026\uffa3\031\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\040\uffa3\045\uffa3\047\uffa3" +
    "\051\uffa3\052\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\063" +
    "\uffa3\001\002\000\060\003\uffa1\004\uffa1\005\uffa1\013\uffa1" +
    "\016\uffa1\023\uffa1\024\uffa1\026\uffa1\031\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\040\uffa1\045\uffa1\047\uffa1\051\uffa1" +
    "\052\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\063\uffa1\001" +
    "\002\000\010\004\uffcb\013\uffcb\063\uffcb\001\002\000\010" +
    "\004\uffcd\013\uffcd\063\uffcd\001\002\000\010\004\uffce\013" +
    "\uffce\063\uffce\001\002\000\024\004\036\005\243\006\244" +
    "\007\252\010\242\012\251\013\032\014\uffda\063\247\001" +
    "\002\000\004\014\273\001\002\000\100\003\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\016\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\045" +
    "\uffd8\047\uffd8\051\uffd8\052\uffd8\055\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\063\uffd8\107\uffd8\001\002\000\024\004\036\005" +
    "\243\006\244\007\252\010\242\012\251\013\032\014\uffdc" +
    "\063\247\001\002\000\010\004\uffca\013\uffca\063\uffca\001" +
    "\002\000\010\004\uffcc\013\uffcc\063\uffcc\001\002\000\010" +
    "\004\036\013\032\063\247\001\002\000\076\003\uffcf\004" +
    "\uffcf\005\243\006\244\007\252\010\242\011\257\012\251" +
    "\013\uffcf\014\uffcf\016\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf" +
    "\045\uffcf\047\uffcf\051\uffcf\052\uffcf\055\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\063\uffcf\001\002\000\014\005\243\006\244" +
    "\007\252\010\242\012\251\001\002\000\074\003\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\016\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\031" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\045\uffd0" +
    "\047\uffd0\051\uffd0\052\uffd0\055\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\063\uffd0\001\002\000\004\106\267\001\002\000\010" +
    "\004\036\013\261\063\247\001\002\000\022\004\036\005" +
    "\243\006\244\007\252\010\242\012\251\013\032\063\247" +
    "\001\002\000\074\003\uffd7\004\uffd7\005\243\006\244\007" +
    "\252\010\242\012\251\013\uffd7\014\uffd7\016\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\031\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\040\uffd7\045\uffd7\047\uffd7\051\uffd7\052\uffd7" +
    "\055\uffd7\057\uffd7\060\uffd7\061\uffd7\063\uffd7\001\002\000" +
    "\010\004\036\013\032\063\247\001\002\000\074\003\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\016\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\040\uffd6\045" +
    "\uffd6\047\uffd6\051\uffd6\052\uffd6\055\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\063\uffd6\001\002\000\004\014\266\001\002\000" +
    "\074\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\016\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\040\uffd4\045\uffd4\047\uffd4\051\uffd4\052\uffd4\055\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\063\uffd4\001\002\000\006\004\036" +
    "\063\247\001\002\000\004\107\271\001\002\000\074\003" +
    "\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\016\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5" +
    "\045\uffd5\047\uffd5\051\uffd5\052\uffd5\055\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\063\uffd5\001\002\000\004\014\uffdd\001\002" +
    "\000\014\005\243\006\244\007\252\010\242\012\251\001" +
    "\002\000\010\004\036\013\276\063\247\001\002\000\074" +
    "\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\016\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040" +
    "\uffd3\045\uffd3\047\uffd3\051\uffd3\052\uffd3\055\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\063\uffd3\001\002\000\022\004\036\005" +
    "\243\006\244\007\252\010\242\012\251\013\032\063\247" +
    "\001\002\000\004\014\300\001\002\000\074\003\uffd2\004" +
    "\uffd2\005\243\006\244\007\252\010\242\012\251\013\uffd2" +
    "\014\uffd2\016\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\031" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\045\uffd2" +
    "\047\uffd2\051\uffd2\052\uffd2\055\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\063\uffd2\001\002\000\074\003\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\016" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\031\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\040\uffd1\045\uffd1\047\uffd1\051" +
    "\uffd1\052\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\063\uffd1" +
    "\001\002\000\004\014\uffdb\001\002\000\060\003\035\004" +
    "\036\005\uff95\013\032\016\uffde\023\034\024\024\026\007" +
    "\031\040\033\uffde\034\uffde\035\uffde\036\041\040\054\045" +
    "\044\047\051\051\020\052\012\055\017\057\021\060\026" +
    "\061\030\063\015\001\002\000\012\016\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\001\002\000\022\004\115\063\135\064\116" +
    "\074\124\075\123\101\122\105\121\110\126\001\002\000" +
    "\004\025\307\001\002\000\060\003\uff64\004\uff64\005\uff64" +
    "\013\uff64\016\uff64\023\uff64\024\uff64\026\uff64\031\uff64\033" +
    "\uff64\034\uff64\035\uff64\036\uff64\040\uff64\045\uff64\047\uff64" +
    "\051\uff64\052\uff64\055\uff64\057\uff64\060\uff64\061\uff64\063" +
    "\uff64\001\002\000\004\014\311\001\002\000\004\025\312" +
    "\001\002\000\060\003\uff63\004\uff63\005\uff63\013\uff63\016" +
    "\uff63\023\uff63\024\uff63\026\uff63\031\uff63\033\uff63\034\uff63" +
    "\035\uff63\036\uff63\040\uff63\045\uff63\047\uff63\051\uff63\052" +
    "\uff63\055\uff63\057\uff63\060\uff63\061\uff63\063\uff63\001\002" +
    "\000\060\003\035\004\036\005\uff95\013\032\016\uffde\023" +
    "\034\024\024\026\007\031\040\033\uffde\034\uffde\035\uffde" +
    "\036\041\040\054\045\044\047\051\051\020\052\012\055" +
    "\017\057\021\060\026\061\030\063\015\001\002\000\012" +
    "\016\ufffd\033\ufffd\034\ufffd\035\ufffd\001\002\000\004\025" +
    "\322\001\002\000\022\004\115\063\135\064\116\074\124" +
    "\075\123\101\122\105\121\110\126\001\002\000\004\014" +
    "\320\001\002\000\004\025\321\001\002\000\060\003\uff65" +
    "\004\uff65\005\uff65\013\uff65\016\uff65\023\uff65\024\uff65\026" +
    "\uff65\031\uff65\033\uff65\034\uff65\035\uff65\036\uff65\040\uff65" +
    "\045\uff65\047\uff65\051\uff65\052\uff65\055\uff65\057\uff65\060" +
    "\uff65\061\uff65\063\uff65\001\002\000\060\003\uff66\004\uff66" +
    "\005\uff66\013\uff66\016\uff66\023\uff66\024\uff66\026\uff66\031" +
    "\uff66\033\uff66\034\uff66\035\uff66\036\uff66\040\uff66\045\uff66" +
    "\047\uff66\051\uff66\052\uff66\055\uff66\057\uff66\060\uff66\061" +
    "\uff66\063\uff66\001\002\000\060\003\035\004\036\005\uff95" +
    "\013\032\016\uffde\023\034\024\024\026\007\031\040\033" +
    "\uffde\034\uffde\035\uffde\036\041\040\054\045\044\047\051" +
    "\051\020\052\012\055\017\057\021\060\026\061\030\063" +
    "\015\001\002\000\012\016\uffef\033\uffef\034\uffef\035\uffef" +
    "\001\002\000\060\003\035\004\036\005\uff95\013\032\016" +
    "\uffde\023\034\024\024\026\007\031\040\033\uffde\034\uffde" +
    "\035\uffde\036\041\040\054\045\044\047\051\051\020\052" +
    "\012\055\017\057\021\060\026\061\030\063\015\001\002" +
    "\000\012\016\ufff9\033\ufff9\034\ufff9\035\ufff9\001\002\000" +
    "\004\002\000\001\002\000\004\013\331\001\002\000\006" +
    "\014\334\063\055\001\002\000\004\014\342\001\002\000" +
    "\004\064\336\001\002\000\004\025\335\001\002\000\060" +
    "\003\uff68\004\uff68\005\uff68\013\uff68\016\uff68\023\uff68\024" +
    "\uff68\026\uff68\031\uff68\033\uff68\034\uff68\035\uff68\036\uff68" +
    "\040\uff68\045\uff68\047\uff68\051\uff68\052\uff68\055\uff68\057" +
    "\uff68\060\uff68\061\uff68\063\uff68\001\002\000\006\021\340" +
    "\063\055\001\002\000\010\014\uff6c\030\uff6c\063\uff6c\001" +
    "\002\000\004\063\055\001\002\000\010\014\uff6b\030\uff6b" +
    "\063\uff6b\001\002\000\004\025\343\001\002\000\060\003" +
    "\uff67\004\uff67\005\uff67\013\uff67\016\uff67\023\uff67\024\uff67" +
    "\026\uff67\031\uff67\033\uff67\034\uff67\035\uff67\036\uff67\040" +
    "\uff67\045\uff67\047\uff67\051\uff67\052\uff67\055\uff67\057\uff67" +
    "\060\uff67\061\uff67\063\uff67\001\002\000\060\003\uff6f\004" +
    "\uff6f\005\uff6f\013\uff6f\016\uff6f\023\uff6f\024\uff6f\026\uff6f" +
    "\031\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\040\uff6f\045" +
    "\uff6f\047\uff6f\051\uff6f\052\uff6f\055\uff6f\057\uff6f\060\uff6f" +
    "\061\uff6f\063\uff6f\001\002\000\004\064\346\001\002\000" +
    "\006\054\347\063\055\001\002\000\004\063\055\001\002" +
    "\000\004\056\351\001\002\000\060\003\uff69\004\uff69\005" +
    "\uff69\013\uff69\016\uff69\023\uff69\024\uff69\026\uff69\031\uff69" +
    "\033\uff69\034\uff69\035\uff69\036\uff69\040\uff69\045\uff69\047" +
    "\uff69\051\uff69\052\uff69\055\uff69\057\uff69\060\uff69\061\uff69" +
    "\063\uff69\001\002\000\004\063\055\001\002\000\004\056" +
    "\354\001\002\000\060\003\uff6a\004\uff6a\005\uff6a\013\uff6a" +
    "\016\uff6a\023\uff6a\024\uff6a\026\uff6a\031\uff6a\033\uff6a\034" +
    "\uff6a\035\uff6a\036\uff6a\040\uff6a\045\uff6a\047\uff6a\051\uff6a" +
    "\052\uff6a\055\uff6a\057\uff6a\060\uff6a\061\uff6a\063\uff6a\001" +
    "\002\000\060\003\035\004\036\005\uff95\013\032\016\uffde" +
    "\023\034\024\024\026\007\031\040\033\uffde\034\uffde\035" +
    "\uffde\036\041\040\054\045\044\047\051\051\020\052\012" +
    "\055\017\057\021\060\026\061\030\063\015\001\002\000" +
    "\012\016\uffe9\033\uffe9\034\uffe9\035\uffe9\001\002\000\020" +
    "\004\371\063\366\064\367\074\370\075\372\101\374\105" +
    "\373\001\002\000\004\021\362\001\002\000\006\005\uff96" +
    "\027\uff96\001\002\000\004\063\363\001\002\000\010\005" +
    "\uff92\021\uff94\027\uff92\001\002\000\004\021\362\001\002" +
    "\000\006\005\uff93\027\uff93\001\002\000\004\025\u0103\001" +
    "\002\000\004\025\u0102\001\002\000\004\025\u0101\001\002" +
    "\000\004\025\u0100\001\002\000\004\025\377\001\002\000" +
    "\004\025\376\001\002\000\004\025\375\001\002\000\060" +
    "\003\uffa7\004\uffa7\005\uffa7\013\uffa7\016\uffa7\023\uffa7\024" +
    "\uffa7\026\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\040\uffa7\045\uffa7\047\uffa7\051\uffa7\052\uffa7\055\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\063\uffa7\001\002\000\060\003\uffa4" +
    "\004\uffa4\005\uffa4\013\uffa4\016\uffa4\023\uffa4\024\uffa4\026" +
    "\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\040\uffa4" +
    "\045\uffa4\047\uffa4\051\uffa4\052\uffa4\055\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\063\uffa4\001\002\000\060\003\uffa5\004\uffa5" +
    "\005\uffa5\013\uffa5\016\uffa5\023\uffa5\024\uffa5\026\uffa5\031" +
    "\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\040\uffa5\045\uffa5" +
    "\047\uffa5\051\uffa5\052\uffa5\055\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\063\uffa5\001\002\000\060\003\uffa9\004\uffa9\005\uffa9" +
    "\013\uffa9\016\uffa9\023\uffa9\024\uffa9\026\uffa9\031\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\040\uffa9\045\uffa9\047\uffa9" +
    "\051\uffa9\052\uffa9\055\uffa9\057\uffa9\060\uffa9\061\uffa9\063" +
    "\uffa9\001\002\000\060\003\uffa6\004\uffa6\005\uffa6\013\uffa6" +
    "\016\uffa6\023\uffa6\024\uffa6\026\uffa6\031\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\040\uffa6\045\uffa6\047\uffa6\051\uffa6" +
    "\052\uffa6\055\uffa6\057\uffa6\060\uffa6\061\uffa6\063\uffa6\001" +
    "\002\000\060\003\uffaa\004\uffaa\005\uffaa\013\uffaa\016\uffaa" +
    "\023\uffaa\024\uffaa\026\uffaa\031\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\040\uffaa\045\uffaa\047\uffaa\051\uffaa\052\uffaa" +
    "\055\uffaa\057\uffaa\060\uffaa\061\uffaa\063\uffaa\001\002\000" +
    "\060\003\uffa8\004\uffa8\005\uffa8\013\uffa8\016\uffa8\023\uffa8" +
    "\024\uffa8\026\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\040\uffa8\045\uffa8\047\uffa8\051\uffa8\052\uffa8\055\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\063\uffa8\001\002\000\060\003" +
    "\035\004\036\005\uff95\013\032\016\uffde\023\034\024\024" +
    "\026\007\031\040\033\uffde\034\uffde\035\uffde\036\041\040" +
    "\054\045\044\047\051\051\020\052\012\055\017\057\021" +
    "\060\026\061\030\063\015\001\002\000\012\016\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\001\002\000\012\016\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\001\002\000\006\054\u0108\063\055\001" +
    "\002\000\004\063\055\001\002\000\004\053\u010a\001\002" +
    "\000\060\003\uff6d\004\uff6d\005\uff6d\013\uff6d\016\uff6d\023" +
    "\uff6d\024\uff6d\026\uff6d\031\uff6d\033\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\040\uff6d\045\uff6d\047\uff6d\051\uff6d\052\uff6d\055" +
    "\uff6d\057\uff6d\060\uff6d\061\uff6d\063\uff6d\001\002\000\004" +
    "\030\u010c\001\002\000\006\063\077\064\076\001\002\000" +
    "\004\053\u010e\001\002\000\060\003\uff6e\004\uff6e\005\uff6e" +
    "\013\uff6e\016\uff6e\023\uff6e\024\uff6e\026\uff6e\031\uff6e\033" +
    "\uff6e\034\uff6e\035\uff6e\036\uff6e\040\uff6e\045\uff6e\047\uff6e" +
    "\051\uff6e\052\uff6e\055\uff6e\057\uff6e\060\uff6e\061\uff6e\063" +
    "\uff6e\001\002\000\060\003\035\004\036\005\uff95\013\032" +
    "\016\uffde\023\034\024\024\026\007\031\040\033\uffde\034" +
    "\uffde\035\uffde\036\041\040\054\045\044\047\051\051\020" +
    "\052\012\055\017\057\021\060\026\061\030\063\015\001" +
    "\002\000\012\016\uffe1\033\uffe1\034\uffe1\035\uffe1\001\002" +
    "\000\006\021\uff97\027\u0134\001\002\000\004\027\u0113\001" +
    "\002\000\012\070\u0114\071\u0115\072\u0117\073\u0116\001\002" +
    "\000\004\030\uffc9\001\002\000\004\030\uffc8\001\002\000" +
    "\004\030\uffc6\001\002\000\004\030\uffc7\001\002\000\004" +
    "\030\u0119\001\002\000\026\004\u011b\005\u011a\006\u011c\013" +
    "\032\063\u011f\064\u011d\074\u0123\075\u0122\101\u0121\105\u0120" +
    "\001\002\000\006\004\u0130\101\u0131\001\002\000\020\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\025\u012f" +
    "\001\002\000\006\004\u012b\101\u012c\001\002\000\004\025" +
    "\u012a\001\002\000\004\025\u0129\001\002\000\020\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\025\u0128\001" +
    "\002\000\004\025\u0127\001\002\000\004\025\u0126\001\002" +
    "\000\004\025\u0125\001\002\000\004\025\u0124\001\002\000" +
    "\060\003\uffb1\004\uffb1\005\uffb1\013\uffb1\016\uffb1\023\uffb1" +
    "\024\uffb1\026\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\040\uffb1\045\uffb1\047\uffb1\051\uffb1\052\uffb1\055\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\063\uffb1\001\002\000\060\003" +
    "\uffb0\004\uffb0\005\uffb0\013\uffb0\016\uffb0\023\uffb0\024\uffb0" +
    "\026\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040" +
    "\uffb0\045\uffb0\047\uffb0\051\uffb0\052\uffb0\055\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\063\uffb0\001\002\000\060\003\uffb2\004" +
    "\uffb2\005\uffb2\013\uffb2\016\uffb2\023\uffb2\024\uffb2\026\uffb2" +
    "\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\045" +
    "\uffb2\047\uffb2\051\uffb2\052\uffb2\055\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\063\uffb2\001\002\000\060\003\uffb3\004\uffb3\005" +
    "\uffb3\013\uffb3\016\uffb3\023\uffb3\024\uffb3\026\uffb3\031\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\045\uffb3\047" +
    "\uffb3\051\uffb3\052\uffb3\055\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\063\uffb3\001\002\000\060\003\uffb5\004\uffb5\005\uffb5\013" +
    "\uffb5\016\uffb5\023\uffb5\024\uffb5\026\uffb5\031\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\040\uffb5\045\uffb5\047\uffb5\051" +
    "\uffb5\052\uffb5\055\uffb5\057\uffb5\060\uffb5\061\uffb5\063\uffb5" +
    "\001\002\000\060\003\uffad\004\uffad\005\uffad\013\uffad\016" +
    "\uffad\023\uffad\024\uffad\026\uffad\031\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\040\uffad\045\uffad\047\uffad\051\uffad\052" +
    "\uffad\055\uffad\057\uffad\060\uffad\061\uffad\063\uffad\001\002" +
    "\000\060\003\uffb4\004\uffb4\005\uffb4\013\uffb4\016\uffb4\023" +
    "\uffb4\024\uffb4\026\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\040\uffb4\045\uffb4\047\uffb4\051\uffb4\052\uffb4\055" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\063\uffb4\001\002\000\004" +
    "\025\u012e\001\002\000\004\025\u012d\001\002\000\060\003" +
    "\uffae\004\uffae\005\uffae\013\uffae\016\uffae\023\uffae\024\uffae" +
    "\026\uffae\031\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040" +
    "\uffae\045\uffae\047\uffae\051\uffae\052\uffae\055\uffae\057\uffae" +
    "\060\uffae\061\uffae\063\uffae\001\002\000\060\003\uffb6\004" +
    "\uffb6\005\uffb6\013\uffb6\016\uffb6\023\uffb6\024\uffb6\026\uffb6" +
    "\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6\045" +
    "\uffb6\047\uffb6\051\uffb6\052\uffb6\055\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\063\uffb6\001\002\000\060\003\uffb8\004\uffb8\005" +
    "\uffb8\013\uffb8\016\uffb8\023\uffb8\024\uffb8\026\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\045\uffb8\047" +
    "\uffb8\051\uffb8\052\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\063\uffb8\001\002\000\004\025\u0133\001\002\000\004\025" +
    "\u0132\001\002\000\060\003\uffaf\004\uffaf\005\uffaf\013\uffaf" +
    "\016\uffaf\023\uffaf\024\uffaf\026\uffaf\031\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\040\uffaf\045\uffaf\047\uffaf\051\uffaf" +
    "\052\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf\063\uffaf\001" +
    "\002\000\060\003\uffb7\004\uffb7\005\uffb7\013\uffb7\016\uffb7" +
    "\023\uffb7\024\uffb7\026\uffb7\031\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\040\uffb7\045\uffb7\047\uffb7\051\uffb7\052\uffb7" +
    "\055\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\001\002\000" +
    "\012\070\u0114\071\u0115\072\u0117\073\u0116\001\002\000\004" +
    "\030\u0136\001\002\000\030\004\u0138\005\u0137\006\u0139\013" +
    "\032\063\u013c\064\u013a\074\u0140\075\u013f\101\u013e\105\u013d" +
    "\110\u0141\001\002\000\006\004\u014f\101\u0150\001\002\000" +
    "\020\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\025\u014e\001\002\000\006\004\u014a\101\u014b\001\002\000" +
    "\004\025\u0149\001\002\000\004\025\u0148\001\002\000\020" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\025" +
    "\u0147\001\002\000\004\025\u0146\001\002\000\004\025\u0145" +
    "\001\002\000\004\025\u0144\001\002\000\004\025\u0143\001" +
    "\002\000\004\025\u0142\001\002\000\060\003\uffba\004\uffba" +
    "\005\uffba\013\uffba\016\uffba\023\uffba\024\uffba\026\uffba\031" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\040\uffba\045\uffba" +
    "\047\uffba\051\uffba\052\uffba\055\uffba\057\uffba\060\uffba\061" +
    "\uffba\063\uffba\001\002\000\060\003\uffc0\004\uffc0\005\uffc0" +
    "\013\uffc0\016\uffc0\023\uffc0\024\uffc0\026\uffc0\031\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\040\uffc0\045\uffc0\047\uffc0" +
    "\051\uffc0\052\uffc0\055\uffc0\057\uffc0\060\uffc0\061\uffc0\063" +
    "\uffc0\001\002\000\060\003\uffc1\004\uffc1\005\uffc1\013\uffc1" +
    "\016\uffc1\023\uffc1\024\uffc1\026\uffc1\031\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\045\uffc1\047\uffc1\051\uffc1" +
    "\052\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1\063\uffc1\001" +
    "\002\000\060\003\uffbe\004\uffbe\005\uffbe\013\uffbe\016\uffbe" +
    "\023\uffbe\024\uffbe\026\uffbe\031\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\040\uffbe\045\uffbe\047\uffbe\051\uffbe\052\uffbe" +
    "\055\uffbe\057\uffbe\060\uffbe\061\uffbe\063\uffbe\001\002\000" +
    "\060\003\uffbb\004\uffbb\005\uffbb\013\uffbb\016\uffbb\023\uffbb" +
    "\024\uffbb\026\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\040\uffbb\045\uffbb\047\uffbb\051\uffbb\052\uffbb\055\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\063\uffbb\001\002\000\060\003" +
    "\uffbf\004\uffbf\005\uffbf\013\uffbf\016\uffbf\023\uffbf\024\uffbf" +
    "\026\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040" +
    "\uffbf\045\uffbf\047\uffbf\051\uffbf\052\uffbf\055\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\063\uffbf\001\002\000\060\003\uffb9\004" +
    "\uffb9\005\uffb9\013\uffb9\016\uffb9\023\uffb9\024\uffb9\026\uffb9" +
    "\031\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\040\uffb9\045" +
    "\uffb9\047\uffb9\051\uffb9\052\uffb9\055\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\063\uffb9\001\002\000\060\003\uffc5\004\uffc5\005" +
    "\uffc5\013\uffc5\016\uffc5\023\uffc5\024\uffc5\026\uffc5\031\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\045\uffc5\047" +
    "\uffc5\051\uffc5\052\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\063\uffc5\001\002\000\004\025\u014d\001\002\000\004\025" +
    "\u014c\001\002\000\060\003\uffbc\004\uffbc\005\uffbc\013\uffbc" +
    "\016\uffbc\023\uffbc\024\uffbc\026\uffbc\031\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\040\uffbc\045\uffbc\047\uffbc\051\uffbc" +
    "\052\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc\001" +
    "\002\000\060\003\uffc2\004\uffc2\005\uffc2\013\uffc2\016\uffc2" +
    "\023\uffc2\024\uffc2\026\uffc2\031\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\040\uffc2\045\uffc2\047\uffc2\051\uffc2\052\uffc2" +
    "\055\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2\001\002\000" +
    "\060\003\uffc4\004\uffc4\005\uffc4\013\uffc4\016\uffc4\023\uffc4" +
    "\024\uffc4\026\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\040\uffc4\045\uffc4\047\uffc4\051\uffc4\052\uffc4\055\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\063\uffc4\001\002\000\004\025" +
    "\u0152\001\002\000\004\025\u0151\001\002\000\060\003\uffbd" +
    "\004\uffbd\005\uffbd\013\uffbd\016\uffbd\023\uffbd\024\uffbd\026" +
    "\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\040\uffbd" +
    "\045\uffbd\047\uffbd\051\uffbd\052\uffbd\055\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\063\uffbd\001\002\000\060\003\uffc3\004\uffc3" +
    "\005\uffc3\013\uffc3\016\uffc3\023\uffc3\024\uffc3\026\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3\045\uffc3" +
    "\047\uffc3\051\uffc3\052\uffc3\055\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\063\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0150\000\004\002\004\001\001\000\052\007\026\011" +
    "\032\014\042\015\036\016\022\017\021\020\041\024\052" +
    "\027\047\030\046\031\024\032\045\033\030\034\015\036" +
    "\013\037\051\040\012\041\044\043\007\047\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0111\001" +
    "\001\000\004\066\u010e\001\001\000\004\046\257\001\001" +
    "\000\004\013\u0106\001\001\000\052\007\026\011\032\014" +
    "\042\015\036\016\022\017\u0105\020\041\024\052\027\047" +
    "\030\046\031\024\032\045\033\030\034\015\036\013\037" +
    "\051\040\012\041\044\043\007\047\010\001\001\000\004" +
    "\064\u0103\001\001\000\006\026\356\070\357\001\001\000" +
    "\004\063\354\001\001\000\004\013\344\001\001\000\004" +
    "\010\343\001\001\000\004\013\327\001\001\000\002\001" +
    "\001\000\004\053\324\001\001\000\002\001\001\000\004" +
    "\060\322\001\001\000\004\050\314\001\001\000\004\051" +
    "\312\001\001\000\004\050\305\001\001\000\004\062\302" +
    "\001\001\000\014\043\244\044\245\045\247\046\252\047" +
    "\010\001\001\000\004\026\222\001\001\000\002\001\001" +
    "\000\004\067\220\001\001\000\002\001\001\000\004\052" +
    "\216\001\001\000\006\003\174\050\117\001\001\000\004" +
    "\025\162\001\001\000\004\054\157\001\001\000\052\007" +
    "\026\011\032\014\042\015\036\016\022\017\156\020\041" +
    "\024\052\027\047\030\046\031\024\032\045\033\030\034" +
    "\015\036\013\037\051\040\012\041\044\043\007\047\010" +
    "\001\001\000\006\003\152\050\117\001\001\000\052\007" +
    "\026\011\032\014\042\015\036\016\022\017\151\020\041" +
    "\024\052\027\047\030\046\031\024\032\045\033\030\034" +
    "\015\036\013\037\051\040\012\041\044\043\007\047\010" +
    "\001\001\000\004\061\147\001\001\000\004\057\145\001" +
    "\001\000\004\056\143\001\001\000\010\005\112\006\071" +
    "\013\073\001\001\000\004\065\110\001\001\000\004\055" +
    "\106\001\001\000\004\013\055\001\001\000\002\001\001" +
    "\000\004\026\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\104\006\071\013\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\072\006\071\013\073\001\001\000\002\001" +
    "\001\000\006\006\100\013\073\001\001\000\002\001\001" +
    "\000\004\010\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\100\013" +
    "\073\001\001\000\002\001\001\000\052\007\026\011\032" +
    "\014\042\015\036\016\022\017\107\020\041\024\052\027" +
    "\047\030\046\031\024\032\045\033\030\034\015\036\013" +
    "\037\051\040\012\041\044\043\007\047\010\001\001\000" +
    "\002\001\001\000\052\007\026\011\032\014\042\015\036" +
    "\016\022\017\111\020\041\024\052\027\047\030\046\031" +
    "\024\032\045\033\030\034\015\036\013\037\051\040\012" +
    "\041\044\043\007\047\010\001\001\000\002\001\001\000" +
    "\006\006\100\013\073\001\001\000\006\003\124\050\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\142\001\001\000\004\050\141" +
    "\001\001\000\004\050\140\001\001\000\004\050\137\001" +
    "\001\000\004\050\136\001\001\000\004\050\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\007\026\011\032\014\042\015\036\016" +
    "\022\017\144\020\041\024\052\027\047\030\046\031\024" +
    "\032\045\033\030\034\015\036\013\037\051\040\012\041" +
    "\044\043\007\047\010\001\001\000\002\001\001\000\052" +
    "\007\026\011\032\014\042\015\036\016\022\017\146\020" +
    "\041\024\052\027\047\030\046\031\024\032\045\033\030" +
    "\034\015\036\013\037\051\040\012\041\044\043\007\047" +
    "\010\001\001\000\002\001\001\000\052\007\026\011\032" +
    "\014\042\015\036\016\022\017\150\020\041\024\052\027" +
    "\047\030\046\031\024\032\045\033\030\034\015\036\013" +
    "\037\051\040\012\041\044\043\007\047\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\154\006\071\013\073\001\001\000\006\006\100\013" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\007\026\011\032\014\042\015\036\016\022\017\160\020" +
    "\041\024\052\027\047\030\046\031\024\032\045\033\030" +
    "\034\015\036\013\037\051\040\012\041\044\043\007\047" +
    "\010\001\001\000\002\001\001\000\004\010\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\167\006\170\013\073\001\001" +
    "\000\004\025\173\001\001\000\002\001\001\000\010\004" +
    "\172\006\170\013\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\007\026\011\032\014" +
    "\042\015\036\016\022\017\176\020\041\024\052\027\047" +
    "\030\046\031\024\032\045\033\030\034\015\036\013\037" +
    "\051\040\012\041\044\043\007\047\010\001\001\000\006" +
    "\021\200\023\201\001\001\000\052\007\026\011\032\014" +
    "\042\015\036\016\022\017\214\020\041\024\052\027\047" +
    "\030\046\031\024\032\045\033\030\034\015\036\013\037" +
    "\051\040\012\041\044\043\007\047\010\001\001\000\002" +
    "\001\001\000\004\021\210\001\001\000\002\001\001\000" +
    "\006\003\204\050\117\001\001\000\002\001\001\000\052" +
    "\007\026\011\032\014\042\015\036\016\022\017\206\020" +
    "\041\024\052\027\047\030\046\031\024\032\045\033\030" +
    "\034\015\036\013\037\051\040\012\041\044\043\007\047" +
    "\010\001\001\000\004\023\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\215\001\001\000\002\001\001" +
    "\000\052\007\026\011\032\014\042\015\036\016\022\017" +
    "\217\020\041\024\052\027\047\030\046\031\024\032\045" +
    "\033\030\034\015\036\013\037\051\040\012\041\044\043" +
    "\007\047\010\001\001\000\002\001\001\000\052\007\026" +
    "\011\032\014\042\015\036\016\022\017\221\020\041\024" +
    "\052\027\047\030\046\031\024\032\045\033\030\034\015" +
    "\036\013\037\051\040\012\041\044\043\007\047\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\043\244\044\301\045\247\046\252\047\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\043\244\044" +
    "\271\045\247\046\252\047\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\254\047\253\001\001\000" +
    "\004\046\257\001\001\000\006\045\255\046\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\261\001" +
    "\001\000\014\043\244\044\264\045\247\046\252\047\010" +
    "\001\001\000\004\046\262\001\001\000\006\043\263\047" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\273\001\001" +
    "\000\004\047\274\001\001\000\002\001\001\000\014\043" +
    "\244\044\276\045\247\046\252\047\010\001\001\000\002" +
    "\001\001\000\006\045\300\046\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\007\026\011\032\014\042" +
    "\015\036\016\022\017\303\020\041\024\052\027\047\030" +
    "\046\031\024\032\045\033\030\034\015\036\013\037\051" +
    "\040\012\041\044\043\007\047\010\001\001\000\002\001" +
    "\001\000\004\050\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\007\026\011\032\014\042\015\036\016\022" +
    "\017\313\020\041\024\052\027\047\030\046\031\024\032" +
    "\045\033\030\034\015\036\013\037\051\040\012\041\044" +
    "\043\007\047\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\007" +
    "\026\011\032\014\042\015\036\016\022\017\323\020\041" +
    "\024\052\027\047\030\046\031\024\032\045\033\030\034" +
    "\015\036\013\037\051\040\012\041\044\043\007\047\010" +
    "\001\001\000\002\001\001\000\052\007\026\011\032\014" +
    "\042\015\036\016\022\017\325\020\041\024\052\027\047" +
    "\030\046\031\024\032\045\033\030\034\015\036\013\037" +
    "\051\040\012\041\044\043\007\047\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\332\035\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\332\035" +
    "\336\001\001\000\002\001\001\000\006\013\332\035\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\347" +
    "\006\170\013\073\001\001\000\006\013\332\035\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\352" +
    "\006\170\013\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\007\026\011\032\014\042\015\036\016\022" +
    "\017\355\020\041\024\052\027\047\030\046\031\024\032" +
    "\045\033\030\034\015\036\013\037\051\040\012\041\044" +
    "\043\007\047\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\363\001\001\000\004\012\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\007\026" +
    "\011\032\014\042\015\036\016\022\017\u0104\020\041\024" +
    "\052\027\047\030\046\031\024\032\045\033\030\034\015" +
    "\036\013\037\051\040\012\041\044\043\007\047\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\u0108" +
    "\006\170\013\073\001\001\000\006\013\332\035\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\007\026\011\032\014\042\015\036\016\022" +
    "\017\u010f\020\041\024\052\027\047\030\046\031\024\032" +
    "\045\033\030\034\015\036\013\037\051\040\012\041\044" +
    "\043\007\047\010\001\001\000\002\001\001\000\004\070" +
    "\357\001\001\000\002\001\001\000\004\042\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\u011d\047\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0134\001\001\000\002\001\001\000" +
    "\006\043\u013a\047\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean cambiar = true;
    int countTab = 1;
    int cont = 0;
    public String python = "";
    public String golang = "";
    public int erroresSintacticos = 0;
    String condicion = "";
    String instruccion = "";
    String tmpInstruccion = "";
    String valor = "";
    String tmpPython = "";
    String tmpImprimir = "";
    String tmpImprimirnl = "";
    ArrayList<String> variables = new ArrayList<String>();
    ArrayList<String> condiciones = new ArrayList<String>();
    ArrayList<String> tmpListaNombres = new ArrayList<String>();
    ArrayList<String> tmpOperacion = new ArrayList<String>();
    ArrayList<String> tmpOperadorLista = new ArrayList<String>();
    public void syntax_error(Symbol s){ 
        erroresSintacticos++;
        //Imprimir error
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    //Repet tab
        public String tab(int n){
                String tab = "";
                for(int i = 0; i < n; i++){
                tab += "\t";
                }
                return tab;
        }
    //ASCII to char
        public String asciiToChar(String ascii){
                ascii = ascii.replace("{", "");
                ascii = ascii.replace("}", "");
                ascii = ascii.replace("$", "");
                ascii = ascii.replace("'", "");
                System.out.println(ascii);
                String[] asciiArray = ascii.split(",");
                String charValue = "";
                for(int i = 0; i < asciiArray.length; i++){
                charValue += (char)Integer.parseInt(asciiArray[i]);
                }
                return "'" + charValue + "'";
        }
    public void agregarTmpListaNombres(String a){


        for(String i: tmpListaNombres){
                python += i + " = " + a + ";\n";
        }; 
        
        
        tmpListaNombres = new ArrayList<String>();
    }

    public void agregarTmpOperacionLista(String a){
        tmpOperacion.add( "(" + a + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

    }

    public void agregarTmpOperacionLista2(){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 2) + ")" + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + 
        "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")"); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);
        tmpOperacion.remove(tmpOperacion.size() - 2);
    }

    public void agregarTmpOperacionLista3(String a){
        tmpOperacion.add( "(" + tmpOperacion.get(tmpOperacion.size() - 1) + ")" +
         tmpOperadorLista.get(tmpOperadorLista.size() - 1) + "(" + a + ")" 
        ); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
        tmpOperacion.remove(tmpOperacion.size() - 2);

    }

    public void agregarTmpOperacion(String a, String b){
        tmpOperacion.add(a + tmpOperadorLista.get(tmpOperadorLista.size() - 1) + b); 
        tmpOperadorLista.remove(tmpOperadorLista.size() - 1);
    }
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio E prFin 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= DECLARACION E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un if");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= IF NT$0 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= COMENTARIO NT$1 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un comentarioVariasLineas");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= COMENTARIO_VARIAS_LINEAS NT$2 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un asignacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= ASIGNACION NT$3 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un seleccionMultiple");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= SELECCION_MULTIPLE NT$4 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un para");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= PARA NT$5 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un paraSalto");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= PARA_SALTO NT$6 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un mientras");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= MIENTRAS NT$7 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$8 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un repetir");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= REPETIR NT$8 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$9 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un retorno");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= RETORNO NT$9 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$10 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un metodo");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= METODO NT$10 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$11 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un funcion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= FUNCION NT$11 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$12 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo un ejecutar");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= EJECUTAR NT$12 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= IMPRIMIR E 
            {
              String RESULT =null;
		tmpInstruccion += tab(countTab) + tmpImprimir + "\n"; countTab += 1;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= IMPRIMIR_NL E 
            {
              String RESULT =null;
		tmpInstruccion += tab(countTab) + tmpImprimirnl + "\n"; countTab += 1;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$13 ::= 
            {
              String RESULT =null;
System.out.println("Se realizo una operacion");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= OPERACION NT$13 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$14 ::= 
            {
              String RESULT =null;
tmpPython = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",53, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= error NT$14 E 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACIONES ::= OPERACIONES2 OPERACIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACIONES ::= OPERACIONES2 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACIONES ::= OPERACION OPERACIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACIONES ::= OPERACION 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERANDOS ::= tnum 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERANDOS ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION ::= OPERANDOS OPERADORES OPERANDOS 
            {
              String RESULT =null;
		agregarTmpOperacion(variables.get(variables.size() - 2),variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= OPERANDOS OPERADORES OPERANDOS OPERADORES OPERACION 
            {
              String RESULT =null;
		agregarTmpOperacion(variables.get(variables.size() - 2),variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= OPERANDOS tpot cor1 OPERANDOS cor2 
            {
              String RESULT =null;
		tmpOperacion.add(variables.get(variables.size() - 2) + "**" +variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= OPERANDOS OPERADORES pare1 OPERACIONES pare2 
            {
              String RESULT =null;
		agregarTmpOperacionLista(variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= pare1 OPERACIONES pare2 OPERADORES OPERANDOS 
            {
              String RESULT =null;
		agregarTmpOperacionLista3(variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION ::= pare1 OPERACIONES pare2 OPERADORES pare1 OPERACIONES pare2 
            {
              String RESULT =null;
		agregarTmpOperacionLista2();
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION ::= pare1 OPERACIONES pare2 OPERADORES pare1 OPERACIONES pare2 OPERACIONES2 
            {
              String RESULT =null;
		agregarTmpOperacionLista2();
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACIONES2 ::= OPERADORES OPERACION OPERACIONES2 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES2",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACIONES2 ::= OPERADORES OPERANDOS 
            {
              String RESULT =null;
		
                        agregarTmpOperacionLista3(variables.get(variables.size() - 1));
                        variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES2",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADORES ::= tsum 
            {
              String RESULT =null;
		 tmpOperadorLista.add("+");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADORES ::= trest 
            {
              String RESULT =null;
		 tmpOperadorLista.add("-");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADORES ::= tdiv 
            {
              String RESULT =null;
		 tmpOperadorLista.add("/");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADORES ::= tmul 
            {
              String RESULT =null;
		tmpOperadorLista.add("*");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADORES ::= tmod 
            {
              String RESULT =null;
		tmpOperadorLista.add("%");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= prBoolean 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= prCaracter 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= prNumero 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= prCadena 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor trest tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = -" + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tsum tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = +" + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = False\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = True\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor trest prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = -" + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor tsum prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = +" + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor ascii tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + asciiToChar(b) + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= prIngresar tvariable prComo TIPO prConValor OPERACION tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		
                        
                        python += a + " = " + tmpOperacion.get(tmpOperacion.size() - 1) + "\n";
                        
                        tmpOperacion = new ArrayList<String>();
                        tmpListaNombres = new ArrayList<String>();
                        cambiar = true; 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor trest tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = -" + a + ";\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tsum tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = +" + a + ";\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = True;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = False;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor trest prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = -" + a + ";\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor tsum prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = +" + a + ";\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo TIPO prConValor OPERACION tpuntoycoma 
            {
              String RESULT =null;
		agregarTmpListaNombres(tmpOperacion.get(tmpOperacion.size() - 1));
                        tmpOperacion = new ArrayList<String>();
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COMENTARIO ::= tcomentario 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python +=c.replace("//","#")+"\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COMENTARIO_VARIAS_LINEAS ::= tcomentariovariaslineas 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		python += c.replace("/*","'''").replace("*/","'''") + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO_VARIAS_LINEAS",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIGNACION ::= tvariable FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNACION ::= tvariable FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNACION ::= tvariable FLECHA tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNACION ::= tvariable FLECHA prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNACION ::= tvariable FLECHA prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = True;\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGNACION ::= tvariable FLECHA prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a+" = False;\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ASIGNACION ::= tvariable FLECHA caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		python += a + " = " + b + ";\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ASIGNACION ::= LISTA_NOMBRES FLECHA tcadena tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ASIGNACION ::= LISTA_NOMBRES FLECHA tnum tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNACION ::= LISTA_NOMBRES FLECHA tvariable tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ASIGNACION ::= LISTA_NOMBRES FLECHA prFloat tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASIGNACION ::= LISTA_NOMBRES FLECHA prVerdadero tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = True;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGNACION ::= LISTA_NOMBRES FLECHA prFalso tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		for(String i: tmpListaNombres){
                         python += i + " = False;\n";
                }; 
                        tmpListaNombres = new ArrayList<String>(); 
                
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNACION ::= LISTA_NOMBRES FLECHA caracter tpuntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		agregarTmpListaNombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SELECCION_MULTIPLE ::= prSegun SEGUN prFinSegun 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES SEGUN 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR ::= tcadena 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		valor = b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$15 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",54, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LISTA_NOMBRES ::= tvariable NT$15 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LISTA_NOMBRES ::= 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$16 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",55, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LISTA_NOMBRES2 ::= tcoma tvariable NT$16 LISTA_NOMBRES2 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LISTA_NOMBRES2 ::= tcoma tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		tmpListaNombres.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IF ::= prSi CONDICION prEntonces E prFinSi 
            {
              String RESULT =null;
		
                tmpPython += "if " + condicion + ":\n";
                tmpPython += tmpInstruccion + "\n"; 
                python += tmpPython + "\n"; 
                tmpPython = "";
                countTab = 1;
                instruccion = "";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IF ::= prSi CONDICION prEntonces E O_SI prFinSi 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IF ::= prSi CONDICION prEntonces E DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IF ::= prSi CONDICION prEntonces E O_SI DE_LO_CONTRARIO prFinSi 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DE_LO_CONTRARIO ::= prDE_LO_CONTRARIO E DE_LO_CONTRARIO 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DE_LO_CONTRARIO ::= prDE_LO_CONTRARIO E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // O_SI ::= prO_Si CONDICION prEntonces E O_SI 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // O_SI ::= prO_Si CONDICION prEntonces E 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICION ::= VARIABLES prEsIgual VARIABLES 
            {
              String RESULT =null;
		
                condicion = variables.get(variables.size() - 2) + " == " + variables.get(variables.size() - 1); 
                variables.remove(variables.size() - 1);
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICION ::= VARIABLES prMayor VARIABLES 
            {
              String RESULT =null;
		
                condicion = variables.get(variables.size() - 2) + " > " + variables.get(variables.size() - 1); 
                variables.remove(variables.size() - 1);
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICION ::= VARIABLES prMayorOIgual VARIABLES 
            {
              String RESULT =null;
		
                condicion = variables.get(variables.size() - 2) + " >= " + variables.get(variables.size() - 1); 
                variables.remove(variables.size() - 1);
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICION ::= VARIABLES prMenor VARIABLES 
            {
              String RESULT =null;
		
                condicion = variables.get(variables.size() - 2) + " < " + variables.get(variables.size() - 1); 
                variables.remove(variables.size() - 1);
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICION ::= VARIABLES prMenorOIgual VARIABLES 
            {
              String RESULT =null;
		
                condicion = variables.get(variables.size() - 2) + " <= " + variables.get(variables.size() - 1); 
                variables.remove(variables.size() - 1);
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICION ::= VARIABLES prEsDiferente VARIABLES 
            {
              String RESULT =null;
		
                condicion = variables.get(variables.size() - 2) + " != " + variables.get(variables.size() - 1); 
                variables.remove(variables.size() - 1);
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICION ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                condicion = a; 
                variables.remove(variables.size() - 1);
                variables.remove(variables.size() - 1);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VARIABLE ::= tvariable 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VARIABLES ::= tvariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VARIABLES ::= tnum 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VARIABLES ::= tcadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VARIABLES ::= prFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VARIABLES ::= prVerdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VARIABLES ::= prFalso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VARIABLES ::= caracter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VARIABLES ::= ascii 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		variables.add(asciiToChar(a));
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // INSTRUCCIONES_CICLO ::= INSTRUCCIONES_CICLO INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // INSTRUCCIONES_CICLO ::= INSTRUCCION tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INSTRUCCION ::= VARIABLE tigual VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARA ::= prPara VARIABLE FLECHA tnum prHasta tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FLECHA ::= trest tmayor 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FLECHA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARA_SALTO ::= prPara VARIABLE FLECHA tnum prHasta tnum prCon prIncremental tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA_SALTO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MIENTRAS ::= prMientras CONDICION prHacer INSTRUCCIONES_CICLO prFinMientras 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // REPETIR ::= prRepetir INSTRUCCIONES_CICLO prHasta CONDICION 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // RETORNO ::= prRetornar VALOR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // METODO ::= prMetodo VARIABLE prConParametros LISTA_PARAMETROS prConValor VALOR prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // METODO ::= prMetodo VARIABLE INSTRUCCIONES prFinMetodo 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LISTA_PARAMETROS ::= VARIABLE tcadena LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LISTA_PARAMETROS ::= VARIABLE tcadena tcoma LISTA_PARAMETROS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FUNCION ::= prFuncion VARIABLE tcadena prConParametros LISTA_PARAMETROS INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FUNCION ::= prFuncion VARIABLE tcadena INSTRUCCIONES prFinFuncion 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EJECUTAR ::= prEjecutar VARIABLE pare1 pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EJECUTAR ::= prEjecutar VARIABLE pare1 LISTA_PARAMETROS pare2 tpuntoycoma 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // IMPRIMIR ::= prImprimir VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimir = "print(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
                python += tmpImprimir + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // IMPRIMIR ::= prImprimir pare1 VARIABLES pare2 tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimir = "print(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
                python += tmpImprimir + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // IMPRIMIR_NL ::= prImprimirNl VARIABLES tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimirnl = "println(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
                python += tmpImprimirnl + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // IMPRIMIR_NL ::= prImprimirNl pare1 VARIABLES pare2 tpuntoycoma 
            {
              String RESULT =null;
		
                tmpImprimirnl = "println(" + variables.get(variables.size() - 1) + ")";
                variables.remove(variables.size() - 1);
                python += tmpImprimirnl + "\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
