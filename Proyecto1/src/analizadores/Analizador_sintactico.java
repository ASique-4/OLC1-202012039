
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\005\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\003\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\002\000\002\014\011" +
    "\000\002\014\011\000\002\014\011\000\002\014\011\000" +
    "\002\015\003\000\002\015\003\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\023" +
    "\005\000\002\024\010\000\002\024\007\000\002\010\003" +
    "\000\002\010\003\000\002\011\004\000\002\011\002\000" +
    "\002\012\005\000\002\012\004\000\002\007\011\000\002" +
    "\020\005\000\002\020\002\000\002\022\007\000\002\022" +
    "\002\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\013\003\000\002\004\005\000\002\004\004\000" +
    "\002\005\005\000\002\005\004\000\002\006\005\000\002" +
    "\026\013\000\002\025\004\000\002\027\016\000\002\030" +
    "\007\000\002\031\006\000\002\032\004\000\002\033\011" +
    "\000\002\033\006\000\002\034\005\000\002\034\006\000" +
    "\002\035\011\000\002\035\007\000\002\036\007\000\002" +
    "\036\010\000\002\037\004\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\015\004\001\002\000\044\005\uffdf\016" +
    "\ufff0\023\023\024\042\026\036\031\037\036\026\040\021" +
    "\045\046\047\025\051\011\052\031\055\012\057\044\060" +
    "\045\061\024\063\027\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\004\016\ufff9\001\002\000" +
    "\044\005\uffdf\016\ufff0\023\023\024\042\026\036\031\037" +
    "\036\026\040\021\045\046\047\025\051\011\052\031\055" +
    "\012\057\044\060\045\061\024\063\027\001\002\000\006" +
    "\063\065\064\066\001\002\000\004\063\027\001\002\000" +
    "\044\005\uffdf\016\ufff0\023\023\024\042\026\036\031\037" +
    "\036\026\040\021\045\046\047\025\051\011\052\031\055" +
    "\012\057\044\060\045\061\024\063\027\001\002\000\044" +
    "\005\uffdf\016\ufff0\023\023\024\042\026\036\031\037\036" +
    "\026\040\021\045\046\047\025\051\011\052\031\055\012" +
    "\057\044\060\045\061\024\063\027\001\002\000\044\005" +
    "\uffdf\016\ufff0\023\023\024\042\026\036\031\037\036\026" +
    "\040\021\045\046\047\025\051\011\052\031\055\012\057" +
    "\044\060\045\061\024\063\027\001\002\000\006\005\113" +
    "\021\156\001\002\000\044\005\uffdf\016\ufff0\023\023\024" +
    "\042\026\036\031\037\036\026\040\021\045\046\047\025" +
    "\051\011\052\031\055\012\057\044\060\045\061\024\063" +
    "\027\001\002\000\044\005\uffdf\016\ufff0\023\023\024\042" +
    "\026\036\031\037\036\026\040\021\045\046\047\025\051" +
    "\011\052\031\055\012\057\044\060\045\061\024\063\027" +
    "\001\002\000\004\063\027\001\002\000\044\005\uffdf\016" +
    "\ufff0\023\023\024\042\026\036\031\037\036\026\040\021" +
    "\045\046\047\025\051\011\052\031\055\012\057\044\060" +
    "\045\061\024\063\027\001\002\000\044\005\uffeb\016\uffeb" +
    "\023\uffeb\024\uffeb\026\uffeb\031\uffeb\036\uffeb\040\uffeb\045" +
    "\uffeb\047\uffeb\051\uffeb\052\uffeb\055\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\063\uffeb\001\002\000\004\064\217\001\002\000" +
    "\004\063\027\001\002\000\004\017\204\001\002\000\064" +
    "\005\uffd4\013\uffd4\016\uffd4\021\uffd4\023\uffd4\024\uffd4\026" +
    "\uffd4\027\uffd4\031\uffd4\032\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\045\uffd4\047\uffd4\051\uffd4\052\uffd4\054\uffd4\055\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\001\002" +
    "\000\044\005\uffdf\016\ufff0\023\023\024\042\026\036\031" +
    "\037\036\026\040\021\045\046\047\025\051\011\052\031" +
    "\055\012\057\044\060\045\061\024\063\027\001\002\000" +
    "\004\063\027\001\002\000\004\016\172\001\002\000\044" +
    "\005\uffdf\016\ufff0\023\023\024\042\026\036\031\037\036" +
    "\026\040\021\045\046\047\025\051\011\052\031\055\012" +
    "\057\044\060\045\061\024\063\027\001\002\000\044\005" +
    "\uffdf\016\ufff0\023\023\024\042\026\036\031\037\036\026" +
    "\040\021\045\046\047\025\051\011\052\031\055\012\057" +
    "\044\060\045\061\024\063\027\001\002\000\044\005\uffdf" +
    "\016\ufff0\023\023\024\042\026\036\031\037\036\026\040" +
    "\021\045\046\047\025\051\011\052\031\055\012\057\044" +
    "\060\045\061\024\063\027\001\002\000\006\027\uffdf\063" +
    "\027\001\002\000\004\063\027\001\002\000\044\005\uffdf" +
    "\016\ufff0\023\023\024\042\026\036\031\037\036\026\040" +
    "\021\045\046\047\025\051\011\052\031\055\012\057\044" +
    "\060\045\061\024\063\027\001\002\000\004\005\113\001" +
    "\002\000\044\005\uffea\016\uffea\023\uffea\024\uffea\026\uffea" +
    "\031\uffea\036\uffea\040\uffea\045\uffea\047\uffea\051\uffea\052" +
    "\uffea\055\uffea\057\uffea\060\uffea\061\uffea\063\uffea\001\002" +
    "\000\044\005\uffdf\016\ufff0\023\023\024\042\026\036\031" +
    "\037\036\026\040\021\045\046\047\025\051\011\052\031" +
    "\055\012\057\044\060\045\061\024\063\027\001\002\000" +
    "\004\063\027\001\002\000\004\064\074\001\002\000\004" +
    "\063\027\001\002\000\044\005\uffdf\016\ufff0\023\023\024" +
    "\042\026\036\031\037\036\026\040\021\045\046\047\025" +
    "\051\011\052\031\055\012\057\044\060\045\061\024\063" +
    "\027\001\002\000\004\016\ufff4\001\002\000\004\037\060" +
    "\001\002\000\004\062\053\001\002\000\004\062\054\001" +
    "\002\000\010\004\056\063\027\064\055\001\002\000\050" +
    "\005\uffd6\016\uffd6\023\uffd6\024\uffd6\026\uffd6\031\uffd6\032" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\045\uffd6\047\uffd6\051\uffd6" +
    "\052\uffd6\055\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6\001" +
    "\002\000\050\005\uffd5\016\uffd5\023\uffd5\024\uffd5\026\uffd5" +
    "\031\uffd5\032\uffd5\036\uffd5\037\uffd5\040\uffd5\045\uffd5\047" +
    "\uffd5\051\uffd5\052\uffd5\055\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\063\uffd5\001\002\000\050\005\uffd7\016\uffd7\023\uffd7\024" +
    "\uffd7\026\uffd7\031\uffd7\032\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\045\uffd7\047\uffd7\051\uffd7\052\uffd7\055\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\063\uffd7\001\002\000\004\063\027\001\002" +
    "\000\004\025\073\001\002\000\006\046\071\063\027\001" +
    "\002\000\004\062\064\001\002\000\006\063\065\064\066" +
    "\001\002\000\052\005\uffe2\016\uffe2\020\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\031\uffe2\036\uffe2\040\uffe2\045\uffe2" +
    "\047\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\063\uffe2\001\002\000\052\005\uffe1\016\uffe1" +
    "\020\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031\uffe1\036" +
    "\uffe1\040\uffe1\045\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\055\uffe1\057\uffe1\060\uffe1\061\uffe1\063\uffe1\001\002\000" +
    "\004\025\uffcf\001\002\000\004\025\072\001\002\000\044" +
    "\005\uffcb\016\uffcb\023\uffcb\024\uffcb\026\uffcb\031\uffcb\036" +
    "\uffcb\040\uffcb\045\uffcb\047\uffcb\051\uffcb\052\uffcb\055\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\063\uffcb\001\002\000\012\041" +
    "\uffd1\042\uffd1\046\uffd1\063\uffd1\001\002\000\012\041\uffd0" +
    "\042\uffd0\046\uffd0\063\uffd0\001\002\000\044\005\uffc0\016" +
    "\uffc0\023\uffc0\024\uffc0\026\uffc0\031\uffc0\036\uffc0\040\uffc0" +
    "\045\uffc0\047\uffc0\051\uffc0\052\uffc0\055\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\063\uffc0\001\002\000\004\013\076\001\002" +
    "\000\006\014\100\063\027\001\002\000\004\014\107\001" +
    "\002\000\004\025\106\001\002\000\004\064\102\001\002" +
    "\000\006\021\104\063\027\001\002\000\010\014\uffc6\030" +
    "\uffc6\063\uffc6\001\002\000\004\063\027\001\002\000\010" +
    "\014\uffc5\030\uffc5\063\uffc5\001\002\000\044\005\uffc2\016" +
    "\uffc2\023\uffc2\024\uffc2\026\uffc2\031\uffc2\036\uffc2\040\uffc2" +
    "\045\uffc2\047\uffc2\051\uffc2\052\uffc2\055\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\063\uffc2\001\002\000\004\025\110\001\002" +
    "\000\044\005\uffc1\016\uffc1\023\uffc1\024\uffc1\026\uffc1\031" +
    "\uffc1\036\uffc1\040\uffc1\045\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\055\uffc1\057\uffc1\060\uffc1\061\uffc1\063\uffc1\001\002\000" +
    "\004\016\ufff8\001\002\000\006\004\116\064\115\001\002" +
    "\000\004\022\114\001\002\000\006\004\uffcd\064\uffcd\001" +
    "\002\000\004\025\120\001\002\000\004\025\117\001\002" +
    "\000\044\005\uffe6\016\uffe6\023\uffe6\024\uffe6\026\uffe6\031" +
    "\uffe6\036\uffe6\040\uffe6\045\uffe6\047\uffe6\051\uffe6\052\uffe6" +
    "\055\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6\001\002\000" +
    "\044\005\uffe8\016\uffe8\023\uffe8\024\uffe8\026\uffe8\031\uffe8" +
    "\036\uffe8\040\uffe8\045\uffe8\047\uffe8\051\uffe8\052\uffe8\055" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\063\uffe8\001\002\000\004" +
    "\016\ufffd\001\002\000\004\032\123\001\002\000\004\063" +
    "\027\001\002\000\010\033\uffd8\034\131\035\uffd8\001\002" +
    "\000\004\025\126\001\002\000\022\017\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\053\uffd2\056\uffd2\063\027\067\uffd2\001\002" +
    "\000\020\017\uffd3\033\uffd3\034\uffd3\035\uffd3\053\uffd3\056" +
    "\uffd3\067\uffd3\001\002\000\006\033\uffda\035\136\001\002" +
    "\000\004\063\027\001\002\000\004\032\133\001\002\000" +
    "\004\063\027\001\002\000\010\033\uffd8\034\131\035\uffd8" +
    "\001\002\000\006\033\uffd9\035\uffd9\001\002\000\004\063" +
    "\027\001\002\000\004\033\140\001\002\000\044\005\uffdc" +
    "\016\uffdc\023\uffdc\024\uffdc\026\uffdc\031\uffdc\036\uffdc\040" +
    "\uffdc\045\uffdc\047\uffdc\051\uffdc\052\uffdc\055\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\063\uffdc\001\002\000\006\033\uffda\035" +
    "\136\001\002\000\004\033\uffdb\001\002\000\006\021\156" +
    "\027\154\001\002\000\004\027\145\001\002\000\004\071" +
    "\146\001\002\000\004\030\147\001\002\000\006\004\151" +
    "\064\150\001\002\000\004\025\153\001\002\000\004\025" +
    "\152\001\002\000\044\005\uffed\016\uffed\023\uffed\024\uffed" +
    "\026\uffed\031\uffed\036\uffed\040\uffed\045\uffed\047\uffed\051" +
    "\uffed\052\uffed\055\uffed\057\uffed\060\uffed\061\uffed\063\uffed" +
    "\001\002\000\044\005\uffec\016\uffec\023\uffec\024\uffec\026" +
    "\uffec\031\uffec\036\uffec\040\uffec\045\uffec\047\uffec\051\uffec" +
    "\052\uffec\055\uffec\057\uffec\060\uffec\061\uffec\063\uffec\001" +
    "\002\000\004\071\161\001\002\000\006\005\uffe0\027\uffe0" +
    "\001\002\000\004\063\027\001\002\000\010\005\uffdd\021" +
    "\156\027\uffdd\001\002\000\006\005\uffde\027\uffde\001\002" +
    "\000\004\030\162\001\002\000\006\004\164\064\163\001" +
    "\002\000\004\025\166\001\002\000\004\025\165\001\002" +
    "\000\044\005\uffee\016\uffee\023\uffee\024\uffee\026\uffee\031" +
    "\uffee\036\uffee\040\uffee\045\uffee\047\uffee\051\uffee\052\uffee" +
    "\055\uffee\057\uffee\060\uffee\061\uffee\063\uffee\001\002\000" +
    "\044\005\uffef\016\uffef\023\uffef\024\uffef\026\uffef\031\uffef" +
    "\036\uffef\040\uffef\045\uffef\047\uffef\051\uffef\052\uffef\055" +
    "\uffef\057\uffef\060\uffef\061\uffef\063\uffef\001\002\000\004" +
    "\016\ufff7\001\002\000\004\016\ufff1\001\002\000\004\016" +
    "\ufffc\001\002\000\004\002\000\001\002\000\006\054\174" +
    "\063\027\001\002\000\004\063\027\001\002\000\004\053" +
    "\176\001\002\000\044\005\uffc7\016\uffc7\023\uffc7\024\uffc7" +
    "\026\uffc7\031\uffc7\036\uffc7\040\uffc7\045\uffc7\047\uffc7\051" +
    "\uffc7\052\uffc7\055\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7" +
    "\001\002\000\004\030\200\001\002\000\006\063\065\064" +
    "\066\001\002\000\004\053\202\001\002\000\044\005\uffc8" +
    "\016\uffc8\023\uffc8\024\uffc8\026\uffc8\031\uffc8\036\uffc8\040" +
    "\uffc8\045\uffc8\047\uffc8\051\uffc8\052\uffc8\055\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\063\uffc8\001\002\000\004\016\ufff5\001" +
    "\002\000\006\063\065\064\066\001\002\000\004\067\206" +
    "\001\002\000\044\005\uffe5\016\uffe5\023\uffe5\024\uffe5\026" +
    "\uffe5\031\uffe5\036\uffe5\040\uffe5\045\uffe5\047\uffe5\051\uffe5" +
    "\052\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\063\uffe5\001" +
    "\002\000\004\020\210\001\002\000\004\032\211\001\002" +
    "\000\004\063\027\001\002\000\006\017\204\067\uffe3\001" +
    "\002\000\004\067\uffe4\001\002\000\006\041\215\063\027" +
    "\001\002\000\004\063\027\001\002\000\044\005\uffca\016" +
    "\uffca\023\uffca\024\uffca\026\uffca\031\uffca\036\uffca\040\uffca" +
    "\045\uffca\047\uffca\051\uffca\052\uffca\055\uffca\057\uffca\060" +
    "\uffca\061\uffca\063\uffca\001\002\000\044\005\uffbf\016\uffbf" +
    "\023\uffbf\024\uffbf\026\uffbf\031\uffbf\036\uffbf\040\uffbf\045" +
    "\uffbf\047\uffbf\051\uffbf\052\uffbf\055\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\063\uffbf\001\002\000\004\016\ufffb\001\002\000" +
    "\004\005\113\001\002\000\004\004\223\001\002\000\004" +
    "\041\224\001\002\000\004\004\225\001\002\000\006\037" +
    "\226\043\227\001\002\000\004\063\027\001\002\000\004" +
    "\044\230\001\002\000\004\004\231\001\002\000\004\037" +
    "\232\001\002\000\004\063\027\001\002\000\006\042\234" +
    "\063\027\001\002\000\004\016\uffcc\001\002\000\006\042" +
    "\236\063\027\001\002\000\044\005\uffce\016\uffce\023\uffce" +
    "\024\uffce\026\uffce\031\uffce\036\uffce\040\uffce\045\uffce\047" +
    "\uffce\051\uffce\052\uffce\055\uffce\057\uffce\060\uffce\061\uffce" +
    "\063\uffce\001\002\000\004\016\ufffa\001\002\000\004\016" +
    "\ufffe\001\002\000\006\004\243\064\242\001\002\000\004" +
    "\025\245\001\002\000\004\025\244\001\002\000\044\005" +
    "\uffe7\016\uffe7\023\uffe7\024\uffe7\026\uffe7\031\uffe7\036\uffe7" +
    "\040\uffe7\045\uffe7\047\uffe7\051\uffe7\052\uffe7\055\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\063\uffe7\001\002\000\044\005\uffe9" +
    "\016\uffe9\023\uffe9\024\uffe9\026\uffe9\031\uffe9\036\uffe9\040" +
    "\uffe9\045\uffe9\047\uffe9\051\uffe9\052\uffe9\055\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\063\uffe9\001\002\000\004\016\ufff6\001" +
    "\002\000\004\016\ufff2\001\002\000\004\016\ufff3\001\002" +
    "\000\004\064\252\001\002\000\006\054\253\063\027\001" +
    "\002\000\004\063\027\001\002\000\004\056\255\001\002" +
    "\000\044\005\uffc3\016\uffc3\023\uffc3\024\uffc3\026\uffc3\031" +
    "\uffc3\036\uffc3\040\uffc3\045\uffc3\047\uffc3\051\uffc3\052\uffc3" +
    "\055\uffc3\057\uffc3\060\uffc3\061\uffc3\063\uffc3\001\002\000" +
    "\004\063\027\001\002\000\004\056\260\001\002\000\044" +
    "\005\uffc4\016\uffc4\023\uffc4\024\uffc4\026\uffc4\031\uffc4\036" +
    "\uffc4\040\uffc4\045\uffc4\047\uffc4\051\uffc4\052\uffc4\055\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\063\uffc4\001\002\000\044\005" +
    "\uffc9\016\uffc9\023\uffc9\024\uffc9\026\uffc9\031\uffc9\036\uffc9" +
    "\040\uffc9\045\uffc9\047\uffc9\051\uffc9\052\uffc9\055\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\063\uffc9\001\002\000\004\016\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\002\004\001\001\000\046\007\016\011" +
    "\040\013\015\014\007\015\037\016\031\017\032\023\021" +
    "\026\017\027\006\030\042\031\034\032\014\033\027\035" +
    "\046\036\012\037\013\040\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\007\016\011" +
    "\040\013\015\014\007\015\037\016\261\017\032\023\021" +
    "\026\017\027\006\030\042\031\034\032\014\033\027\035" +
    "\046\036\012\037\013\040\033\001\001\000\004\010\260" +
    "\001\001\000\004\013\250\001\001\000\046\007\016\011" +
    "\040\013\015\014\007\015\037\016\247\017\032\023\021" +
    "\026\017\027\006\030\042\031\034\032\014\033\027\035" +
    "\046\036\012\037\013\040\033\001\001\000\046\007\016" +
    "\011\040\013\015\014\007\015\037\016\246\017\032\023" +
    "\021\026\017\027\006\030\042\031\034\032\014\033\027" +
    "\035\046\036\012\037\013\040\033\001\001\000\046\007" +
    "\016\011\040\013\015\014\007\015\037\016\245\017\032" +
    "\023\021\026\017\027\006\030\042\031\034\032\014\033" +
    "\027\035\046\036\012\037\013\040\033\001\001\000\006" +
    "\012\154\025\240\001\001\000\046\007\016\011\040\013" +
    "\015\014\007\015\037\016\237\017\032\023\021\026\017" +
    "\027\006\030\042\031\034\032\014\033\027\035\046\036" +
    "\012\037\013\040\033\001\001\000\046\007\016\011\040" +
    "\013\015\014\007\015\037\016\236\017\032\023\021\026" +
    "\017\027\006\030\042\031\034\032\014\033\027\035\046" +
    "\036\012\037\013\040\033\001\001\000\004\013\220\001" +
    "\001\000\046\007\016\011\040\013\015\014\007\015\037" +
    "\016\217\017\032\023\021\026\017\027\006\030\042\031" +
    "\034\032\014\033\027\035\046\036\012\037\013\040\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\213\006\060\013\062\001\001\000\004\024\204\001\001" +
    "\000\002\001\001\000\046\007\016\011\040\013\015\014" +
    "\007\015\037\016\202\017\032\023\021\026\017\027\006" +
    "\030\042\031\034\032\014\033\027\035\046\036\012\037" +
    "\013\040\033\001\001\000\004\013\172\001\001\000\002" +
    "\001\001\000\046\007\016\011\040\013\015\014\007\015" +
    "\037\016\170\017\032\023\021\026\017\027\006\030\042" +
    "\031\034\032\014\033\027\035\046\036\012\037\013\040" +
    "\033\001\001\000\046\007\016\011\040\013\015\014\007" +
    "\015\037\016\167\017\032\023\021\026\017\027\006\030" +
    "\042\031\034\032\014\033\027\035\046\036\012\037\013" +
    "\040\033\001\001\000\046\007\016\011\040\013\015\014" +
    "\007\015\037\016\166\017\032\023\021\026\017\027\006" +
    "\030\042\031\034\032\014\033\027\035\046\036\012\037" +
    "\013\040\033\001\001\000\006\011\143\013\142\001\001" +
    "\000\006\003\121\013\051\001\001\000\046\007\016\011" +
    "\040\013\015\014\007\015\037\016\120\017\032\023\021" +
    "\026\017\027\006\030\042\031\034\032\014\033\027\035" +
    "\046\036\012\037\013\040\033\001\001\000\004\025\111" +
    "\001\001\000\002\001\001\000\046\007\016\011\040\013" +
    "\015\014\007\015\037\016\110\017\032\023\021\026\017" +
    "\027\006\030\042\031\034\032\014\033\027\035\046\036" +
    "\012\037\013\040\033\001\001\000\004\013\074\001\001" +
    "\000\002\001\001\000\006\003\050\013\051\001\001\000" +
    "\046\007\016\011\040\013\015\014\007\015\037\016\047" +
    "\017\032\023\021\026\017\027\006\030\042\031\034\032" +
    "\014\033\027\035\046\036\012\037\013\040\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\061\006" +
    "\060\013\062\001\001\000\002\001\001\000\006\006\067" +
    "\013\062\001\001\000\002\001\001\000\004\010\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\100\034\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\100\034\102\001\001" +
    "\000\002\001\001\000\006\013\100\034\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\123\006\124\013\062\001\001" +
    "\000\004\022\127\001\001\000\002\001\001\000\010\004" +
    "\126\006\124\013\062\001\001\000\002\001\001\000\004" +
    "\020\136\001\001\000\006\003\131\013\051\001\001\000" +
    "\002\001\001\000\010\004\133\006\124\013\062\001\001" +
    "\000\004\022\134\001\001\000\002\001\001\000\010\004" +
    "\140\006\124\013\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\141\001\001\000\002\001\001\000" +
    "\004\012\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\156\001\001\000" +
    "\004\012\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\174\006\124\013\062\001\001\000\006\013\100\034\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\211\006\124\013\062\001\001\000" +
    "\004\024\212\001\001\000\002\001\001\000\006\006\067" +
    "\013\062\001\001\000\006\003\215\013\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\234\006\060" +
    "\013\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\232\006\060\013\062\001\001" +
    "\000\006\006\067\013\062\001\001\000\002\001\001\000" +
    "\006\006\067\013\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\253\006\124\013\062\001\001" +
    "\000\006\013\100\034\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\256\006\124\013\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio E prFin 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= DECLARACION E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= IF E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= COMENTARIO E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= ASIGNACION E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= SELECCION_MULTIPLE E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= PARA E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= PARA_SALTO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= MIENTRAS E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= REPETIR E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= RETORNO E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= METODO E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= FUNCION E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= EJECUTAR E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= IMPRIMIR E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= IMPRIMIR_NL E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= prIngresar VARIABLE prComo palabra prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= prIngresar VARIABLE prComo palabra prConValor tnum tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo palabra prConValor tnum tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= prIngresar LISTA_NOMBRES prComo palabra prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COMENTARIO ::= tcomentario 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMENTARIO ::= tcomentariovariaslineas 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= VARIABLE FLECHA tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION ::= LISTA_NOMBRES FLECHA tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= VARIABLE FLECHA tnum tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= LISTA_NOMBRES FLECHA tnum tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SELECCION_MULTIPLE ::= prSegun SEGUN prFinSegun 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES SEGUN 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SEGUN ::= tinterrogacioninicio VALOR tinterrogacionfin prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= tvariable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= tcadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_NOMBRES ::= VARIABLE LISTA_NOMBRES2 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_NOMBRES ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_NOMBRES2 ::= tcoma VARIABLE LISTA_NOMBRES2 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_NOMBRES2 ::= tcoma VARIABLE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NOMBRES2",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES O_SI DE_LO_CONTRARIO prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DE_LO_CONTRARIO ::= prDE_LO_CONTRARIO INSTRUCCIONES DE_LO_CONTRARIO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DE_LO_CONTRARIO ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DE_LO_CONTRARIO",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // O_SI ::= prO_Si CONDICION prEntonces INSTRUCCIONES O_SI 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // O_SI ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("O_SI",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICION ::= VARIABLE tigual tigual VARIABLE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICION ::= VARIABLE tigual tigual tcadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICION ::= VARIABLE tigual tigual tnum 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIABLE ::= tvariable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCIONES ::= INSTRUCCION tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCIONES_CICLO ::= INSTRUCCIONES_CICLO INSTRUCCION tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCCIONES_CICLO ::= INSTRUCCION tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CICLO",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCCION ::= VARIABLE tigual VALOR 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARA ::= prPara VARIABLE FLECHA tnum prHasta tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FLECHA ::= trest tmayor 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FLECHA",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARA_SALTO ::= prPara VARIABLE FLECHA tnum prHasta tnum prCon prIncremental tnum prHacer INSTRUCCIONES_CICLO prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA_SALTO",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MIENTRAS ::= prMientras CONDICION prHacer INSTRUCCIONES_CICLO prFinMientras 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // REPETIR ::= prRepetir INSTRUCCIONES_CICLO prHasta CONDICION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETORNO ::= prRetornar VALOR 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODO ::= prMetodo VARIABLE prConParametros LISTA_PARAMETROS prConValor VALOR prFinMetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODO ::= prMetodo VARIABLE INSTRUCCIONES prFinMetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_PARAMETROS ::= VARIABLE tcadena LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_PARAMETROS ::= VARIABLE tcadena tcoma LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION ::= prFuncion VARIABLE tcadena prConParametros LISTA_PARAMETROS INSTRUCCIONES prFinFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= prFuncion VARIABLE tcadena INSTRUCCIONES prFinFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EJECUTAR ::= prEjecutar VARIABLE pare1 pare2 tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EJECUTAR ::= prEjecutar VARIABLE pare1 LISTA_PARAMETROS pare2 tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IMPRIMIR ::= prImprimir tcadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IMPRIMIR_NL ::= prImprimirNl tcadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_NL",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
