/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 47,  7, 48, 47, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    47,  0,  5,  0,  0,  0,  0,  5, 29, 30,  8,  9, 17, 13, 11,  6, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 12,  0, 33, 16, 15, 
     0, 26, 45, 23, 28, 21, 34, 35, 42, 25, 44,  3, 40, 27, 22, 19, 
    18, 43, 36, 38, 20, 41, 39,  3,  3, 46,  3, 31,  0, 32,  0,  2, 
     0, 26, 45, 23, 28, 21, 34, 35, 42, 25, 44,  3, 40, 27, 22, 19, 
    18, 43, 36, 38, 20, 41, 39,  3,  3, 46,  3,  0,  4,  0,  0,  0, 
     0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\1\1\4\1\5"+
    "\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\5\3\1\1\3\3\1\16\1\17\1\20\1\21"+
    "\1\22\2\3\1\1\4\3\11\0\2\3\1\0\1\3"+
    "\1\0\5\3\2\0\4\3\1\0\3\3\1\0\4\3"+
    "\1\0\1\23\1\3\1\23\3\3\1\24\1\25\1\0"+
    "\2\26\2\0\1\26\1\0\2\27\2\0\2\3\1\0"+
    "\1\3\1\0\2\3\1\30\3\3\4\0\4\3\1\31"+
    "\2\3\1\0\2\3\1\0\2\32\3\3\1\0\3\3"+
    "\1\0\2\3\2\33\1\24\1\33\1\27\1\0\1\34"+
    "\1\3\1\35\1\36\1\3\2\0\2\3\1\0\1\37"+
    "\2\3\4\0\6\3\1\0\2\3\3\0\3\3\1\0"+
    "\3\3\1\0\2\3\1\34\2\3\2\0\2\3\2\0"+
    "\2\3\4\0\5\3\1\40\1\0\1\3\1\41\5\0"+
    "\2\42\1\0\2\3\2\43\1\3\1\44\2\45\3\3"+
    "\2\0\1\3\1\46\2\0\1\47\1\3\1\0\1\50"+
    "\2\0\1\3\1\50\2\3\1\51\2\0\1\3\7\0"+
    "\1\52\1\0\1\3\1\0\2\3\1\0\1\3\1\0"+
    "\2\3\2\0\1\3\2\0\1\3\3\0\3\3\2\0"+
    "\1\3\7\0\2\53\2\54\1\3\1\0\1\55\2\56"+
    "\2\57\1\60\1\0\1\61\2\0\1\62\1\0\1\63"+
    "\1\64\1\3\1\63\1\64\1\0\2\65\2\0\1\66"+
    "\4\0\1\3\1\0\1\67\2\0\1\70\2\0\1\3"+
    "\6\0\1\71\1\72\1\73\4\0\1\3\3\0\1\74"+
    "\4\0\1\75\1\76\1\75\4\0\1\77\1\100\4\0"+
    "\1\101\1\0\1\102\1\103\1\0\1\104\1\0\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\61\0\61\0\u0188\0\u01b9\0\61\0\u0188\0\61\0\61"+
    "\0\61\0\61\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\61\0\61\0\61\0\61\0\61"+
    "\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u01b9"+
    "\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0188"+
    "\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\61\0\u0b4b\0\304\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u04fa\0\61\0\u0c0f\0\u0c0f\0\61\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\304\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\u147b\0\u0c0f\0\61\0\u0c71\0\u0ca2\0\u05ef"+
    "\0\u14ac\0\u0d35\0\u14dd\0\304\0\61\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\304\0\u1634\0\u1665\0\u1696\0\u16c7"+
    "\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\61\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\61\0\304\0\u20ec"+
    "\0\u211d\0\u214e\0\61\0\304\0\u217f\0\304\0\u21b0\0\u21e1"+
    "\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\304\0\u2338"+
    "\0\u2369\0\304\0\u239a\0\u23cb\0\61\0\u23fc\0\u242d\0\u245e"+
    "\0\304\0\u248f\0\u24c0\0\304\0\u24f1\0\u2522\0\u2553\0\u2584"+
    "\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\61\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863"+
    "\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73"+
    "\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\61"+
    "\0\304\0\61\0\304\0\u2cfb\0\u2d2c\0\u2d5d\0\61\0\304"+
    "\0\61\0\304\0\61\0\u2d8e\0\304\0\u2dbf\0\u2df0\0\304"+
    "\0\u2e21\0\61\0\u2e52\0\u2e83\0\304\0\u2eb4\0\u2ee5\0\61"+
    "\0\304\0\u2f16\0\u2f47\0\61\0\u2f78\0\u2fa9\0\u2fda\0\u300b"+
    "\0\u303c\0\u306d\0\304\0\u309e\0\u30cf\0\61\0\u3100\0\u3131"+
    "\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\61"+
    "\0\304\0\61\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae"+
    "\0\u33df\0\u3410\0\61\0\u3441\0\u3472\0\u34a3\0\u34d4\0\61"+
    "\0\61\0\304\0\u3505\0\u3536\0\u3567\0\u3598\0\61\0\61"+
    "\0\u35c9\0\u35fa\0\u362b\0\u365c\0\61\0\u368d\0\61\0\61"+
    "\0\u36be\0\61\0\u36ef\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\5\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\5\1\42\1\43\1\44\1\45"+
    "\2\5\1\46\2\5\1\47\1\5\1\11\63\0\1\3"+
    "\10\0\1\50\1\51\46\0\1\52\1\0\1\52\16\0"+
    "\6\52\1\0\4\52\5\0\3\52\1\0\11\52\5\0"+
    "\1\5\16\0\6\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\2\0\1\53\1\54\2\53\1\55\4\53\1\55"+
    "\1\54\2\53\1\55\124\53\6\0\1\56\1\0\1\57"+
    "\51\0\1\50\2\0\1\60\4\0\1\60\1\50\2\0"+
    "\1\60\44\0\1\50\10\0\1\50\1\51\50\0\1\5"+
    "\16\0\1\5\1\61\4\5\1\0\1\5\1\62\2\5"+
    "\5\0\3\5\1\0\11\5\4\0\1\63\1\5\16\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\16\0\4\5\1\64\1\5\1\0\4\5\5\0"+
    "\3\5\1\65\1\66\5\5\1\67\2\5\5\0\1\5"+
    "\16\0\6\5\1\0\4\5\5\0\3\5\1\0\3\5"+
    "\1\70\5\5\5\0\1\5\16\0\1\5\1\71\4\5"+
    "\1\0\1\5\1\72\2\5\5\0\3\5\1\0\11\5"+
    "\30\0\1\73\4\0\1\74\30\0\1\5\16\0\4\5"+
    "\1\75\1\5\1\0\2\5\1\76\1\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\16\0\1\5\1\77\1\5"+
    "\1\100\2\5\1\101\1\102\1\103\2\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\16\0\3\5\1\104\2\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\6\5\1\105\1\106\1\107\2\5\5\0\3\5"+
    "\1\0\3\5\1\110\5\5\5\0\1\5\16\0\3\5"+
    "\1\111\2\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\27\0\1\112\2\0\2\113\32\0\1\5\16\0\3\5"+
    "\1\114\2\5\1\113\1\115\3\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\16\0\3\5\1\116\2\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\16\0"+
    "\6\5\1\0\1\5\1\117\2\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\16\0\1\5\1\120\4\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\3\0\1\121\10\0"+
    "\1\121\47\0\1\52\1\122\1\52\16\0\6\52\1\0"+
    "\4\52\5\0\3\52\1\0\11\52\2\0\4\123\1\124"+
    "\1\125\54\123\1\126\2\123\1\124\1\125\4\123\1\126"+
    "\1\127\46\123\1\126\2\123\1\130\1\125\3\123\1\131"+
    "\1\126\2\123\1\131\43\123\6\132\1\133\52\132\10\134"+
    "\1\135\50\134\3\0\1\5\16\0\2\5\1\136\3\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\6\5\1\0\4\5\5\0\2\5\1\137\1\0"+
    "\11\5\47\0\2\140\15\0\1\5\16\0\2\5\1\141"+
    "\3\5\1\0\4\5\5\0\3\5\1\0\11\5\4\0"+
    "\1\142\60\0\1\142\1\5\16\0\6\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\16\0\3\5"+
    "\1\143\2\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\16\0\6\5\1\0\2\5\1\144\1\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\16\0\4\5"+
    "\1\145\1\5\1\0\2\5\1\146\1\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\16\0\6\5\1\0\3\5"+
    "\1\147\5\0\2\5\1\150\1\0\11\5\31\0\1\151"+
    "\2\152\11\0\1\153\37\0\1\154\41\0\1\5\16\0"+
    "\5\5\1\155\1\152\1\156\3\5\5\0\1\5\1\157"+
    "\1\5\1\0\11\5\5\0\1\5\16\0\1\160\5\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\6\5\1\0\3\5\1\161\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\16\0\2\5\1\162\1\5\1\163"+
    "\1\5\1\0\4\5\5\0\3\5\1\0\11\5\27\0"+
    "\1\164\36\0\1\5\16\0\3\5\1\165\2\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\16\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\10\5\1\166"+
    "\4\0\1\167\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\30\0\1\170\35\0\1\5\16\0"+
    "\4\5\1\171\1\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\3\5\1\0\2\5\1\172\6\5\5\0\1\5\16\0"+
    "\4\5\1\173\1\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\16\0\1\174\5\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\45\0\1\175\20\0\1\5"+
    "\16\0\6\5\1\0\4\5\5\0\1\5\1\176\1\5"+
    "\1\0\11\5\5\0\1\5\16\0\6\5\1\0\4\5"+
    "\5\0\2\5\1\177\1\0\11\5\5\0\1\5\16\0"+
    "\5\5\1\200\1\0\4\5\5\0\3\5\1\201\1\202"+
    "\10\5\5\0\1\5\16\0\1\5\1\203\4\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\2\0\4\123\1\204"+
    "\1\205\54\123\1\126\2\123\1\204\1\205\4\123\1\126"+
    "\1\127\46\123\1\206\2\123\1\204\1\205\4\123\1\206"+
    "\47\123\1\126\2\123\1\207\1\205\3\123\1\131\1\126"+
    "\2\123\1\131\43\123\7\132\1\0\57\132\1\210\1\0"+
    "\51\132\10\134\1\211\56\134\1\212\1\134\1\135\50\134"+
    "\3\0\1\5\16\0\3\5\1\213\2\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\16\0\6\5"+
    "\1\0\1\5\1\214\2\5\5\0\3\5\1\0\11\5"+
    "\32\0\2\215\32\0\1\5\16\0\1\5\1\216\4\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\32\0\2\217"+
    "\2\0\1\220\27\0\1\5\16\0\5\5\1\221\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\16\0"+
    "\3\5\1\222\2\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\4\0\1\223\1\5\16\0\6\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\16\0\1\5"+
    "\1\224\4\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\16\0\3\5\1\225\2\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\16\0\6\5"+
    "\1\0\1\5\1\226\2\5\5\0\3\5\1\0\11\5"+
    "\46\0\1\227\43\0\1\230\75\0\1\231\60\0\1\232"+
    "\17\0\1\5\16\0\6\5\1\0\4\5\5\0\2\5"+
    "\1\233\1\0\11\5\5\0\1\5\16\0\5\5\1\234"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\6\5\1\0\4\5\5\0\2\5\1\235\1\0"+
    "\11\5\5\0\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\236\1\0\11\5\5\0\1\5\16\0\1\5"+
    "\1\237\4\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\16\0\1\5\1\240\4\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\30\0\1\241\35\0\1\5"+
    "\16\0\4\5\1\242\1\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\16\0\1\5\1\243\4\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\52\0\1\244"+
    "\12\0\1\245\60\0\1\245\1\5\16\0\6\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\16\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\246\1\247\10\5"+
    "\5\0\1\5\16\0\5\5\1\250\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\16\0\3\5\1\251"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\53\0"+
    "\1\252\12\0\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\3\5\1\0\3\5\1\253\5\5\5\0\1\5\16\0"+
    "\6\5\1\0\3\5\1\254\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\16\0\3\5\1\255\2\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\26\0\1\256\37\0\1\5"+
    "\16\0\2\5\1\257\3\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\16\0\6\5\1\0\4\5"+
    "\5\0\3\5\1\0\2\5\1\260\6\5\10\0\1\261"+
    "\1\0\1\211\53\0\1\5\16\0\4\5\1\262\1\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\4\5\1\263\1\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\45\0\1\264\45\0\2\265\32\0\1\5"+
    "\16\0\6\5\1\0\4\5\5\0\3\5\1\0\3\5"+
    "\1\266\5\5\5\0\1\5\16\0\6\5\1\0\4\5"+
    "\5\0\2\5\1\267\1\0\11\5\24\0\1\270\24\0"+
    "\1\271\14\0\1\5\16\0\4\5\1\272\1\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\16\0"+
    "\5\5\1\273\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\27\0\1\274\63\0\2\275\54\0\1\276\63\0\2\277"+
    "\32\0\1\5\16\0\3\5\1\300\2\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\16\0\6\5"+
    "\1\275\1\301\3\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\16\0\3\5\1\302\2\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\16\0\6\5\1\277"+
    "\1\303\3\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\6\5\1\0\3\5\1\304\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\305\1\0\11\5\26\0\1\306\37\0\1\5"+
    "\16\0\2\5\1\307\3\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\16\0\6\5\1\0\4\5"+
    "\5\0\2\5\1\310\1\0\11\5\25\0\1\311\57\0"+
    "\1\312\10\0\1\313\6\0\1\314\2\0\2\315\35\0"+
    "\1\316\40\0\1\5\16\0\1\5\1\317\4\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\16\0"+
    "\6\5\1\320\1\321\3\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\16\0\2\5\1\322\3\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\30\0\1\323\35\0\1\5"+
    "\16\0\4\5\1\324\1\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\16\0\6\5\1\0\1\5"+
    "\1\325\2\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\6\5\1\0\4\5\5\0\2\5\1\326\1\0"+
    "\11\5\34\0\1\327\31\0\1\5\16\0\6\5\1\0"+
    "\1\5\1\330\2\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\16\0\3\5\1\331\2\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\16\0\5\5\1\332"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\5\5\1\333\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\53\0\1\334\51\0\1\335\21\0\1\5\16\0"+
    "\2\5\1\336\3\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\16\0\1\5\1\337\4\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\34\0\1\340\60\0"+
    "\1\341\31\0\1\5\16\0\6\5\1\0\1\5\1\342"+
    "\2\5\5\0\3\5\1\0\11\5\5\0\1\5\16\0"+
    "\2\5\1\343\3\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\35\0\1\344\50\0\1\345\102\0\2\346\45\0"+
    "\1\347\30\0\1\5\16\0\6\5\1\0\2\5\1\350"+
    "\1\5\5\0\3\5\1\0\11\5\5\0\1\5\16\0"+
    "\1\5\1\351\4\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\3\5\1\346\1\352\10\5\5\0\1\5\16\0\6\5"+
    "\1\0\2\5\1\353\1\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\16\0\1\5\1\354\4\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\4\0\1\355\1\5\16\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\11\5\46\0"+
    "\1\356\17\0\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\357\1\0\11\5\4\0\1\360\1\5\16\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\11\5\4\0"+
    "\1\361\110\0\1\362\53\0\1\363\2\0\2\364\100\0"+
    "\1\365\34\0\1\366\2\0\2\367\52\0\1\370\40\0"+
    "\1\5\16\0\1\5\1\371\4\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\16\0\6\5\1\372"+
    "\1\373\3\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\6\5\1\0\3\5\1\374\5\0\3\5\1\0"+
    "\11\5\4\0\1\375\60\0\1\375\1\5\16\0\6\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\6\5\1\0\1\5\1\376\2\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\16\0\6\5\1\377\1\u0100"+
    "\3\5\5\0\3\5\1\0\11\5\5\0\1\5\16\0"+
    "\3\5\1\u0101\2\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\34\0\1\u0102\53\0\1\u0103\36\0\1\5\16\0"+
    "\6\5\1\0\1\5\1\u0104\2\5\5\0\3\5\1\0"+
    "\11\5\46\0\1\u0105\64\0\1\u0106\13\0\1\5\16\0"+
    "\3\5\1\u0107\2\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\27\0\1\u0108\65\0\1\u0109\56\0\2\u010a\32\0"+
    "\1\5\16\0\3\5\1\u010b\2\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\16\0\6\5\1\0"+
    "\1\5\1\u010c\2\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\16\0\6\5\1\u010a\1\u010d\3\5\5\0\3\5"+
    "\1\0\11\5\25\0\1\u010e\67\0\1\u010f\31\0\1\5"+
    "\16\0\6\5\1\0\1\5\1\u0110\2\5\5\0\3\5"+
    "\1\0\11\5\25\0\1\u0111\64\0\1\u0112\75\0\1\u0113"+
    "\40\0\1\u0114\61\0\1\u0115\61\0\1\u0116\75\0\1\u0117"+
    "\43\0\1\u0118\35\0\1\5\16\0\4\5\1\u0119\1\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\46\0\1\u011a"+
    "\17\0\1\5\16\0\6\5\1\0\4\5\5\0\2\5"+
    "\1\u011b\1\0\11\5\5\0\1\5\16\0\3\5\1\u011c"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\55\0"+
    "\1\u011d\10\0\1\5\16\0\4\5\1\u011e\1\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\34\0\1\u011f\31\0"+
    "\1\5\16\0\6\5\1\0\1\5\1\u0120\2\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\16\0\6\5\1\0"+
    "\4\5\5\0\3\5\1\u0121\1\u0122\10\5\52\0\1\u0123"+
    "\54\0\1\u0124\17\0\1\5\16\0\6\5\1\0\4\5"+
    "\5\0\2\5\1\u0125\1\0\11\5\34\0\1\u0126\51\0"+
    "\1\u0127\40\0\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\u0128\1\0\11\5\30\0\1\u0129\76\0\1\u012a"+
    "\60\0\1\u012b\17\0\1\5\16\0\4\5\1\u012c\1\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\16\0\6\5\1\0\4\5\5\0\2\5\1\u012d\1\0"+
    "\11\5\5\0\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\u012e\1\0\11\5\4\0\1\u012f\123\0\2\u0130"+
    "\15\0\1\5\16\0\6\5\1\0\4\5\5\0\3\5"+
    "\1\u0130\1\u0131\10\5\4\0\1\u0132\101\0\1\u0133\67\0"+
    "\1\u0134\51\0\1\u0135\63\0\1\u0136\61\0\1\u0137\102\0"+
    "\1\u0138\12\0\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\u0139\1\0\11\5\53\0\1\u013a\12\0\1\5"+
    "\16\0\6\5\1\0\1\5\1\u013b\2\5\5\0\3\5"+
    "\1\0\11\5\27\0\1\u013c\66\0\1\u013d\71\0\1\u013e"+
    "\40\0\1\u013f\36\0\1\u0140\61\0\1\5\16\0\2\5"+
    "\1\u0141\3\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\4\0\1\u0140\1\5\16\0\6\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\32\0\2\u0142\57\0\2\u0143\55\0"+
    "\1\u0144\66\0\1\u0145\50\0\1\u0146\64\0\2\u0147\55\0"+
    "\1\u0148\35\0\1\5\16\0\1\5\1\u0149\4\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\27\0\1\u014a\61\0"+
    "\1\u014b\57\0\1\u014c\65\0\1\u014d\54\0\1\u014e\35\0"+
    "\1\5\16\0\6\5\1\0\1\5\1\u014f\2\5\5\0"+
    "\3\5\1\0\11\5\45\0\1\u0150\60\0\1\u0151\41\0"+
    "\1\u0152\57\0\1\u0153\101\0\1\u0154\37\0\1\u0155\61\0"+
    "\1\u0156\60\0\1\u0157\104\0\1\u0158\60\0\1\u0159\13\0"+
    "\1\5\16\0\6\5\1\0\4\5\5\0\3\5\1\0"+
    "\2\5\1\u015a\6\5\53\0\1\u015b\60\0\1\u015c\53\0"+
    "\1\u015d\46\0\1\u015e\54\0\1\u015f\57\0\1\u0160\77\0"+
    "\1\u0161\46\0\1\u0162\60\0\1\u0163\60\0\1\u0164\73\0"+
    "\2\u0165\35\0\1\u0166\105\0\1\u0167\60\0\1\u0168\54\0"+
    "\1\u0169\61\0\2\u016a\42\0\2\u016b\52\0\1\u016c\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\2\1\1\11\1\1\4\11"+
    "\11\1\5\11\7\1\11\0\2\1\1\0\1\1\1\0"+
    "\5\1\2\0\4\1\1\0\3\1\1\0\4\1\1\0"+
    "\1\11\6\1\1\11\1\0\1\1\1\11\2\0\1\1"+
    "\1\0\2\1\2\0\2\1\1\0\1\1\1\0\6\1"+
    "\4\0\7\1\1\0\2\1\1\0\5\1\1\0\3\1"+
    "\1\0\3\1\1\11\3\1\1\0\3\1\1\11\1\1"+
    "\2\0\2\1\1\0\3\1\4\0\6\1\1\0\2\1"+
    "\3\0\3\1\1\0\3\1\1\0\2\1\1\11\2\1"+
    "\2\0\2\1\2\0\2\1\4\0\6\1\1\0\2\1"+
    "\5\0\1\11\1\1\1\0\2\1\1\11\10\1\2\0"+
    "\2\1\2\0\2\1\1\0\1\11\2\0\5\1\2\0"+
    "\1\1\7\0\1\11\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\2\0\1\1\2\0\1\1\3\0"+
    "\3\1\2\0\1\1\7\0\1\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\11\1\0"+
    "\1\1\2\0\1\1\1\0\1\11\4\1\1\0\1\11"+
    "\1\1\2\0\1\11\4\0\1\1\1\0\1\1\2\0"+
    "\1\11\2\0\1\1\6\0\1\11\1\1\1\11\4\0"+
    "\1\1\3\0\1\11\4\0\2\11\1\1\4\0\2\11"+
    "\4\0\1\11\1\0\2\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+ " Linea: "+yyline+" Columna: "+yycolumn);
            } 
            // fall through
          case 70: break;
          case 2: 
            { System.out.println("Reconocio tnum, lexema:"+yytext());
                return new Symbol(Simbolos.tnum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 3: 
            { System.out.println("Reconocio palabra, lexema:"+yytext());
                    return new Symbol(Simbolos.palabra, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 4: 
            { System.out.println("Reconocio tdiv, lexema:"+yytext());
                    return new Symbol(Simbolos.tdiv, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 5: 
            { /* Espacios en blanco, se ignoran */
            } 
            // fall through
          case 74: break;
          case 6: 
            { System.out.println("Reconocio tmul, lexema:"+yytext());
                    return new Symbol(Simbolos.tmul, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 7: 
            { System.out.println("Reconocio tsum, lexema:"+yytext());
                    return new Symbol(Simbolos.tsum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 8: 
            { System.out.println("Reconocio tpuntoycoma, lexema:"+yytext());
                    return new Symbol(Simbolos.tpuntoycoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 9: 
            { System.out.println("Reconocio trest, lexema:"+yytext());
                    return new Symbol(Simbolos.trest, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 10: 
            { System.out.println("Reconocio tinterrogacioninicio, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacioninicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 11: 
            { System.out.println("Reconocio tinterrogacionfin, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacionfin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 12: 
            { System.out.println("Reconocio tmayor, lexema:"+yytext());
                    return new Symbol(Simbolos.tmayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 13: 
            { System.out.println("Reconocio tcoma, lexema:"+yytext());
                    return new Symbol(Simbolos.tcoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 14: 
            { System.out.println("Reconocio pare1, lexema:"+yytext());
                    return new Symbol(Simbolos.pare1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 15: 
            { System.out.println("Reconocio pare2, lexema:"+yytext());
                    return new Symbol(Simbolos.pare2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 16: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.cor1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 17: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.cor2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 18: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 19: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada si, lexema:"+yytext());
                    return new Symbol(Simbolos.prSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 20: 
            { //Codigo en java
                    System.out.println("Reconocio float, lexema:"+yytext());
                    return new Symbol(Simbolos.prFloat, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 21: 
            { //codigo en java
                    System.out.println("Reconocio variable, lexema:"+yytext());
                    return new Symbol(Simbolos.tvariable, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 22: 
            { //codigo en java
                    System.out.println("Reconocio caracter, lexema:"+yytext());
                    return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 23: 
            { System.out.println("Reconocio comentario, lexema:"+yytext());
                    return new Symbol(Simbolos.tcomentario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 24: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada con, lexema:"+yytext());
                    return new Symbol(Simbolos.prCon, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 25: 
            { System.out.println("Reconocio tmod, lexema:"+yytext());
                    return new Symbol(Simbolos.tmod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 26: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin, lexema:"+yytext());
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 27: 
            { //codigo en java
                    System.out.println("Reconocio cadena, lexema:"+yytext());
                    return new Symbol(Simbolos.tcadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 28: 
            { System.out.println("Reconocio comentario de varias lineas, lexema:"+yytext());
                return new Symbol(Simbolos.tcomentariovariaslineas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 29: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada para, lexema:"+yytext());
                    return new Symbol(Simbolos.prPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 30: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada o_si, lexema:"+yytext());
                    return new Symbol(Simbolos.prO_Si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 31: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada como, lexema:"+yytext());
                    return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 32: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada menor, lexema:"+yytext());
                    return new Symbol(Simbolos.prMenor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 33: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada mayor, lexema:"+yytext());
                    return new Symbol(Simbolos.prMayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 34: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada falso, lexema:"+yytext());
                    return new Symbol(Simbolos.prFalso, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 35: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada segun, lexema:"+yytext());
                    return new Symbol(Simbolos.prSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 36: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada hacer, lexema:"+yytext());
                    return new Symbol(Simbolos.prHacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 37: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada hasta, lexema:"+yytext());
                    return new Symbol(Simbolos.prHasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 38: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada numero, lexema:"+yytext());
                    return new Symbol(Simbolos.prNumero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 39: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada cadena, lexema:"+yytext());
                    return new Symbol(Simbolos.prCadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 40: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada inicio, lexema:"+yytext());
                    return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 41: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada metodo, lexema:"+yytext());
                    return new Symbol(Simbolos.prMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 42: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_si, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 43: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada funcion, lexema:"+yytext());
                    return new Symbol(Simbolos.prFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 44: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada repetir, lexema:"+yytext());
                    return new Symbol(Simbolos.prRepetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 45: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada boolean, lexema:"+yytext());
                    return new Symbol(Simbolos.prBoolean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 46: 
            { System.out.println("Reconocio tpot, lexema:"+yytext());
                    return new Symbol(Simbolos.tpot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 47: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada entonces, lexema:"+yytext());
                    return new Symbol(Simbolos.prEntonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 48: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada es_igual, lexema:"+yytext());
                    return new Symbol(Simbolos.prEsIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 49: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada ejecutar, lexema:"+yytext());
                    return new Symbol(Simbolos.prEjecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 50: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada caracter, lexema:"+yytext());
                    return new Symbol(Simbolos.prCaracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 51: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada ingresar, lexema:"+yytext());
                    return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 52: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada imprimir, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 53: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada mientras, lexema:"+yytext());
                    return new Symbol(Simbolos.prMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 54: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_para, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 55: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada booleana, lexema:"+yytext());
                    return new Symbol(Simbolos.prBooleana, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 56: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada con_valor, lexema:"+yytext());
                    return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 57: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_segun, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 58: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada verdadero, lexema:"+yytext());
                    return new Symbol(Simbolos.prVerdadero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 59: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada hasta_que, lexema:"+yytext());
                    return new Symbol(Simbolos.prRetornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 60: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_metodo, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 61: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada incremental, lexema:"+yytext());
                    return new Symbol(Simbolos.prIncremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 62: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada imprimir_nl, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimirNl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 63: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_funcion, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 64: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada es_diferente, lexema:"+yytext());
                    return new Symbol(Simbolos.prEsDiferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 65: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_mientras, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 66: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada menor_o_igual, lexema:"+yytext());
                    return new Symbol(Simbolos.prMenorOIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 67: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada mayor_o_igual, lexema:"+yytext());
                    return new Symbol(Simbolos.prMayorOIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 68: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada con_parametros, lexema:"+yytext());
                    return new Symbol(Simbolos.prConParametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 69: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada del_lo_contrario, lexema:"+yytext());
                    return new Symbol(Simbolos.prDeLoContrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
