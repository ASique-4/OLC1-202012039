/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 51,  7, 52, 51, 51,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    51,  0,  5,  0, 12,  0,  0,  4, 33, 34,  8, 21, 20, 16, 11,  6, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 15,  0, 37, 19, 18, 
     0, 30, 49, 27, 32, 25, 38, 39, 46, 29, 48,  3, 44, 31, 26, 23, 
    22, 47, 40, 42, 24, 45, 43,  3,  3, 50,  3, 35,  0, 36,  0,  2, 
     0, 30, 49, 27, 32, 25, 38, 39, 46, 29, 48,  3, 44, 31, 26, 23, 
    22, 47, 40, 42, 24, 45, 43,  3,  3, 50,  3, 13,  9, 14,  0,  0, 
     0,  0,  0,  0,  0, 52,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\1\1\4\1\5"+
    "\1\6\2\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\5\3\1\1\3\3\1\16\1\17\1\20\1\21"+
    "\1\22\2\3\1\1\4\3\12\0\2\3\1\0\1\3"+
    "\1\0\6\3\2\0\4\3\1\0\3\3\1\0\4\3"+
    "\1\0\1\23\1\3\1\23\3\3\1\24\1\25\1\0"+
    "\1\26\3\0\2\27\2\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\30\1\3\1\31\3\3\4\0\4\3\1\32"+
    "\2\3\1\0\2\3\1\0\2\33\3\3\1\0\3\3"+
    "\1\0\2\3\1\34\2\0\1\27\1\0\1\35\1\3"+
    "\1\36\1\37\1\3\2\0\2\3\1\0\1\40\2\3"+
    "\4\0\6\3\1\0\2\3\3\0\3\3\1\0\3\3"+
    "\1\0\2\3\2\0\1\35\2\3\2\0\2\3\2\0"+
    "\2\3\4\0\5\3\1\41\1\0\1\3\1\42\5\0"+
    "\2\43\1\0\2\3\2\44\1\3\1\45\2\46\1\3"+
    "\1\47\2\3\2\0\1\3\1\50\2\0\1\51\1\3"+
    "\1\0\1\52\2\0\1\3\1\52\2\3\1\53\2\0"+
    "\1\3\7\0\1\54\1\0\1\3\1\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\1\3\2\0\1\3\3\0"+
    "\3\3\2\0\1\3\7\0\2\55\2\56\1\3\1\0"+
    "\1\57\2\60\2\61\1\62\1\0\1\63\2\0\1\64"+
    "\1\0\1\65\1\66\1\3\1\65\1\66\1\0\2\67"+
    "\2\0\1\70\4\0\1\3\3\0\1\71\2\0\1\3"+
    "\6\0\1\72\1\73\1\74\4\0\1\3\3\0\1\75"+
    "\4\0\1\76\1\77\1\76\4\0\1\100\1\101\4\0"+
    "\1\102\1\0\1\103\1\104\1\0\1\105\1\0\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\65\0\65\0\u01a8\0\u01dd\0\65\0\u01a8\0\65\0\65"+
    "\0\65\0\65\0\u01a8\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\65\0\65\0\65\0\65"+
    "\0\65\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d"+
    "\0\u01dd\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0"+
    "\0\u06d5\0\u01a8\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\65\0\u0ca1\0\324"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0562\0\65\0\u0d75\0\65\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\324\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d"+
    "\0\u12a2\0\u12d7\0\324\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\65\0\u16c6\0\u16fb"+
    "\0\u06a0\0\u1730\0\u0eb3\0\u1765\0\324\0\65\0\u179a\0\u17cf"+
    "\0\u1804\0\u1839\0\u186e\0\u18a3\0\324\0\u18d8\0\u190d\0\u1942"+
    "\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea"+
    "\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92"+
    "\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\65\0\u1f0e\0\u1f43\0\u1f78\0\u1fad"+
    "\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155"+
    "\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd"+
    "\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5"+
    "\0\65\0\324\0\u24da\0\u250f\0\u2544\0\65\0\324\0\u2579"+
    "\0\324\0\u25ae\0\u25e3\0\u2618\0\65\0\u264d\0\u2682\0\u26b7"+
    "\0\u26ec\0\u2721\0\324\0\u2756\0\u278b\0\324\0\u27c0\0\u27f5"+
    "\0\65\0\u282a\0\u285f\0\u2894\0\324\0\u28c9\0\u28fe\0\324"+
    "\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\u2adb\0\u2b10\0\65\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19"+
    "\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1"+
    "\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69"+
    "\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111"+
    "\0\u3146\0\u317b\0\u31b0\0\65\0\324\0\65\0\324\0\u31e5"+
    "\0\u321a\0\324\0\65\0\324\0\65\0\324\0\65\0\u324f"+
    "\0\324\0\u3284\0\u32b9\0\324\0\u32ee\0\65\0\u3323\0\u3358"+
    "\0\324\0\u338d\0\u33c2\0\65\0\324\0\u33f7\0\u342c\0\65"+
    "\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4"+
    "\0\65\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747"+
    "\0\u377c\0\u37b1\0\65\0\324\0\65\0\u37e6\0\u381b\0\u3850"+
    "\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\65\0\u398e\0\u39c3"+
    "\0\u39f8\0\u3a2d\0\65\0\65\0\324\0\u3a62\0\u3a97\0\u3acc"+
    "\0\u3b01\0\65\0\65\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\65"+
    "\0\u3c0a\0\65\0\65\0\u3c3f\0\65\0\u3c74\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\4\2\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\5\1\26\1\27"+
    "\1\30\1\31\1\32\1\5\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\5\1\43\1\44\1\45"+
    "\1\46\2\5\1\47\2\5\1\50\1\5\1\11\67\0"+
    "\1\3\10\0\1\51\1\52\52\0\1\53\1\0\1\53"+
    "\22\0\6\53\1\0\4\53\5\0\3\53\1\0\11\53"+
    "\5\0\1\5\22\0\6\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\2\0\14\54\1\55\50\54\14\56\1\57"+
    "\50\56\6\0\1\60\1\0\1\61\55\0\1\51\7\0"+
    "\1\62\1\51\5\0\1\62\4\0\1\62\40\0\1\51"+
    "\10\0\1\51\1\52\54\0\1\5\22\0\1\5\1\63"+
    "\4\5\1\0\1\5\1\64\2\5\5\0\3\5\1\0"+
    "\11\5\4\0\1\65\1\5\22\0\6\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\4\5"+
    "\1\66\1\5\1\0\4\5\5\0\3\5\1\67\1\70"+
    "\5\5\1\71\2\5\5\0\1\5\22\0\1\5\1\72"+
    "\4\5\1\0\4\5\5\0\3\5\1\0\3\5\1\73"+
    "\5\5\5\0\1\5\22\0\1\5\1\74\4\5\1\0"+
    "\1\5\1\75\2\5\5\0\3\5\1\0\11\5\34\0"+
    "\1\76\4\0\1\77\30\0\1\5\22\0\4\5\1\100"+
    "\1\5\1\0\2\5\1\101\1\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\22\0\1\5\1\102\1\5\1\103"+
    "\2\5\1\104\1\105\1\106\2\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\22\0\3\5\1\107\2\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\110\1\111\1\112\2\5\5\0\3\5\1\0"+
    "\3\5\1\113\5\5\5\0\1\5\22\0\3\5\1\114"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\33\0"+
    "\1\115\2\0\2\116\32\0\1\5\22\0\3\5\1\117"+
    "\2\5\1\116\1\120\3\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\3\5\1\121\2\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\6\5"+
    "\1\0\1\5\1\122\2\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\1\5\1\123\4\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\3\0\1\124\10\0\1\124"+
    "\53\0\1\53\1\125\1\53\22\0\6\53\1\0\4\53"+
    "\5\0\3\53\1\0\11\53\2\0\4\126\1\127\64\126"+
    "\1\127\10\126\1\130\47\126\5\131\1\127\64\131\1\127"+
    "\7\131\1\132\47\131\6\133\1\134\56\133\10\135\1\136"+
    "\54\135\3\0\1\5\22\0\2\5\1\137\3\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\0\4\5\5\0\2\5\1\140\1\0\11\5"+
    "\53\0\2\141\15\0\1\5\22\0\2\5\1\142\3\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\4\0\1\143"+
    "\64\0\1\143\1\5\22\0\6\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\22\0\3\5\1\144"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\22\0\2\5\1\145\3\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\22\0\6\5\1\0"+
    "\2\5\1\146\1\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\22\0\4\5\1\147\1\5\1\0\2\5\1\150"+
    "\1\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\0\3\5\1\151\5\0\2\5\1\152\1\0"+
    "\11\5\35\0\1\153\2\154\11\0\1\155\43\0\1\156"+
    "\41\0\1\5\22\0\5\5\1\157\1\154\1\160\3\5"+
    "\5\0\1\5\1\161\1\5\1\0\11\5\5\0\1\5"+
    "\22\0\1\162\5\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\22\0\6\5\1\0\3\5\1\163"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\2\5"+
    "\1\164\1\5\1\165\1\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\33\0\1\166\36\0\1\5\22\0\3\5"+
    "\1\167\2\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\6\5\1\0\4\5\5\0\3\5"+
    "\1\0\10\5\1\170\4\0\1\171\1\5\22\0\6\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\34\0\1\172"+
    "\35\0\1\5\22\0\4\5\1\173\1\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\6\5"+
    "\1\0\4\5\5\0\3\5\1\0\2\5\1\174\6\5"+
    "\5\0\1\5\22\0\4\5\1\175\1\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\1\176"+
    "\5\5\1\0\4\5\5\0\3\5\1\0\11\5\51\0"+
    "\1\177\20\0\1\5\22\0\6\5\1\0\4\5\5\0"+
    "\1\5\1\200\1\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\0\4\5\5\0\2\5\1\201\1\0\11\5"+
    "\5\0\1\5\22\0\5\5\1\202\1\0\4\5\5\0"+
    "\3\5\1\203\1\204\10\5\5\0\1\5\22\0\1\5"+
    "\1\205\4\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\2\0\4\126\1\206\61\126\1\207\2\126\1\206\5\126"+
    "\1\207\52\126\5\131\1\206\60\131\1\210\3\131\1\206"+
    "\4\131\1\210\52\131\7\133\1\0\63\133\1\211\1\0"+
    "\55\133\10\135\1\212\62\135\1\213\1\135\1\136\54\135"+
    "\3\0\1\5\22\0\3\5\1\214\2\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\6\5"+
    "\1\0\1\5\1\215\2\5\5\0\3\5\1\0\11\5"+
    "\36\0\2\216\32\0\1\5\22\0\1\5\1\217\4\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\36\0\2\220"+
    "\2\0\1\221\27\0\1\5\22\0\5\5\1\222\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\3\5\1\223\2\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\4\0\1\224\1\5\22\0\6\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\1\5"+
    "\1\225\4\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\3\5\1\226\2\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\6\5"+
    "\1\0\1\5\1\227\2\5\5\0\3\5\1\0\11\5"+
    "\52\0\1\230\47\0\1\231\101\0\1\232\64\0\1\233"+
    "\17\0\1\5\22\0\6\5\1\0\4\5\5\0\2\5"+
    "\1\234\1\0\11\5\5\0\1\5\22\0\5\5\1\235"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\22\0\6\5\1\0\4\5\5\0\2\5\1\236\1\0"+
    "\11\5\5\0\1\5\22\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\237\1\0\11\5\5\0\1\5\22\0\1\5"+
    "\1\240\4\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\1\5\1\241\4\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\34\0\1\242\35\0\1\5"+
    "\22\0\4\5\1\243\1\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\22\0\1\5\1\244\4\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\56\0\1\245"+
    "\12\0\1\246\64\0\1\246\1\5\22\0\6\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\247\1\250\10\5"+
    "\5\0\1\5\22\0\5\5\1\251\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\22\0\3\5\1\252"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\57\0"+
    "\1\253\12\0\1\5\22\0\6\5\1\0\4\5\5\0"+
    "\3\5\1\0\3\5\1\254\5\5\5\0\1\5\22\0"+
    "\6\5\1\0\3\5\1\255\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\3\5\1\256\2\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\32\0\1\257\37\0\1\5"+
    "\22\0\2\5\1\260\3\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\22\0\6\5\1\0\4\5"+
    "\5\0\3\5\1\0\2\5\1\261\6\5\2\0\1\126"+
    "\1\207\2\126\1\206\5\126\1\207\3\126\1\262\46\126"+
    "\1\131\1\210\3\131\1\206\4\131\1\210\3\131\1\263"+
    "\46\131\6\0\1\264\1\0\1\212\57\0\1\5\22\0"+
    "\4\5\1\265\1\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\22\0\4\5\1\266\1\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\51\0\1\267\51\0"+
    "\2\270\32\0\1\5\22\0\6\5\1\0\4\5\5\0"+
    "\3\5\1\0\3\5\1\271\5\5\5\0\1\5\22\0"+
    "\6\5\1\0\4\5\5\0\2\5\1\272\1\0\11\5"+
    "\30\0\1\273\24\0\1\274\14\0\1\5\22\0\4\5"+
    "\1\275\1\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\5\5\1\276\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\33\0\1\277\67\0\2\300\60\0"+
    "\1\301\67\0\2\302\32\0\1\5\22\0\3\5\1\303"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\22\0\6\5\1\300\1\304\3\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\22\0\3\5\1\305\2\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\22\0\6\5\1\302\1\306\3\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\22\0\6\5\1\0\3\5\1\307"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\6\5"+
    "\1\0\4\5\5\0\2\5\1\310\1\0\11\5\32\0"+
    "\1\311\37\0\1\5\22\0\2\5\1\312\3\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\0\4\5\5\0\2\5\1\313\1\0\11\5"+
    "\31\0\1\314\63\0\1\315\10\0\1\316\6\0\1\317"+
    "\2\0\2\320\41\0\1\321\40\0\1\5\22\0\1\5"+
    "\1\322\4\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\6\5\1\323\1\324\3\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\22\0\2\5\1\325"+
    "\3\5\1\0\4\5\5\0\3\5\1\0\11\5\34\0"+
    "\1\326\35\0\1\5\22\0\4\5\1\327\1\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\0\1\5\1\330\2\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\22\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\331\1\0\11\5\40\0\1\332\31\0\1\5"+
    "\22\0\6\5\1\0\1\5\1\333\2\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\22\0\3\5\1\334\2\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\2\0\4\126"+
    "\1\335\60\126\5\131\1\335\57\131\3\0\1\5\22\0"+
    "\5\5\1\336\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\5\5\1\337\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\57\0\1\340\55\0\1\341\21\0"+
    "\1\5\22\0\2\5\1\342\3\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\22\0\1\5\1\343"+
    "\4\5\1\0\4\5\5\0\3\5\1\0\11\5\40\0"+
    "\1\344\64\0\1\345\31\0\1\5\22\0\6\5\1\0"+
    "\1\5\1\346\2\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\22\0\2\5\1\347\3\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\41\0\1\350\54\0\1\351\106\0"+
    "\2\352\51\0\1\353\30\0\1\5\22\0\6\5\1\0"+
    "\2\5\1\354\1\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\22\0\1\5\1\355\4\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\22\0\6\5\1\0"+
    "\4\5\5\0\3\5\1\352\1\356\10\5\5\0\1\5"+
    "\22\0\6\5\1\0\2\5\1\357\1\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\22\0\1\5\1\360\4\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\4\0\1\361"+
    "\1\5\22\0\6\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\52\0\1\362\17\0\1\5\22\0\6\5\1\0"+
    "\4\5\5\0\2\5\1\363\1\0\11\5\4\0\1\364"+
    "\1\5\22\0\6\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\4\0\1\365\120\0\1\366\57\0\1\367\2\0"+
    "\2\370\104\0\1\371\40\0\1\372\2\0\2\373\56\0"+
    "\1\374\40\0\1\5\22\0\1\5\1\375\4\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\376\1\377\3\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\6\5\1\0\3\5\1\u0100\5\0"+
    "\3\5\1\0\11\5\4\0\1\u0101\64\0\1\u0101\1\5"+
    "\22\0\6\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\6\5\1\0\1\5\1\u0102\2\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\22\0\6\5"+
    "\1\u0103\1\u0104\3\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\22\0\3\5\1\u0105\2\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\40\0\1\u0106\57\0\1\u0107\36\0"+
    "\1\5\22\0\6\5\1\0\1\5\1\u0108\2\5\5\0"+
    "\3\5\1\0\11\5\52\0\1\u0109\70\0\1\u010a\13\0"+
    "\1\5\22\0\3\5\1\u010b\2\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\33\0\1\u010c\71\0\1\u010d\62\0"+
    "\2\u010e\32\0\1\5\22\0\3\5\1\u010f\2\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\0\1\5\1\u0110\2\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\22\0\6\5\1\u010e\1\u0111\3\5"+
    "\5\0\3\5\1\0\11\5\31\0\1\u0112\73\0\1\u0113"+
    "\31\0\1\5\22\0\6\5\1\0\1\5\1\u0114\2\5"+
    "\5\0\3\5\1\0\11\5\31\0\1\u0115\70\0\1\u0116"+
    "\101\0\1\u0117\44\0\1\u0118\65\0\1\u0119\65\0\1\u011a"+
    "\101\0\1\u011b\47\0\1\u011c\35\0\1\5\22\0\4\5"+
    "\1\u011d\1\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\52\0\1\u011e\17\0\1\5\22\0\6\5\1\0\4\5"+
    "\5\0\2\5\1\u011f\1\0\11\5\5\0\1\5\22\0"+
    "\3\5\1\u0120\2\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\61\0\1\u0121\10\0\1\5\22\0\4\5\1\u0122"+
    "\1\5\1\0\4\5\5\0\3\5\1\0\11\5\40\0"+
    "\1\u0123\31\0\1\5\22\0\6\5\1\0\1\5\1\u0124"+
    "\2\5\5\0\3\5\1\0\11\5\5\0\1\5\22\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\u0125\1\u0126\10\5"+
    "\56\0\1\u0127\60\0\1\u0128\17\0\1\5\22\0\6\5"+
    "\1\0\4\5\5\0\2\5\1\u0129\1\0\11\5\40\0"+
    "\1\u012a\55\0\1\u012b\40\0\1\5\22\0\6\5\1\0"+
    "\4\5\5\0\2\5\1\u012c\1\0\11\5\34\0\1\u012d"+
    "\102\0\1\u012e\64\0\1\u012f\17\0\1\5\22\0\4\5"+
    "\1\u0130\1\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\22\0\6\5\1\0\4\5\5\0\2\5"+
    "\1\u0131\1\0\11\5\5\0\1\5\22\0\6\5\1\0"+
    "\4\5\5\0\2\5\1\u0132\1\0\11\5\4\0\1\u0133"+
    "\133\0\2\u0134\15\0\1\5\22\0\6\5\1\0\4\5"+
    "\5\0\3\5\1\u0134\1\u0135\10\5\4\0\1\u0136\111\0"+
    "\1\u0137\73\0\1\u0138\55\0\1\u0139\67\0\1\u013a\65\0"+
    "\1\u013b\106\0\1\u013c\12\0\1\5\22\0\6\5\1\0"+
    "\4\5\5\0\2\5\1\u013d\1\0\11\5\57\0\1\u013e"+
    "\40\0\1\u013f\72\0\1\u0140\75\0\1\u0141\44\0\1\u0142"+
    "\36\0\1\u0143\65\0\1\5\22\0\2\5\1\u0144\3\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\4\0\1\u0143"+
    "\1\5\22\0\6\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\36\0\2\u0145\63\0\2\u0146\61\0\1\u0147\72\0"+
    "\1\u0148\54\0\1\u0149\70\0\2\u014a\61\0\1\u014b\35\0"+
    "\1\5\22\0\1\5\1\u014c\4\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\33\0\1\u014d\65\0\1\u014e\63\0"+
    "\1\u014f\71\0\1\u0150\60\0\1\u0151\35\0\1\5\22\0"+
    "\6\5\1\0\1\5\1\u0152\2\5\5\0\3\5\1\0"+
    "\11\5\51\0\1\u0153\64\0\1\u0154\45\0\1\u0155\63\0"+
    "\1\u0156\105\0\1\u0157\43\0\1\u0158\65\0\1\u0159\64\0"+
    "\1\u015a\110\0\1\u015b\64\0\1\u015c\13\0\1\5\22\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\2\5\1\u015d"+
    "\6\5\57\0\1\u015e\64\0\1\u015f\57\0\1\u0160\52\0"+
    "\1\u0161\60\0\1\u0162\63\0\1\u0163\103\0\1\u0164\52\0"+
    "\1\u0165\64\0\1\u0166\64\0\1\u0167\77\0\2\u0168\41\0"+
    "\1\u0169\111\0\1\u016a\64\0\1\u016b\60\0\1\u016c\65\0"+
    "\2\u016d\46\0\2\u016e\56\0\1\u016f\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15529];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\2\1\1\11\1\1\4\11"+
    "\12\1\5\11\7\1\12\0\2\1\1\0\1\1\1\0"+
    "\6\1\2\0\4\1\1\0\3\1\1\0\4\1\1\0"+
    "\1\11\6\1\1\11\1\0\1\11\3\0\2\1\2\0"+
    "\2\1\1\0\1\1\1\0\7\1\4\0\7\1\1\0"+
    "\2\1\1\0\5\1\1\0\3\1\1\0\2\1\1\11"+
    "\2\0\1\1\1\0\3\1\1\11\1\1\2\0\2\1"+
    "\1\0\3\1\4\0\6\1\1\0\2\1\3\0\3\1"+
    "\1\0\3\1\1\0\2\1\2\0\1\11\2\1\2\0"+
    "\2\1\2\0\2\1\4\0\6\1\1\0\2\1\5\0"+
    "\1\11\1\1\1\0\2\1\1\11\6\1\1\11\2\1"+
    "\2\0\2\1\2\0\2\1\1\0\1\11\2\0\5\1"+
    "\2\0\1\1\7\0\1\11\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\2\0\1\1\2\0\1\1"+
    "\3\0\3\1\2\0\1\1\7\0\1\11\1\1\1\11"+
    "\2\1\1\0\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\0\1\1\2\0\1\1\1\0\1\11\4\1\1\0"+
    "\1\11\1\1\2\0\1\11\4\0\1\1\3\0\1\11"+
    "\2\0\1\1\6\0\1\11\1\1\1\11\4\0\1\1"+
    "\3\0\1\11\4\0\2\11\1\1\4\0\2\11\4\0"+
    "\1\11\1\0\2\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+ " Linea: "+yyline+" Columna: "+yycolumn);
            } 
            // fall through
          case 71: break;
          case 2: 
            { System.out.println("Reconocio tnum, lexema:"+yytext());
                return new Symbol(Simbolos.tnum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 3: 
            { System.out.println("Reconocio palabra, lexema:"+yytext());
                    return new Symbol(Simbolos.palabra, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 4: 
            { System.out.println("Reconocio tdiv, lexema:"+yytext());
                    return new Symbol(Simbolos.tdiv, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 5: 
            { /* Espacios en blanco, se ignoran */
            } 
            // fall through
          case 75: break;
          case 6: 
            { System.out.println("Reconocio tmul, lexema:"+yytext());
                    return new Symbol(Simbolos.tmul, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 7: 
            { System.out.println("Reconocio tpuntoycoma, lexema:"+yytext());
                    return new Symbol(Simbolos.tpuntoycoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 8: 
            { System.out.println("Reconocio trest, lexema:"+yytext());
                    return new Symbol(Simbolos.trest, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 9: 
            { System.out.println("Reconocio tinterrogacioninicio, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacioninicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 10: 
            { System.out.println("Reconocio tinterrogacionfin, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacionfin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 11: 
            { System.out.println("Reconocio tmayor, lexema:"+yytext());
                    return new Symbol(Simbolos.tmayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 12: 
            { System.out.println("Reconocio tcoma, lexema:"+yytext());
                    return new Symbol(Simbolos.tcoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 13: 
            { System.out.println("Reconocio tsum, lexema:"+yytext());
                    return new Symbol(Simbolos.tsum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 14: 
            { System.out.println("Reconocio pare1, lexema:"+yytext());
                    return new Symbol(Simbolos.pare1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 15: 
            { System.out.println("Reconocio pare2, lexema:"+yytext());
                    return new Symbol(Simbolos.pare2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 16: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.cor1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 17: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.cor2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 18: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 19: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada si, lexema:"+yytext());
                    return new Symbol(Simbolos.prSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 20: 
            { //Codigo en java
                    System.out.println("Reconocio float, lexema:"+yytext());
                    return new Symbol(Simbolos.prFloat, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 21: 
            { //codigo en java
                    System.out.println("Reconocio variable, lexema:"+yytext());
                    return new Symbol(Simbolos.tvariable, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 22: 
            { //codigo en java
                    System.out.println("Reconocio caracter, lexema:"+yytext());
                    return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 23: 
            { System.out.println("Reconocio comentario, lexema:"+yytext());
                    return new Symbol(Simbolos.tcomentario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 24: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada not, lexema:"+yytext());
                    return new Symbol(Simbolos.prNot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 25: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada con, lexema:"+yytext());
                    return new Symbol(Simbolos.prCon, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 26: 
            { System.out.println("Reconocio tmod, lexema:"+yytext());
                    return new Symbol(Simbolos.tmod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 27: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin, lexema:"+yytext());
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 28: 
            { //codigo en java
                    System.out.println("Reconocio cadena, lexema:"+yytext());
                    return new Symbol(Simbolos.tcadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 29: 
            { System.out.println("Reconocio comentario de varias lineas, lexema:"+yytext());
                return new Symbol(Simbolos.tcomentariovariaslineas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 30: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada para, lexema:"+yytext());
                    return new Symbol(Simbolos.prPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 31: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada o_si, lexema:"+yytext());
                    return new Symbol(Simbolos.prO_Si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 32: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada como, lexema:"+yytext());
                    return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 33: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada menor, lexema:"+yytext());
                    return new Symbol(Simbolos.prMenor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 34: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada mayor, lexema:"+yytext());
                    return new Symbol(Simbolos.prMayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 35: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada falso, lexema:"+yytext());
                    return new Symbol(Simbolos.prFalso, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 36: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada segun, lexema:"+yytext());
                    return new Symbol(Simbolos.prSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 37: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada hacer, lexema:"+yytext());
                    return new Symbol(Simbolos.prHacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 38: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada hasta, lexema:"+yytext());
                    return new Symbol(Simbolos.prHasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 39: 
            { //codigo en java
                    System.out.println("Reconocio ascii, lexema:"+yytext());
                    return new Symbol(Simbolos.ascii, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 40: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada numero, lexema:"+yytext());
                    return new Symbol(Simbolos.prNumero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 41: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada cadena, lexema:"+yytext());
                    return new Symbol(Simbolos.prCadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 42: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada inicio, lexema:"+yytext());
                    return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 43: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada metodo, lexema:"+yytext());
                    return new Symbol(Simbolos.prMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 44: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_si, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 45: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada funcion, lexema:"+yytext());
                    return new Symbol(Simbolos.prFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 46: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada repetir, lexema:"+yytext());
                    return new Symbol(Simbolos.prRepetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 47: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada boolean, lexema:"+yytext());
                    return new Symbol(Simbolos.prBoolean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 48: 
            { System.out.println("Reconocio tpot, lexema:"+yytext());
                    return new Symbol(Simbolos.tpot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 49: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada entonces, lexema:"+yytext());
                    return new Symbol(Simbolos.prEntonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 50: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada es_igual, lexema:"+yytext());
                    return new Symbol(Simbolos.prEsIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 51: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada ejecutar, lexema:"+yytext());
                    return new Symbol(Simbolos.prEjecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 52: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada caracter, lexema:"+yytext());
                    return new Symbol(Simbolos.prCaracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 53: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada ingresar, lexema:"+yytext());
                    return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 54: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada imprimir, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 55: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada mientras, lexema:"+yytext());
                    return new Symbol(Simbolos.prMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 56: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_para, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 57: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada con_valor, lexema:"+yytext());
                    return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 58: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_segun, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 59: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada verdadero, lexema:"+yytext());
                    return new Symbol(Simbolos.prVerdadero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 60: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada hasta_que, lexema:"+yytext());
                    return new Symbol(Simbolos.prRetornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 61: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_metodo, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 62: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada incremental, lexema:"+yytext());
                    return new Symbol(Simbolos.prIncremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 63: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada imprimir_nl, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimirNl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 64: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_funcion, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 65: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada es_diferente, lexema:"+yytext());
                    return new Symbol(Simbolos.prEsDiferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 66: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_mientras, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 67: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada menor_o_igual, lexema:"+yytext());
                    return new Symbol(Simbolos.prMenorOIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 68: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada mayor_o_igual, lexema:"+yytext());
                    return new Symbol(Simbolos.prMayorOIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 69: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada con_parametros, lexema:"+yytext());
                    return new Symbol(Simbolos.prConParametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 70: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada del_lo_contrario, lexema:"+yytext());
                    return new Symbol(Simbolos.prDeLoContrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
