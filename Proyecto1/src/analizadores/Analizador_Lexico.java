/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;
import proyecto1.Errors;
import java.util.ArrayList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 50,  5, 51, 50, 50,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    50,  0,  6,  0, 11,  0,  0,  4, 32, 33,  8, 20, 19, 15, 10,  7, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 14,  0, 36, 18, 17, 
     0, 29, 48, 26, 31, 24, 37, 38, 45, 28, 47,  3, 43, 30, 25, 22, 
    21, 46, 39, 41, 23, 44, 42,  3,  3, 49,  3, 34,  0, 35,  0,  2, 
     0, 29, 48, 26, 31, 24, 37, 38, 45, 28, 47,  3, 43, 30, 25, 22, 
    21, 46, 39, 41, 23, 44, 42,  3,  3, 49,  3, 12,  0, 13,  0,  0, 
     0,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\1"+
    "\1\5\1\6\1\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\5\3\1\1\3\3\1\16\1\17\1\20"+
    "\1\21\1\22\2\3\1\1\4\3\4\0\1\23\4\0"+
    "\1\23\3\0\2\3\1\0\1\3\1\0\6\3\2\0"+
    "\4\3\1\0\3\3\1\0\4\3\1\0\1\24\1\3"+
    "\1\24\3\3\1\25\1\26\1\0\1\27\3\0\2\30"+
    "\2\0\2\3\1\0\1\3\1\0\1\3\1\31\1\3"+
    "\1\32\3\3\4\0\4\3\1\33\2\3\1\0\2\3"+
    "\1\0\2\34\3\3\1\0\3\3\1\0\2\3\1\23"+
    "\2\0\1\30\1\0\1\35\1\3\1\36\1\37\1\3"+
    "\2\0\2\3\1\0\1\40\2\3\4\0\6\3\1\0"+
    "\2\3\3\0\3\3\1\0\3\3\1\0\2\3\2\0"+
    "\1\35\2\3\2\0\2\3\2\0\2\3\4\0\5\3"+
    "\1\41\1\0\1\3\1\42\5\0\2\43\1\0\2\3"+
    "\2\44\1\3\1\45\2\46\1\3\1\47\2\3\2\0"+
    "\1\3\1\50\2\0\1\51\1\3\1\0\1\52\2\0"+
    "\1\3\1\52\2\3\1\53\2\0\1\3\7\0\1\54"+
    "\1\0\1\3\1\0\2\3\1\0\1\3\1\0\2\3"+
    "\2\0\1\3\2\0\1\3\3\0\3\3\2\0\1\3"+
    "\7\0\2\55\2\56\1\3\1\0\1\57\2\60\2\61"+
    "\1\62\1\0\1\63\2\0\1\64\1\0\1\65\1\66"+
    "\1\3\1\65\1\66\1\0\2\67\2\0\1\70\4\0"+
    "\1\3\3\0\1\71\2\0\1\3\6\0\1\72\1\73"+
    "\1\74\4\0\1\3\3\0\1\75\4\0\1\76\1\77"+
    "\1\76\4\0\1\100\1\101\4\0\1\102\1\0\1\103"+
    "\1\104\1\0\1\105\1\0\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\64\0\u0138"+
    "\0\u016c\0\64\0\u01a0\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\64\0\64\0\64\0\64\0\64"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u01a0"+
    "\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\64"+
    "\0\u0c98\0\320\0\u0ccc\0\u0d00\0\u0d34\0\u0514\0\64\0\u0d68"+
    "\0\64\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\320\0\u1040"+
    "\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0"+
    "\0\u1214\0\u1248\0\u127c\0\u12b0\0\320\0\u12e4\0\u1318\0\u134c"+
    "\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\64"+
    "\0\u168c\0\u16c0\0\u06b4\0\u16f4\0\u0ea0\0\u1728\0\320\0\64"+
    "\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\320\0\u1894"+
    "\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4"+
    "\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74"+
    "\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\64\0\u1eac\0\u1ee0"+
    "\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080"+
    "\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220"+
    "\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0"+
    "\0\u23f4\0\u2428\0\64\0\320\0\u245c\0\u2490\0\u24c4\0\64"+
    "\0\320\0\u24f8\0\320\0\u252c\0\u2560\0\u2594\0\64\0\u25c8"+
    "\0\u25fc\0\u2630\0\u2664\0\u2698\0\320\0\u26cc\0\u2700\0\320"+
    "\0\u2734\0\u2768\0\64\0\u279c\0\u27d0\0\u2804\0\320\0\u2838"+
    "\0\u286c\0\320\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4"+
    "\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\64\0\u2aa8\0\u2adc\0\u2b10"+
    "\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0"+
    "\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u2e50"+
    "\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0"+
    "\0\u3024\0\u3058\0\u308c\0\u30c0\0\u30f4\0\64\0\320\0\64"+
    "\0\320\0\u3128\0\u315c\0\320\0\64\0\320\0\64\0\320"+
    "\0\64\0\u3190\0\320\0\u31c4\0\u31f8\0\320\0\u322c\0\64"+
    "\0\u3260\0\u3294\0\320\0\u32c8\0\u32fc\0\64\0\320\0\u3330"+
    "\0\u3364\0\64\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c"+
    "\0\u34d0\0\u3504\0\64\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608"+
    "\0\u363c\0\u3670\0\u36a4\0\u36d8\0\64\0\320\0\64\0\u370c"+
    "\0\u3740\0\u3774\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878\0\64"+
    "\0\u38ac\0\u38e0\0\u3914\0\u3948\0\64\0\64\0\320\0\u397c"+
    "\0\u39b0\0\u39e4\0\u3a18\0\64\0\64\0\u3a4c\0\u3a80\0\u3ab4"+
    "\0\u3ae8\0\64\0\u3b1c\0\64\0\64\0\u3b50\0\64\0\u3b84"+
    "\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\4\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\5\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\5\1\42\1\43\1\44\1\45"+
    "\2\5\1\46\2\5\1\47\1\5\1\7\66\0\1\3"+
    "\7\0\1\50\1\51\52\0\1\52\1\0\1\52\21\0"+
    "\6\52\1\0\4\52\5\0\3\52\1\0\11\52\5\0"+
    "\1\5\21\0\6\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\2\0\4\53\1\54\1\55\5\53\1\56\50\53"+
    "\5\57\1\60\1\61\4\57\1\62\50\57\7\0\1\63"+
    "\1\64\54\0\1\50\7\0\1\50\1\51\54\0\1\5"+
    "\21\0\1\5\1\65\4\5\1\0\1\5\1\66\2\5"+
    "\5\0\3\5\1\0\11\5\4\0\1\67\1\5\21\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\21\0\4\5\1\70\1\5\1\0\4\5\5\0"+
    "\3\5\1\71\1\72\5\5\1\73\2\5\5\0\1\5"+
    "\21\0\1\5\1\74\4\5\1\0\4\5\5\0\3\5"+
    "\1\0\3\5\1\75\5\5\5\0\1\5\21\0\1\5"+
    "\1\76\4\5\1\0\1\5\1\77\2\5\5\0\3\5"+
    "\1\0\11\5\33\0\1\100\4\0\1\101\30\0\1\5"+
    "\21\0\4\5\1\102\1\5\1\0\2\5\1\103\1\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\21\0\1\5"+
    "\1\104\1\5\1\105\2\5\1\106\1\107\1\110\2\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\21\0\3\5"+
    "\1\111\2\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\21\0\6\5\1\112\1\113\1\114\2\5"+
    "\5\0\3\5\1\0\3\5\1\115\5\5\5\0\1\5"+
    "\21\0\3\5\1\116\2\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\32\0\1\117\2\0\2\120\32\0\1\5"+
    "\21\0\3\5\1\121\2\5\1\120\1\122\3\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\3\5\1\123"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\21\0\6\5\1\0\1\5\1\124\2\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\1\5\1\125"+
    "\4\5\1\0\4\5\5\0\3\5\1\0\11\5\3\0"+
    "\1\126\7\0\1\126\53\0\1\52\1\127\1\52\21\0"+
    "\6\52\1\0\4\52\5\0\3\52\1\0\11\52\2\0"+
    "\4\130\1\131\1\0\56\130\4\0\1\131\57\0\4\130"+
    "\1\131\1\0\6\130\1\132\47\130\5\133\1\0\1\131"+
    "\55\133\6\0\1\131\55\0\5\133\1\0\1\131\5\133"+
    "\1\134\47\133\7\135\1\136\54\135\10\137\1\140\53\137"+
    "\3\0\1\5\21\0\2\5\1\141\3\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\21\0\6\5"+
    "\1\0\4\5\5\0\2\5\1\142\1\0\11\5\52\0"+
    "\2\143\15\0\1\5\21\0\2\5\1\144\3\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\4\0\1\145\63\0"+
    "\1\145\1\5\21\0\6\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\21\0\3\5\1\146\2\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\21\0\2\5\1\147\3\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\21\0\6\5\1\0\2\5"+
    "\1\150\1\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\21\0\4\5\1\151\1\5\1\0\2\5\1\152\1\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\21\0\6\5"+
    "\1\0\3\5\1\153\5\0\2\5\1\154\1\0\11\5"+
    "\34\0\1\155\2\156\11\0\1\157\42\0\1\160\41\0"+
    "\1\5\21\0\5\5\1\161\1\156\1\162\3\5\5\0"+
    "\1\5\1\163\1\5\1\0\11\5\5\0\1\5\21\0"+
    "\1\164\5\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\21\0\6\5\1\0\3\5\1\165\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\2\5\1\166"+
    "\1\5\1\167\1\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\32\0\1\170\36\0\1\5\21\0\3\5\1\171"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\21\0\6\5\1\0\4\5\5\0\3\5\1\0"+
    "\10\5\1\172\4\0\1\173\1\5\21\0\6\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\33\0\1\174\35\0"+
    "\1\5\21\0\4\5\1\175\1\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\6\5\1\0"+
    "\4\5\5\0\3\5\1\0\2\5\1\176\6\5\5\0"+
    "\1\5\21\0\4\5\1\177\1\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\1\200\5\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\50\0\1\201"+
    "\20\0\1\5\21\0\6\5\1\0\4\5\5\0\1\5"+
    "\1\202\1\5\1\0\11\5\5\0\1\5\21\0\6\5"+
    "\1\0\4\5\5\0\2\5\1\203\1\0\11\5\5\0"+
    "\1\5\21\0\5\5\1\204\1\0\4\5\5\0\3\5"+
    "\1\205\1\206\10\5\5\0\1\5\21\0\1\5\1\207"+
    "\4\5\1\0\4\5\5\0\3\5\1\0\11\5\2\0"+
    "\4\130\1\210\1\0\57\130\1\211\2\130\1\210\1\0"+
    "\3\130\1\211\52\130\5\133\1\0\1\210\56\133\1\212"+
    "\3\133\1\0\1\210\2\133\1\212\52\133\5\135\1\0"+
    "\63\135\1\0\1\135\1\213\54\135\10\137\1\214\62\137"+
    "\1\215\1\140\53\137\3\0\1\5\21\0\3\5\1\216"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\21\0\6\5\1\0\1\5\1\217\2\5\5\0"+
    "\3\5\1\0\11\5\35\0\2\220\32\0\1\5\21\0"+
    "\1\5\1\221\4\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\35\0\2\222\2\0\1\223\27\0\1\5\21\0"+
    "\5\5\1\224\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\21\0\3\5\1\225\2\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\4\0\1\226\1\5\21\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\21\0\1\5\1\227\4\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\3\5\1\230"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\21\0\6\5\1\0\1\5\1\231\2\5\5\0"+
    "\3\5\1\0\11\5\51\0\1\232\46\0\1\233\100\0"+
    "\1\234\63\0\1\235\17\0\1\5\21\0\6\5\1\0"+
    "\4\5\5\0\2\5\1\236\1\0\11\5\5\0\1\5"+
    "\21\0\5\5\1\237\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\21\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\240\1\0\11\5\5\0\1\5\21\0\6\5"+
    "\1\0\4\5\5\0\2\5\1\241\1\0\11\5\5\0"+
    "\1\5\21\0\1\5\1\242\4\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\1\5\1\243"+
    "\4\5\1\0\4\5\5\0\3\5\1\0\11\5\33\0"+
    "\1\244\35\0\1\5\21\0\4\5\1\245\1\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\21\0"+
    "\1\5\1\246\4\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\55\0\1\247\12\0\1\250\63\0\1\250\1\5"+
    "\21\0\6\5\1\0\4\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\21\0\6\5\1\0\4\5\5\0\3\5"+
    "\1\251\1\252\10\5\5\0\1\5\21\0\5\5\1\253"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\21\0\3\5\1\254\2\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\56\0\1\255\12\0\1\5\21\0\6\5"+
    "\1\0\4\5\5\0\3\5\1\0\3\5\1\256\5\5"+
    "\5\0\1\5\21\0\6\5\1\0\3\5\1\257\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\3\5\1\260"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\31\0"+
    "\1\261\37\0\1\5\21\0\2\5\1\262\3\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\21\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\2\5\1\263"+
    "\6\5\2\0\1\130\1\211\2\130\1\210\1\0\3\130"+
    "\1\211\3\130\1\264\46\130\1\133\1\212\3\133\1\0"+
    "\1\210\2\133\1\212\3\133\1\265\46\133\7\0\1\266"+
    "\1\214\56\0\1\5\21\0\4\5\1\267\1\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\5\0\1\5\21\0"+
    "\4\5\1\270\1\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\50\0\1\271\50\0\2\272\32\0\1\5\21\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\3\5\1\273"+
    "\5\5\5\0\1\5\21\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\274\1\0\11\5\27\0\1\275\24\0\1\276"+
    "\14\0\1\5\21\0\4\5\1\277\1\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\21\0\5\5"+
    "\1\300\1\0\4\5\5\0\3\5\1\0\11\5\32\0"+
    "\1\301\66\0\2\302\57\0\1\303\66\0\2\304\32\0"+
    "\1\5\21\0\3\5\1\305\2\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\6\5\1\302"+
    "\1\306\3\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\21\0\3\5\1\307\2\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\21\0\6\5\1\304\1\310"+
    "\3\5\5\0\3\5\1\0\11\5\5\0\1\5\21\0"+
    "\6\5\1\0\3\5\1\311\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\21\0\6\5\1\0\4\5\5\0\2\5"+
    "\1\312\1\0\11\5\31\0\1\313\37\0\1\5\21\0"+
    "\2\5\1\314\3\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\21\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\315\1\0\11\5\30\0\1\316\62\0\1\317"+
    "\10\0\1\320\6\0\1\321\2\0\2\322\40\0\1\323"+
    "\40\0\1\5\21\0\1\5\1\324\4\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\5\0\1\5\21\0\6\5"+
    "\1\325\1\326\3\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\21\0\2\5\1\327\3\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\33\0\1\330\35\0\1\5\21\0"+
    "\4\5\1\331\1\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\21\0\6\5\1\0\1\5\1\332"+
    "\2\5\5\0\3\5\1\0\11\5\5\0\1\5\21\0"+
    "\6\5\1\0\4\5\5\0\2\5\1\333\1\0\11\5"+
    "\37\0\1\334\31\0\1\5\21\0\6\5\1\0\1\5"+
    "\1\335\2\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\21\0\3\5\1\336\2\5\1\0\4\5\5\0\3\5"+
    "\1\0\11\5\2\0\4\130\1\337\1\0\56\130\5\133"+
    "\1\0\1\337\55\133\3\0\1\5\21\0\5\5\1\340"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\21\0\5\5\1\341\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\56\0\1\342\54\0\1\343\21\0\1\5\21\0"+
    "\2\5\1\344\3\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\21\0\1\5\1\345\4\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\37\0\1\346\63\0"+
    "\1\347\31\0\1\5\21\0\6\5\1\0\1\5\1\350"+
    "\2\5\5\0\3\5\1\0\11\5\5\0\1\5\21\0"+
    "\2\5\1\351\3\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\40\0\1\352\53\0\1\353\105\0\2\354\50\0"+
    "\1\355\30\0\1\5\21\0\6\5\1\0\2\5\1\356"+
    "\1\5\5\0\3\5\1\0\11\5\5\0\1\5\21\0"+
    "\1\5\1\357\4\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\5\0\1\5\21\0\6\5\1\0\4\5\5\0"+
    "\3\5\1\354\1\360\10\5\5\0\1\5\21\0\6\5"+
    "\1\0\2\5\1\361\1\5\5\0\3\5\1\0\11\5"+
    "\5\0\1\5\21\0\1\5\1\362\4\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\4\0\1\363\1\5\21\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\11\5\51\0"+
    "\1\364\17\0\1\5\21\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\365\1\0\11\5\4\0\1\366\1\5\21\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\11\5\4\0"+
    "\1\367\116\0\1\370\56\0\1\371\2\0\2\372\103\0"+
    "\1\373\37\0\1\374\2\0\2\375\55\0\1\376\40\0"+
    "\1\5\21\0\1\5\1\377\4\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\6\5\1\u0100"+
    "\1\u0101\3\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\21\0\6\5\1\0\3\5\1\u0102\5\0\3\5\1\0"+
    "\11\5\4\0\1\u0103\63\0\1\u0103\1\5\21\0\6\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\21\0\6\5\1\0\1\5\1\u0104\2\5\5\0\3\5"+
    "\1\0\11\5\5\0\1\5\21\0\6\5\1\u0105\1\u0106"+
    "\3\5\5\0\3\5\1\0\11\5\5\0\1\5\21\0"+
    "\3\5\1\u0107\2\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\37\0\1\u0108\56\0\1\u0109\36\0\1\5\21\0"+
    "\6\5\1\0\1\5\1\u010a\2\5\5\0\3\5\1\0"+
    "\11\5\51\0\1\u010b\67\0\1\u010c\13\0\1\5\21\0"+
    "\3\5\1\u010d\2\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\32\0\1\u010e\70\0\1\u010f\61\0\2\u0110\32\0"+
    "\1\5\21\0\3\5\1\u0111\2\5\1\0\4\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\6\5\1\0"+
    "\1\5\1\u0112\2\5\5\0\3\5\1\0\11\5\5\0"+
    "\1\5\21\0\6\5\1\u0110\1\u0113\3\5\5\0\3\5"+
    "\1\0\11\5\30\0\1\u0114\72\0\1\u0115\31\0\1\5"+
    "\21\0\6\5\1\0\1\5\1\u0116\2\5\5\0\3\5"+
    "\1\0\11\5\30\0\1\u0117\67\0\1\u0118\100\0\1\u0119"+
    "\43\0\1\u011a\64\0\1\u011b\64\0\1\u011c\100\0\1\u011d"+
    "\46\0\1\u011e\35\0\1\5\21\0\4\5\1\u011f\1\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\51\0\1\u0120"+
    "\17\0\1\5\21\0\6\5\1\0\4\5\5\0\2\5"+
    "\1\u0121\1\0\11\5\5\0\1\5\21\0\3\5\1\u0122"+
    "\2\5\1\0\4\5\5\0\3\5\1\0\11\5\60\0"+
    "\1\u0123\10\0\1\5\21\0\4\5\1\u0124\1\5\1\0"+
    "\4\5\5\0\3\5\1\0\11\5\37\0\1\u0125\31\0"+
    "\1\5\21\0\6\5\1\0\1\5\1\u0126\2\5\5\0"+
    "\3\5\1\0\11\5\5\0\1\5\21\0\6\5\1\0"+
    "\4\5\5\0\3\5\1\u0127\1\u0128\10\5\55\0\1\u0129"+
    "\57\0\1\u012a\17\0\1\5\21\0\6\5\1\0\4\5"+
    "\5\0\2\5\1\u012b\1\0\11\5\37\0\1\u012c\54\0"+
    "\1\u012d\40\0\1\5\21\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\u012e\1\0\11\5\33\0\1\u012f\101\0\1\u0130"+
    "\63\0\1\u0131\17\0\1\5\21\0\4\5\1\u0132\1\5"+
    "\1\0\4\5\5\0\3\5\1\0\11\5\5\0\1\5"+
    "\21\0\6\5\1\0\4\5\5\0\2\5\1\u0133\1\0"+
    "\11\5\5\0\1\5\21\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\u0134\1\0\11\5\4\0\1\u0135\131\0\2\u0136"+
    "\15\0\1\5\21\0\6\5\1\0\4\5\5\0\3\5"+
    "\1\u0136\1\u0137\10\5\4\0\1\u0138\107\0\1\u0139\72\0"+
    "\1\u013a\54\0\1\u013b\66\0\1\u013c\64\0\1\u013d\105\0"+
    "\1\u013e\12\0\1\5\21\0\6\5\1\0\4\5\5\0"+
    "\2\5\1\u013f\1\0\11\5\56\0\1\u0140\37\0\1\u0141"+
    "\71\0\1\u0142\74\0\1\u0143\43\0\1\u0144\36\0\1\u0145"+
    "\64\0\1\5\21\0\2\5\1\u0146\3\5\1\0\4\5"+
    "\5\0\3\5\1\0\11\5\4\0\1\u0145\1\5\21\0"+
    "\6\5\1\0\4\5\5\0\3\5\1\0\11\5\35\0"+
    "\2\u0147\62\0\2\u0148\60\0\1\u0149\71\0\1\u014a\53\0"+
    "\1\u014b\67\0\2\u014c\60\0\1\u014d\35\0\1\5\21\0"+
    "\1\5\1\u014e\4\5\1\0\4\5\5\0\3\5\1\0"+
    "\11\5\32\0\1\u014f\64\0\1\u0150\62\0\1\u0151\70\0"+
    "\1\u0152\57\0\1\u0153\35\0\1\5\21\0\6\5\1\0"+
    "\1\5\1\u0154\2\5\5\0\3\5\1\0\11\5\50\0"+
    "\1\u0155\63\0\1\u0156\44\0\1\u0157\62\0\1\u0158\104\0"+
    "\1\u0159\42\0\1\u015a\64\0\1\u015b\63\0\1\u015c\107\0"+
    "\1\u015d\63\0\1\u015e\13\0\1\5\21\0\6\5\1\0"+
    "\4\5\5\0\3\5\1\0\2\5\1\u015f\6\5\56\0"+
    "\1\u0160\63\0\1\u0161\56\0\1\u0162\51\0\1\u0163\57\0"+
    "\1\u0164\62\0\1\u0165\102\0\1\u0166\51\0\1\u0167\63\0"+
    "\1\u0168\63\0\1\u0169\76\0\2\u016a\40\0\1\u016b\110\0"+
    "\1\u016c\63\0\1\u016d\57\0\1\u016e\64\0\2\u016f\45\0"+
    "\2\u0170\55\0\1\u0171\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15288];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\1\11\1\1\7\11"+
    "\11\1\5\11\7\1\4\0\1\1\4\0\1\1\3\0"+
    "\2\1\1\0\1\1\1\0\6\1\2\0\4\1\1\0"+
    "\3\1\1\0\4\1\1\0\1\11\6\1\1\11\1\0"+
    "\1\11\3\0\2\1\2\0\2\1\1\0\1\1\1\0"+
    "\7\1\4\0\7\1\1\0\2\1\1\0\5\1\1\0"+
    "\3\1\1\0\2\1\1\11\2\0\1\1\1\0\3\1"+
    "\1\11\1\1\2\0\2\1\1\0\3\1\4\0\6\1"+
    "\1\0\2\1\3\0\3\1\1\0\3\1\1\0\2\1"+
    "\2\0\1\11\2\1\2\0\2\1\2\0\2\1\4\0"+
    "\6\1\1\0\2\1\5\0\1\11\1\1\1\0\2\1"+
    "\1\11\6\1\1\11\2\1\2\0\2\1\2\0\2\1"+
    "\1\0\1\11\2\0\5\1\2\0\1\1\7\0\1\11"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\2\0\1\1\3\0\3\1\2\0\1\1"+
    "\7\0\1\11\1\1\1\11\2\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\0\1\1\2\0\1\1"+
    "\1\0\1\11\4\1\1\0\1\11\1\1\2\0\1\11"+
    "\4\0\1\1\3\0\1\11\2\0\1\1\6\0\1\11"+
    "\1\1\1\11\4\0\1\1\3\0\1\11\4\0\2\11"+
    "\1\1\4\0\2\11\4\0\1\11\1\0\2\11\1\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public ArrayList<Errors> errorsLex = new ArrayList<Errors>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+ " Linea: "+yyline+" Columna: "+yycolumn);
                            Errors tmp = new Errors("Lexico", yyline , yycolumn,"Componente " + yytext() + " no reconocido.");
        
                            errorsLex.add(tmp);
            } 
            // fall through
          case 71: break;
          case 2: 
            { System.out.println("Reconocio tnum, lexema:"+yytext());
                return new Symbol(Simbolos.tnum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 3: 
            { System.out.println("Reconocio palabra, lexema:"+yytext());
                    return new Symbol(Simbolos.palabra, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 4: 
            { /* Espacios en blanco, se ignoran */
            } 
            // fall through
          case 74: break;
          case 5: 
            { System.out.println("Reconocio tdiv, lexema:"+yytext());
                    return new Symbol(Simbolos.tdiv, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 6: 
            { System.out.println("Reconocio tmul, lexema:"+yytext());
                    return new Symbol(Simbolos.tmul, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 7: 
            { System.out.println("Reconocio tpuntoycoma, lexema:"+yytext());
                    return new Symbol(Simbolos.tpuntoycoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 8: 
            { System.out.println("Reconocio trest, lexema:"+yytext());
                    return new Symbol(Simbolos.trest, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 9: 
            { System.out.println("Reconocio tinterrogacioninicio, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacioninicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 10: 
            { System.out.println("Reconocio tinterrogacionfin, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacionfin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 11: 
            { System.out.println("Reconocio tmayor, lexema:"+yytext());
                    return new Symbol(Simbolos.tmayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 12: 
            { System.out.println("Reconocio tcoma, lexema:"+yytext());
                    return new Symbol(Simbolos.tcoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 13: 
            { System.out.println("Reconocio tsum, lexema:"+yytext());
                    return new Symbol(Simbolos.tsum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 14: 
            { System.out.println("Reconocio pare1, lexema:"+yytext());
                    return new Symbol(Simbolos.pare1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 15: 
            { System.out.println("Reconocio pare2, lexema:"+yytext());
                    return new Symbol(Simbolos.pare2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 16: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.cor1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 17: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.cor2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 18: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 19: 
            { //codigo en java
                    System.out.println("Reconocio cadena, lexema:"+yytext());
                    return new Symbol(Simbolos.tcadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 20: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada si, lexema:"+yytext());
                    return new Symbol(Simbolos.prSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 21: 
            { //Codigo en java
                    System.out.println("Reconocio float, lexema:"+yytext());
                    return new Symbol(Simbolos.prFloat, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 22: 
            { //codigo en java
                    System.out.println("Reconocio variable, lexema:"+yytext());
                    return new Symbol(Simbolos.tvariable, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 23: 
            { //codigo en java
                    System.out.println("Reconocio caracter, lexema:"+yytext());
                    return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 24: 
            { System.out.println("Reconocio comentario, lexema:"+yytext());
                    return new Symbol(Simbolos.tcomentario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 25: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada not, lexema:"+yytext());
                    return new Symbol(Simbolos.prNot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 26: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada con, lexema:"+yytext());
                    return new Symbol(Simbolos.prCon, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 27: 
            { System.out.println("Reconocio tmod, lexema:"+yytext());
                    return new Symbol(Simbolos.tmod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 28: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin, lexema:"+yytext());
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 29: 
            { System.out.println("Reconocio comentario de varias lineas, lexema:"+yytext());
                return new Symbol(Simbolos.tcomentariovariaslineas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 30: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada para, lexema:"+yytext());
                    return new Symbol(Simbolos.prPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 31: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada o_si, lexema:"+yytext());
                    return new Symbol(Simbolos.prO_Si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 32: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada como, lexema:"+yytext());
                    return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 33: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada menor, lexema:"+yytext());
                    return new Symbol(Simbolos.prMenor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 34: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada mayor, lexema:"+yytext());
                    return new Symbol(Simbolos.prMayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 35: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada falso, lexema:"+yytext());
                    return new Symbol(Simbolos.prFalso, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 36: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada segun, lexema:"+yytext());
                    return new Symbol(Simbolos.prSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 37: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada hacer, lexema:"+yytext());
                    return new Symbol(Simbolos.prHacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 38: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada hasta, lexema:"+yytext());
                    return new Symbol(Simbolos.prHasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 39: 
            { //codigo en java
                    System.out.println("Reconocio ascii, lexema:"+yytext());
                    return new Symbol(Simbolos.ascii, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 40: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada numero, lexema:"+yytext());
                    return new Symbol(Simbolos.prNumero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 41: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada cadena, lexema:"+yytext());
                    return new Symbol(Simbolos.prCadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 42: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada inicio, lexema:"+yytext());
                    return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 43: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada metodo, lexema:"+yytext());
                    return new Symbol(Simbolos.prMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 44: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_si, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 45: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada funcion, lexema:"+yytext());
                    return new Symbol(Simbolos.prFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 46: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada repetir, lexema:"+yytext());
                    return new Symbol(Simbolos.prRepetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 47: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada boolean, lexema:"+yytext());
                    return new Symbol(Simbolos.prBoolean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 48: 
            { System.out.println("Reconocio tpot, lexema:"+yytext());
                    return new Symbol(Simbolos.tpot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 49: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada entonces, lexema:"+yytext());
                    return new Symbol(Simbolos.prEntonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 50: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada es_igual, lexema:"+yytext());
                    return new Symbol(Simbolos.prEsIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 51: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada ejecutar, lexema:"+yytext());
                    return new Symbol(Simbolos.prEjecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 52: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada caracter, lexema:"+yytext());
                    return new Symbol(Simbolos.prCaracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 53: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada ingresar, lexema:"+yytext());
                    return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 54: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada imprimir, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 55: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada mientras, lexema:"+yytext());
                    return new Symbol(Simbolos.prMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 56: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_para, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 57: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada con_valor, lexema:"+yytext());
                    return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 58: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_segun, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 59: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada verdadero, lexema:"+yytext());
                    return new Symbol(Simbolos.prVerdadero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 60: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada hasta_que, lexema:"+yytext());
                    return new Symbol(Simbolos.prRetornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 61: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_metodo, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 62: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada incremental, lexema:"+yytext());
                    return new Symbol(Simbolos.prIncremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 63: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada imprimir_nl, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimirNl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 64: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_funcion, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 65: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada es_diferente, lexema:"+yytext());
                    return new Symbol(Simbolos.prEsDiferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 66: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada fin_mientras, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 67: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada menor_o_igual, lexema:"+yytext());
                    return new Symbol(Simbolos.prMenorOIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 68: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada mayor_o_igual, lexema:"+yytext());
                    return new Symbol(Simbolos.prMayorOIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 69: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada con_parametros, lexema:"+yytext());
                    return new Symbol(Simbolos.prConParametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 70: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada del_lo_contrario, lexema:"+yytext());
                    return new Symbol(Simbolos.prDeLoContrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
