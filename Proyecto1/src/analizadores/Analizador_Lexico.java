/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 40, 40, 41, 40, 40,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    40,  0,  4,  0,  0,  0,  0,  0, 28, 29,  7, 21, 20, 16,  0,  6, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 15,  0, 30, 19, 18, 
     0, 26,  3, 25, 27, 24, 31, 32, 37,  9, 39,  3, 14, 10, 13, 22, 
    11, 38, 12, 34, 23, 36, 35,  3,  3,  3,  3,  0,  0,  0,  0,  2, 
     0, 26,  3, 25, 27, 24, 31, 32, 37,  9, 39,  3, 14, 10, 13, 22, 
    11, 38, 12, 34, 23, 36, 35,  3,  3,  3,  3,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 41,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\1\4\3\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\4\3\1\15\1\16\1\17\1\3\1\1\2\3"+
    "\1\20\11\0\2\3\1\0\6\3\1\0\4\3\1\0"+
    "\2\3\1\21\2\0\1\21\3\3\1\22\1\23\1\24"+
    "\2\25\2\0\1\26\2\0\2\3\1\26\2\3\1\0"+
    "\1\3\1\27\5\3\1\0\3\3\1\30\1\0\2\31"+
    "\1\3\2\0\3\3\1\0\1\3\4\0\4\3\1\0"+
    "\3\3\1\32\2\3\1\33\2\3\1\34\3\0\1\3"+
    "\2\0\3\3\1\0\1\3\4\0\4\3\1\0\7\3"+
    "\10\0\1\3\1\0\1\35\1\3\1\35\1\36\2\37"+
    "\1\0\1\40\2\0\1\3\1\40\2\3\1\0\1\3"+
    "\1\41\1\3\1\0\4\3\7\0\1\42\2\0\1\3"+
    "\2\43\4\0\3\3\1\0\1\3\1\0\1\3\2\44"+
    "\3\3\10\0\2\45\1\0\1\46\1\0\1\47\1\46"+
    "\1\3\1\47\2\50\2\51\1\52\2\53\1\54\5\0"+
    "\1\55\5\0\1\3\1\0\1\56\4\0\1\57\1\60"+
    "\2\0\1\3\3\0\1\61\1\0\1\62\2\63\3\0"+
    "\1\64\2\0\1\65\2\0\1\66\1\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\52\0\52\0\52"+
    "\0\52\0\52\0\52\0\52\0\u0222\0\u024c\0\u0276\0\u02a0"+
    "\0\52\0\52\0\52\0\u02ca\0\u02f4\0\u031e\0\u0348\0\52"+
    "\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u0126\0\u046e"+
    "\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be"+
    "\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e"+
    "\0\u0738\0\u0762\0\52\0\u078c\0\u07b6\0\250\0\u07e0\0\u080a"+
    "\0\u0834\0\52\0\52\0\u085e\0\u03c6\0\52\0\u0888\0\u08b2"+
    "\0\52\0\u08dc\0\u0906\0\u0930\0\u095a\0\250\0\u0984\0\u09ae"+
    "\0\u09d8\0\u0a02\0\250\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4"+
    "\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24"+
    "\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74"+
    "\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4"+
    "\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\250\0\u0f96\0\u0fc0\0\52"+
    "\0\u0fea\0\u1014\0\250\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6"+
    "\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236"+
    "\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386"+
    "\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6"+
    "\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626"+
    "\0\52\0\u1650\0\250\0\250\0\u167a\0\u16a4\0\u16ce\0\52"+
    "\0\u16f8\0\u1722\0\u174c\0\250\0\u1776\0\u17a0\0\u17ca\0\u17f4"+
    "\0\250\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a"+
    "\0\u1944\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\52\0\u1a40"+
    "\0\u1a6a\0\u1a94\0\52\0\250\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c"+
    "\0\u1b66\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\52"+
    "\0\250\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88"+
    "\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\52\0\250\0\u1e5a\0\u1e84"+
    "\0\u1eae\0\52\0\u1ed8\0\u1f02\0\250\0\52\0\250\0\52"+
    "\0\250\0\250\0\52\0\250\0\250\0\u1f2c\0\u1f56\0\u1f80"+
    "\0\u1faa\0\u1fd4\0\52\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6"+
    "\0\u20d0\0\u20fa\0\52\0\u2124\0\u214e\0\u2178\0\u21a2\0\52"+
    "\0\52\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274\0\u229e\0\52"+
    "\0\u22c8\0\52\0\52\0\250\0\u22f2\0\u231c\0\u2346\0\52"+
    "\0\u2370\0\u239a\0\52\0\u23c4\0\u23ee\0\52\0\u2418\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\2\5\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\5\1\26"+
    "\1\27\1\5\1\30\1\31\1\32\1\33\1\34\1\5"+
    "\1\35\1\36\2\5\1\37\2\5\1\40\54\0\1\3"+
    "\51\0\1\41\1\0\1\41\5\0\6\41\7\0\6\41"+
    "\3\0\2\41\1\0\6\41\5\0\1\5\5\0\6\5"+
    "\7\0\6\5\3\0\2\5\1\0\6\5\3\0\1\42"+
    "\1\0\1\42\1\0\1\42\3\0\6\42\7\0\6\42"+
    "\3\0\2\42\1\0\10\42\1\43\1\44\1\43\1\44"+
    "\1\43\1\0\2\45\1\43\6\44\7\43\6\44\3\43"+
    "\2\44\1\43\6\44\3\0\1\46\1\0\1\46\2\0"+
    "\2\47\1\0\6\46\7\0\6\46\3\0\2\46\1\0"+
    "\6\46\14\0\1\50\2\0\1\51\37\0\1\5\5\0"+
    "\1\5\1\52\2\5\1\53\1\5\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\5\0\1\5\4\0\1\54\1\55"+
    "\5\5\7\0\1\56\1\5\1\57\3\5\3\0\2\5"+
    "\1\0\6\5\5\0\1\5\5\0\6\5\7\0\1\60"+
    "\3\5\1\61\1\5\3\0\2\5\1\0\6\5\5\0"+
    "\1\5\5\0\6\5\7\0\2\5\1\62\3\5\3\0"+
    "\2\5\1\0\6\5\4\0\1\63\1\5\5\0\6\5"+
    "\7\0\6\5\3\0\2\5\1\0\6\5\5\0\1\5"+
    "\5\0\4\5\1\64\1\5\7\0\6\5\3\0\2\5"+
    "\1\0\5\5\1\65\5\0\1\5\5\0\6\5\7\0"+
    "\1\66\5\5\3\0\2\5\1\0\6\5\5\0\1\5"+
    "\5\0\6\5\7\0\2\5\1\67\3\5\3\0\2\5"+
    "\1\0\6\5\5\0\1\5\4\0\1\70\1\71\5\5"+
    "\7\0\6\5\3\0\2\5\1\0\2\5\1\72\3\5"+
    "\12\0\2\73\15\0\1\74\1\75\24\0\1\5\4\0"+
    "\1\73\1\76\5\5\7\0\1\5\1\77\1\100\3\5"+
    "\3\0\2\5\1\0\6\5\5\0\1\5\5\0\6\5"+
    "\7\0\4\5\1\101\1\5\3\0\2\5\1\0\6\5"+
    "\3\0\1\41\1\102\1\41\5\0\6\41\7\0\6\41"+
    "\3\0\2\41\1\0\6\41\3\0\1\42\1\0\1\42"+
    "\1\103\1\42\3\0\6\42\7\0\6\42\3\0\2\42"+
    "\1\0\10\42\5\43\1\104\42\43\2\104\1\43\1\44"+
    "\1\43\1\44\1\43\1\104\2\105\1\43\6\44\7\43"+
    "\6\44\3\43\2\44\1\43\6\44\2\104\1\43\1\44"+
    "\1\43\1\44\1\43\1\104\2\45\1\43\6\44\7\43"+
    "\6\44\3\43\2\44\1\43\6\44\2\104\1\0\1\46"+
    "\1\0\1\46\2\0\2\106\1\0\6\46\7\0\6\46"+
    "\3\0\2\46\1\0\6\46\15\0\1\107\46\0\2\110"+
    "\15\0\1\111\1\0\1\112\6\0\1\113\14\0\1\5"+
    "\5\0\2\5\1\114\3\5\7\0\6\5\3\0\2\5"+
    "\1\0\6\5\5\0\1\5\4\0\1\110\1\115\5\5"+
    "\7\0\1\5\1\116\1\5\1\117\2\5\3\0\1\5"+
    "\1\120\1\0\6\5\32\0\1\121\24\0\1\5\5\0"+
    "\6\5\7\0\2\5\1\122\3\5\3\0\2\5\1\0"+
    "\6\5\5\0\1\5\5\0\6\5\7\0\5\5\1\123"+
    "\3\0\2\5\1\0\6\5\5\0\1\5\5\0\6\5"+
    "\7\0\1\5\1\124\4\5\3\0\2\5\1\0\6\5"+
    "\5\0\1\5\5\0\6\5\7\0\1\5\1\125\4\5"+
    "\3\0\2\5\1\0\6\5\5\0\1\5\5\0\3\5"+
    "\1\126\2\5\7\0\6\5\3\0\2\5\1\0\6\5"+
    "\5\0\1\5\5\0\2\5\1\127\3\5\7\0\1\5"+
    "\1\130\4\5\3\0\2\5\1\0\6\5\43\0\2\131"+
    "\12\0\1\5\5\0\6\5\7\0\1\5\1\132\4\5"+
    "\3\0\2\5\1\0\6\5\5\0\1\5\5\0\6\5"+
    "\7\0\2\5\1\133\3\5\3\0\2\5\1\0\6\5"+
    "\5\0\1\5\5\0\1\5\1\134\2\5\1\135\1\5"+
    "\7\0\6\5\3\0\2\5\1\0\6\5\4\0\1\136"+
    "\1\5\5\0\6\5\7\0\6\5\3\0\2\5\1\0"+
    "\6\5\17\0\1\137\37\0\1\5\5\0\4\5\1\140"+
    "\1\5\7\0\6\5\3\0\2\5\1\0\6\5\5\0"+
    "\1\5\5\0\4\5\1\141\1\5\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\16\0\1\142\75\0\1\143\14\0"+
    "\1\5\5\0\3\5\1\144\2\5\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\5\0\1\5\5\0\6\5\7\0"+
    "\6\5\3\0\1\5\1\145\1\0\6\5\5\0\1\5"+
    "\5\0\6\5\7\0\3\5\1\146\2\5\3\0\2\5"+
    "\1\147\1\150\5\5\2\0\5\43\1\0\42\43\16\0"+
    "\1\151\66\0\1\152\34\0\1\153\51\0\1\154\40\0"+
    "\1\5\5\0\3\5\1\155\2\5\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\5\0\1\5\5\0\6\5\7\0"+
    "\3\5\1\156\2\5\3\0\2\5\1\0\6\5\5\0"+
    "\1\5\5\0\3\5\1\157\2\5\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\5\0\1\5\5\0\3\5\1\160"+
    "\2\5\7\0\6\5\3\0\2\5\1\0\6\5\17\0"+
    "\1\161\37\0\1\5\5\0\4\5\1\162\1\5\7\0"+
    "\6\5\3\0\2\5\1\0\6\5\5\0\1\5\5\0"+
    "\6\5\7\0\1\163\5\5\3\0\2\5\1\0\6\5"+
    "\5\0\1\5\5\0\6\5\7\0\2\5\1\164\3\5"+
    "\3\0\2\5\1\0\6\5\5\0\1\5\5\0\6\5"+
    "\7\0\4\5\1\165\1\5\3\0\2\5\1\0\6\5"+
    "\5\0\1\5\5\0\6\5\7\0\2\5\1\166\3\5"+
    "\3\0\2\5\1\0\6\5\5\0\1\5\5\0\6\5"+
    "\7\0\1\167\5\5\3\0\2\5\1\0\6\5\12\0"+
    "\2\170\43\0\1\5\5\0\6\5\7\0\1\171\5\5"+
    "\3\0\2\5\1\0\6\5\5\0\1\5\5\0\6\5"+
    "\7\0\3\5\1\172\2\5\3\0\2\5\1\0\6\5"+
    "\5\0\1\5\5\0\6\5\7\0\1\173\5\5\3\0"+
    "\2\5\1\0\6\5\4\0\1\174\1\5\5\0\6\5"+
    "\7\0\6\5\3\0\2\5\1\0\6\5\20\0\1\175"+
    "\35\0\1\176\51\0\1\176\1\5\5\0\6\5\7\0"+
    "\6\5\3\0\2\5\1\0\6\5\5\0\1\5\5\0"+
    "\6\5\7\0\3\5\1\177\2\5\3\0\2\5\1\0"+
    "\6\5\12\0\2\200\104\0\1\201\10\0\1\5\4\0"+
    "\1\200\1\202\5\5\7\0\6\5\3\0\2\5\1\0"+
    "\6\5\5\0\1\5\5\0\6\5\7\0\6\5\3\0"+
    "\2\5\1\0\2\5\1\203\3\5\5\0\1\5\5\0"+
    "\6\5\7\0\2\5\1\204\3\5\3\0\2\5\1\0"+
    "\6\5\31\0\1\205\25\0\1\5\5\0\6\5\7\0"+
    "\1\5\1\206\4\5\3\0\2\5\1\0\6\5\12\0"+
    "\2\207\50\0\2\210\70\0\1\211\51\0\1\212\24\0"+
    "\1\5\4\0\1\207\1\213\5\5\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\5\0\1\5\4\0\1\210\1\214"+
    "\5\5\7\0\6\5\3\0\2\5\1\0\6\5\5\0"+
    "\1\5\5\0\6\5\7\0\2\5\1\215\3\5\3\0"+
    "\2\5\1\0\6\5\5\0\1\5\5\0\6\5\7\0"+
    "\2\5\1\216\3\5\3\0\2\5\1\0\6\5\31\0"+
    "\1\217\25\0\1\5\5\0\6\5\7\0\1\5\1\220"+
    "\4\5\3\0\2\5\1\0\6\5\5\0\1\5\5\0"+
    "\6\5\7\0\5\5\1\221\3\0\2\5\1\0\6\5"+
    "\5\0\1\5\5\0\4\5\1\222\1\5\7\0\6\5"+
    "\3\0\2\5\1\0\6\5\5\0\1\5\5\0\6\5"+
    "\7\0\1\5\1\223\4\5\3\0\2\5\1\0\6\5"+
    "\5\0\1\5\5\0\3\5\1\224\2\5\7\0\6\5"+
    "\3\0\2\5\1\0\6\5\5\0\1\5\5\0\4\5"+
    "\1\225\1\5\7\0\6\5\3\0\2\5\1\0\6\5"+
    "\5\0\1\5\5\0\6\5\7\0\6\5\3\0\2\5"+
    "\1\0\2\5\1\226\3\5\15\0\1\227\27\0\1\230"+
    "\34\0\1\231\35\0\1\232\1\233\23\0\1\234\1\0"+
    "\2\235\12\0\1\5\4\0\1\236\1\237\5\5\7\0"+
    "\6\5\3\0\2\5\1\0\6\5\17\0\1\240\51\0"+
    "\1\241\37\0\1\5\5\0\4\5\1\242\1\5\7\0"+
    "\6\5\3\0\2\5\1\0\6\5\5\0\1\5\5\0"+
    "\4\5\1\243\1\5\7\0\6\5\3\0\2\5\1\0"+
    "\6\5\5\0\1\5\5\0\3\5\1\244\2\5\7\0"+
    "\6\5\3\0\2\5\1\0\6\5\34\0\1\245\22\0"+
    "\1\5\5\0\6\5\7\0\4\5\1\246\1\5\3\0"+
    "\2\5\1\0\6\5\14\0\1\247\65\0\1\250\35\0"+
    "\1\251\100\0\2\252\12\0\1\5\5\0\1\5\1\253"+
    "\4\5\7\0\6\5\3\0\2\5\1\0\6\5\5\0"+
    "\1\5\5\0\6\5\7\0\1\254\5\5\3\0\2\5"+
    "\1\0\6\5\5\0\1\5\5\0\1\5\1\255\4\5"+
    "\7\0\6\5\3\0\2\5\1\0\6\5\5\0\1\5"+
    "\5\0\6\5\7\0\6\5\3\0\2\5\1\252\1\256"+
    "\5\5\16\0\1\257\40\0\1\5\5\0\3\5\1\260"+
    "\2\5\7\0\6\5\3\0\2\5\1\0\6\5\5\0"+
    "\1\5\5\0\6\5\7\0\1\261\5\5\3\0\2\5"+
    "\1\0\6\5\5\0\1\5\5\0\6\5\7\0\3\5"+
    "\1\262\2\5\3\0\2\5\1\0\6\5\5\0\1\5"+
    "\4\0\1\263\1\264\5\5\7\0\6\5\3\0\2\5"+
    "\1\0\6\5\5\0\1\5\5\0\4\5\1\265\1\5"+
    "\7\0\6\5\3\0\2\5\1\0\6\5\5\0\1\5"+
    "\5\0\6\5\7\0\3\5\1\266\2\5\3\0\2\5"+
    "\1\0\6\5\5\0\1\5\5\0\6\5\7\0\1\5"+
    "\1\267\4\5\3\0\2\5\1\0\6\5\34\0\1\270"+
    "\51\0\1\271\21\0\1\272\57\0\2\273\16\0\1\274"+
    "\53\0\1\275\63\0\1\276\15\0\2\277\16\0\1\300"+
    "\47\0\1\301\26\0\1\5\5\0\6\5\7\0\1\302"+
    "\5\5\3\0\2\5\1\0\6\5\42\0\1\303\14\0"+
    "\1\5\5\0\6\5\7\0\6\5\3\0\1\5\1\304"+
    "\1\0\6\5\4\0\1\305\51\0\1\305\1\5\5\0"+
    "\6\5\7\0\6\5\3\0\2\5\1\0\6\5\12\0"+
    "\2\306\70\0\1\307\53\0\1\310\22\0\1\5\4\0"+
    "\1\306\1\311\5\5\7\0\6\5\3\0\2\5\1\0"+
    "\6\5\5\0\1\5\5\0\6\5\7\0\2\5\1\312"+
    "\3\5\3\0\2\5\1\0\6\5\5\0\1\5\5\0"+
    "\6\5\7\0\4\5\1\313\1\5\3\0\2\5\1\0"+
    "\6\5\34\0\1\314\22\0\1\5\5\0\6\5\7\0"+
    "\4\5\1\315\1\5\3\0\2\5\1\0\6\5\5\0"+
    "\1\5\4\0\1\316\1\317\5\5\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\16\0\1\320\40\0\1\5\5\0"+
    "\3\5\1\321\2\5\7\0\6\5\3\0\2\5\1\0"+
    "\6\5\5\0\1\5\5\0\6\5\7\0\4\5\1\322"+
    "\1\5\3\0\2\5\1\0\6\5\5\0\1\5\5\0"+
    "\6\5\7\0\2\5\1\323\3\5\3\0\2\5\1\0"+
    "\6\5\5\0\1\5\5\0\6\5\7\0\4\5\1\324"+
    "\1\5\3\0\2\5\1\0\6\5\16\0\1\325\53\0"+
    "\1\326\64\0\1\327\50\0\1\330\50\0\1\331\36\0"+
    "\1\332\52\0\1\333\74\0\1\334\26\0\1\335\37\0"+
    "\1\5\5\0\4\5\1\336\1\5\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\50\0\1\337\17\0\1\340\52\0"+
    "\1\341\50\0\1\342\40\0\1\5\5\0\3\5\1\343"+
    "\2\5\7\0\6\5\3\0\2\5\1\0\6\5\5\0"+
    "\1\5\5\0\4\5\1\344\1\5\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\5\0\1\5\5\0\3\5\1\345"+
    "\2\5\7\0\6\5\3\0\2\5\1\0\6\5\43\0"+
    "\2\346\12\0\1\5\5\0\6\5\7\0\6\5\3\0"+
    "\2\5\1\346\1\347\5\5\34\0\1\350\22\0\1\5"+
    "\5\0\6\5\7\0\4\5\1\351\1\5\3\0\2\5"+
    "\1\0\6\5\5\0\1\5\5\0\3\5\1\352\2\5"+
    "\7\0\6\5\3\0\2\5\1\0\6\5\5\0\1\5"+
    "\5\0\6\5\7\0\6\5\3\0\2\5\1\353\1\354"+
    "\5\5\5\0\1\5\5\0\3\5\1\355\2\5\7\0"+
    "\6\5\3\0\2\5\1\0\6\5\34\0\1\356\45\0"+
    "\1\357\51\0\1\360\40\0\1\361\62\0\1\362\55\0"+
    "\1\363\50\0\1\364\64\0\1\365\51\0\1\366\7\0"+
    "\1\367\76\0\1\370\24\0\1\367\1\5\5\0\6\5"+
    "\7\0\6\5\3\0\2\5\1\0\6\5\5\0\1\5"+
    "\5\0\6\5\7\0\1\5\1\371\4\5\3\0\2\5"+
    "\1\0\6\5\14\0\1\372\53\0\1\373\52\0\1\374"+
    "\63\0\1\375\55\0\1\376\26\0\2\377\55\0\1\u0100"+
    "\64\0\1\u0101\36\0\1\u0102\66\0\1\u0103\22\0\1\5"+
    "\5\0\6\5\7\0\4\5\1\u0104\1\5\3\0\2\5"+
    "\1\0\6\5\32\0\1\u0105\50\0\1\u0106\36\0\1\u0107"+
    "\63\0\1\u0108\51\0\1\u0109\41\0\1\u010a\51\0\1\u010b"+
    "\36\0\1\5\5\0\5\5\1\u010c\7\0\6\5\3\0"+
    "\2\5\1\0\6\5\31\0\1\u010d\36\0\1\u010e\67\0"+
    "\1\u010f\34\0\1\u0110\50\0\1\u0111\67\0\1\u0112\60\0"+
    "\2\u0113\35\0\1\u0114\37\0\1\u0115\76\0\2\u0116\17\0"+
    "\2\u0117\66\0\1\u0118\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9282];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\7\11\4\1\3\11\4\1\1\11"+
    "\11\0\2\1\1\0\6\1\1\0\4\1\1\0\2\1"+
    "\1\11\2\0\4\1\2\11\2\1\1\11\2\0\1\11"+
    "\2\0\5\1\1\0\7\1\1\0\4\1\1\0\3\1"+
    "\2\0\3\1\1\0\1\1\4\0\4\1\1\0\6\1"+
    "\1\11\3\1\3\0\1\1\2\0\3\1\1\0\1\1"+
    "\4\0\4\1\1\0\7\1\10\0\1\1\1\0\1\11"+
    "\5\1\1\0\1\11\2\0\4\1\1\0\3\1\1\0"+
    "\4\1\7\0\1\11\2\0\1\1\1\11\1\1\4\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\11\4\1\10\0"+
    "\1\11\1\1\1\0\1\1\1\0\1\11\3\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\1\5\0\1\11\5\0"+
    "\1\1\1\0\1\11\4\0\2\11\2\0\1\1\3\0"+
    "\1\11\1\0\2\11\1\1\3\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+ "Linea"+yyline+" Columna "+yycolumn);
            } 
            // fall through
          case 56: break;
          case 2: 
            { System.out.println("Reconocio tnum, lexema:"+yytext());
                return new Symbol(Simbolos.tnum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 57: break;
          case 3: 
            { System.out.println("Reconocio palabra, lexema:"+yytext());
                    return new Symbol(Simbolos.palabra, yycolumn, yyline, yytext());
            } 
            // fall through
          case 58: break;
          case 4: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tdiv, yycolumn, yyline, yytext());
            } 
            // fall through
          case 59: break;
          case 5: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tmul, yycolumn, yyline, yytext());
            } 
            // fall through
          case 60: break;
          case 6: 
            { System.out.println("Reconocio tpuntoycoma, lexema:"+yytext());
                    return new Symbol(Simbolos.tpuntoycoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 61: break;
          case 7: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.trest, yycolumn, yyline, yytext());
            } 
            // fall through
          case 62: break;
          case 8: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacioninicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 9: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tinterrogacionfin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 64: break;
          case 10: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tmayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 65: break;
          case 11: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tcoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 12: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tsum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 67: break;
          case 13: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.pare1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 14: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.pare2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 15: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 16: 
            { /* Espacios en blanco, se ignoran */
            } 
            // fall through
          case 71: break;
          case 17: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 18: 
            { //codigo en java
                    System.out.println("Reconocio variable, lexema:"+yytext());
                    return new Symbol(Simbolos.tvariable, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 19: 
            { //codigo en java
                    System.out.println("Reconocio cadena, lexema:"+yytext());
                    return new Symbol(Simbolos.tcadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 20: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tcomentario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 21: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                return new Symbol(Simbolos.tcomentariovariaslineas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 22: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prInt, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 23: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tmod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 24: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prCon, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 25: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 26: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 27: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prO_Si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 28: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 29: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 30: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prHacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 31: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prHasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 32: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 33: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 34: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 35: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prString, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 36: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prRepetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 37: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 38: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 39: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 40: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 41: 
            { System.out.println("Reconocio Token, lexema:"+yytext());
                    return new Symbol(Simbolos.tpot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 42: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prRetornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 43: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prEntonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 44: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prEjecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 45: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 46: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 47: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 48: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prHastaQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 49: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 50: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prImprimirNl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 51: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prIncremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 52: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 53: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prFinMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 54: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prConParametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 55: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema:"+yytext());
                    return new Symbol(Simbolos.prDeLoContrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
